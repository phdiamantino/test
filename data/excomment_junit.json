[{ 
    "_id" : "5a933925b8a9f9639f176cd6", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/Protectable.java", 
    "filehash" : 2512607536, 
    "comments" : [
        {
            "id" : 63, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cd7", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "extensions/ActiveTestSuite.java", 
    "filehash" : 589689404, 
    "comments" : [
        {
            "id" : 11, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "public void run()", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cd8", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "swingui/TestRunner.java", 
    "filehash" : 384587294, 
    "comments" : [
        {
            "id" : 232, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// fails the first time", 
            "class" : "public class TestRunner extends BaseTestRunner implements TestRunContext", 
            "method" : "public void keyTyped(KeyEvent e)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 231, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// spaces required to avoid layout flicker Exit is shorter than Stop that shows in the same column", 
            "class" : "public class TestRunner extends BaseTestRunner implements TestRunContext", 
            "method" : "protected JButton createQuitButton()", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cd9", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "extensions/TestDecorator.java", 
    "filehash" : 1314813598, 
    "comments" : [
        {
            "id" : 15, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class\n* for defining new test decorators. Test decorator subclasses\n* can be introduced to add behaviour before or after a test\n* is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cda", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/TestSuite.java", 
    "filehash" : 3791589699, 
    "comments" : [
        {
            "id" : 117, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor getTestConstructor(Class theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.\n* <p>\n* A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 121, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private static String exceptionToString(Throwable t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cdb", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "tests/framework/AssertTest.java", 
    "filehash" : 747802748, 
    "comments" : [
        {
            "id" : 280, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// We have to throw the exception manually, .", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 278, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 279, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cdc", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "swingui/TestTreeModel.java", 
    "filehash" : 1569659881, 
    "comments" : [
        {
            "id" : 268, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Tests whether a test was an error*/", 
            "class" : "class TestTreeModel implements TreeModel", 
            "method" : "boolean wasRun(Test t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 265, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Remembers a test error*/", 
            "class" : "class TestTreeModel implements TreeModel", 
            "method" : "void addFailure(Test t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cdd", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "runner/TestSuiteLoader.java", 
    "filehash" : 1174188617, 
    "comments" : [
        {
            "id" : 176, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* An interface to define how a test suite should be loaded.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cde", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "textui/TestRunner.java", 
    "filehash" : 1717519037, 
    "comments" : [
        {
            "id" : 313, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.28, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 308, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n* TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.\n* <p>\n* When the wait command line argument is given TestRunner\n* waits until the users types RETURN.\n* <p>\n* TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cdf", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/TestCase.java", 
    "filehash" : 279317648, 
    "comments" : [
        {
            "id" : 68, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br>\n* 1) implement a subclass of TestCase<br>\n* 2) define instance variables that store the state of the fixture<br>\n* 3) initialize the fixture state by overriding <code>setUp</code><br>\n* 4) clean-up after a test by overriding <code>tearDown</code>.<br>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling <code>assertTrue</code> with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n* The dynamic way uses reflection to implement <code>runTest</code>. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce0", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/Test.java", 
    "filehash" : 751819963, 
    "comments" : [
        {
            "id" : 66, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 65, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce1", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "extensions/ExceptionTestCase.java", 
    "filehash" : 2509782485, 
    "comments" : [
        {
            "id" : 13, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Execute the test method expecting that an Exception of\n* class fExpected or one of its subclasses will be thrown*/", 
            "class" : "public class ExceptionTestCase extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce2", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "samples/money/Money.java", 
    "filehash" : 480031438, 
    "comments" : [
        {
            "id" : 191, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }, 
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce3", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "runner/TestCaseClassLoader.java", 
    "filehash" : 1915237575, 
    "comments" : [
        {
            "id" : 165, 
            "total_pattern" : 14.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 15.28, 
            "comment" : "/**\n* A custom class loader which enables the reloading\n* of classes for each test run. The class loader\n* can be configured with a list of package paths that\n* should be excluded from loading. The loading\n* of these packages is delegated to the system class\n* loader. They will be shared across test runs.\n* <p>\n* The list of excluded package paths is specified in\n* a properties file \"excluded.properties\" that is located in\n* the same place as the TestCaseClassLoader class.\n* <p>\n* <b>Known limitation:</b> the TestCaseClassLoader cannot load classes\n* from jar files.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce4", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/TestResult.java", 
    "filehash" : 1257431432, 
    "comments" : [
        {
            "id" : 95, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an <code>ArrayIndexOutOfBoundsException</code>.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 111, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 96, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce5", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "tests/extensions/AllTests.java", 
    "filehash" : 1442147260, 
    "comments" : [
        {
            "id" : 274, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.48, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce6", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/TestListener.java", 
    "filehash" : 2857010873, 
    "comments" : [
        {
            "id" : 91, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce7", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "tests/framework/SuiteTest.java", 
    "filehash" : 288725598, 
    "comments" : [
        {
            "id" : 289, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce8", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "framework/Assert.java", 
    "filehash" : 3533190918, 
    "comments" : [
        {
            "id" : 20, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 26, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 27, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 35, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// handle infinity specially since subtracting to infinite values gives NaN and the the following test fails", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, float expected, float actual, float delta)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ce9", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "runner/BaseTestRunner.java", 
    "filehash" : 315505909, 
    "comments" : [
        {
            "id" : 136, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// calling of the deprecated save method to enable compiling under 1.1.7", 
            "class" : "public abstract class BaseTestRunner implements TestListener", 
            "method" : "public static void savePreferences()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cea", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "swingui/TestRunContext.java", 
    "filehash" : 2736787699, 
    "comments" : [
        {
            "id" : 226, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The interface for accessing the Test run context. Test run views\n* should use this interface rather than accessing the TestRunner\n* directly.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176ceb", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "samples/SimpleTest.java", 
    "filehash" : 310890773, 
    "comments" : [
        {
            "id" : 210, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933925b8a9f9639f176cec", 
    "reference" : "r3.8.2", 
    "commit" : "a0f0ee1b3f72d9361eb09b3a25156c69a748aa47", 
    "commit_date" : "2004-12-28T17:19:01.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "samples/money/MoneyBag.java", 
    "filehash" : 3448200864, 
    "comments" : [
        {
            "id" : 192, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ced", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 377, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 369, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 368, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 372, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cee", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 255, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 7.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 254, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 256, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cef", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf0", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf1", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 502, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf2", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 506, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.84, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf3", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/JUnitCore.java", 
    "filehash" : 1388809529, 
    "comments" : [
        {
            "id" : 306, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:24:40 PM): V", 
            "class" : "public class JUnitCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf4", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 541, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 540, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 543, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Mar 10, 2009 10:47:34 AM): Import", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 542, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 544, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf5", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 481, 
            "total_pattern" : 8.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.5, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf6", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 554, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf7", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 214, 
            "total_pattern" : 17.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 17.5, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf8", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 563, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cf9", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 228, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:40:23 PM): V", 
            "class" : "public class MaxCore", 
            "method" : "public List<Description> sortedLeavesForTest(Request request)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 226, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO Auto-generated catch block", 
            "class" : "public class MaxCore", 
            "method" : "public Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 221, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:14:05 PM): publicized for squeeze", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request, JUnitCore core)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 224, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 11:17:01 PM): V", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 227, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Nov 18, 2008 2:04:09 PM): add a check if building a runner is possible", 
            "class" : "public class MaxCore", 
            "method" : "public Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 225, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Nov 18, 2008 2:18:28 PM): move to Suite", 
            "class" : "public class MaxCore", 
            "method" : "public Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 229, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:50:48 PM): V", 
            "class" : "public class MaxCore", 
            "method" : "public List<Description> findLeaves(Request request)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 223, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:42:05 PM): V", 
            "class" : "public class MaxCore", 
            "method" : "public Request sortRequest(Request request)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cfa", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 241, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cfb", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 152, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 157, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 4.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cfc", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cfd", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", 
    "filehash" : 4093318150, 
    "comments" : [
        {
            "id" : 550, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Nov 18, 2008 2:03:06 PM): flaky?", 
            "class" : "public static class TwoUnEqualTests", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cfe", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 103, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 88, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176cff", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", 
    "filehash" : 206862336, 
    "comments" : [
        {
            "id" : 264, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:57:14 PM): V", 
            "class" : "private final class OldTestClassAdaptingListener implements", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 265, 
            "total_pattern" : 8.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.759, 
            "comment" : "// TODO (Feb 23, 2009 11:25:23 PM): this is doing Max's work for it. Max should get rid of these when sorting i", 
            "class" : "private final class OldTestClassAdaptingListener implements", 
            "method" : "public static Description makeDescription(Test test)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "get rid", 
                    "score" : 2.5, 
                    "class" : "Expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 267, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:57:26 PM): V", 
            "class" : "private final class OldTestClassAdaptingListener implements", 
            "method" : "private void setTest(Test test)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 263, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 11:45:54 PM): Think hard about this.", 
            "class" : "private final class OldTestClassAdaptingListener implements", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d00", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/max/MaxComputerTest.java", 
    "filehash" : 201353845, 
    "comments" : [
        {
            "id" : 547, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Mar 2, 2009 10:59:15 PM): this grows without bound.", 
            "class" : "private static class MaxRunner extends BlockJUnit4ClassRunner", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 546, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Mar 2, 2009 11:21:28 PM): configure somehow", 
            "class" : "private static class MaxComputer extends Computer", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d01", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 215, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 216, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d02", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 83, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d03", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 421, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 418, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d04", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 556, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d05", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 449, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 444, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 440, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 443, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 447, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 445, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d06", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 437, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static Collection&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n* Fibonacci,\n*   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },\n*  6, 8 } } });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test(@HeresHowYouGetValue Type value)\n* assertAnswerKey(new Object[][]\n* Fibonacci,\n*   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },\n*  6, 8 } } });\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 439, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// constructor can, nay, should have args.", 
            "class" : "private class TestClassRunnerForParameters extends", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d07", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 193, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 163, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 4.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 186, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Mar 10, 2009 10:52:18 AM): fix javadoc", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 189, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Nov 6, 2008 12:58:55 PM): Is this a DUP?", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 205, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 194, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 207, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 206, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d08", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 58, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d09", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 364, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0a", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 562, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.959, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0b", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 429, 
            "total_pattern" : 13.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 14.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0c", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Suite.java", 
    "filehash" : 10293233, 
    "comments" : [
        {
            "id" : 459, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Nov 18, 2008 2:19:13 PM): extract", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0d", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 551, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// TODO(parallel) we need to push parallel execution down through suites (i.e. run a Suite with a parallel executioner and you get parallel execution)", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test public void one()", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 552, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0e", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 55, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d0f", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 482, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d10", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 328, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d11", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 545, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d12", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 512, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 511, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 513, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// We have to throw the exception manually, .", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d13", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 17, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 10, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d14", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 329, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d15", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 213, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d16", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 477, 
            "total_pattern" : 15.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 15.64, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d17", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 162, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d18", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/InexactComparisonCriteria.java", 
    "filehash" : 2574524166, 
    "comments" : [
        {
            "id" : 251, 
            "total_pattern" : 13.777, 
            "total_heuristic" : 0.0, 
            "total_score" : 13.777, 
            "comment" : "// TODO: DUP above TODO (Sep 8, 2008 4:32:50 PM): Test that this fails sometimes TODO (Sep 8, 2008 4:33:04 PM): Update javadoc", 
            "class" : "public class InexactComparisonCriteria", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 249, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Sep 8, 2008 4:36:12 PM): check structure", 
            "class" : "public class InexactComparisonCriteria", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d19", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 406, 
            "total_pattern" : 13.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 13.0, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1a", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 248, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1b", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 279, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1c", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 245, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 10.28, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1d", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 387, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1e", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 211, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 208, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 4.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d1f", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 268, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 12.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d20", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 538, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d21", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 405, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 400, 
            "total_pattern" : 12.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 13.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 392, 
            "total_pattern" : 12.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 13.63, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 398, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d22", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<? extends TestCase> getTestConstructor(Class<? extends TestCase> theClass)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private static String exceptionToString(Throwable t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d23", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 339, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d24", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 260, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 12.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d25", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 238, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "// TODO (Feb 23, 2009 10:41:36 PM): V", 
            "class" : "private class TestComparator implements Comparator&lt;Description&gt;", 
            "method" : "public RememberingListener listener()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 232, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.759, 
            "comment" : "//TODO think about what we can do better here", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "private static MaxHistory readHistory(File storedResults)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 231, 
            "total_pattern" : 7.518, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.518, 
            "comment" : "// TODO: rule of three TODO: Really?", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "private static MaxHistory readHistory(File storedResults)", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d26", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 288, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 289, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 302, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 294, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 4.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 290, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 291, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d27", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 355, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 362, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 363, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d28", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 385, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d29", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 333, 
            "total_pattern" : 14.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 14.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2a", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 351, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 352, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 354, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 347, 
            "total_pattern" : 17.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 18.14, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2b", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 557, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2c", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 424, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 422, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2d", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 523, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 11.0, 
            "comment" : "// This test case is obsolete, since the compiler will catch this error in 1.5 public void testNoTestCaseClass() Test t= new TestSuite(NoTestCaseClass.class); t.run(fResult); assertEquals(1, fResult.runCount()); // warning test assertTrue(! fResult.wasSuccessful()); }", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testInheritedTests()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "obsolete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 524, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2e", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 466, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 463, 
            "total_pattern" : 16.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 16.5, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d2f", 
    "reference" : "r4.6", 
    "commit" : "b5e9885854a0d594451800b9127eb50afb645433", 
    "commit_date" : "2009-04-14T02:07:14.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 161, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d30", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 414, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 413, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 417, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 422, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d31", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 265, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 266, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 267, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d32", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d33", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 253, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d34", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d35", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 310, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that are\n* guaranteed to be deleted when the test method finishes (whether it passes or\n* fails):\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 314, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 313, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 316, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder.\n* Usually not called directly, since it is automatically applied\n* by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d36", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 556, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d37", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 560, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d38", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 594, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 595, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 596, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 597, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d39", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 535, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3a", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 602, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3b", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 611, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3c", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 212, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3d", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 228, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 221, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 225, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3e", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 248, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d3f", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 152, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 157, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d40", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d41", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 103, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 88, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d42", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 214, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 213, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d43", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 83, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d44", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 469, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 472, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d45", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 604, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d46", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 497, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 496, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 507, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 500, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 498, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 493, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 502, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d47", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 191, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 163, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 202, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 205, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 203, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 192, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d48", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 491, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static List&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n* Fibonacci,\n*   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },\n*  6, 8 } } });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d49", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 58, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4a", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 409, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4b", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 321, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails\n*\n* @param e\n* @param method*/", 
            "class" : "public class TestWatchman implements MethodRule", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 319, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4c", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 610, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 1.2, 
            "total_score" : 3.08, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4d", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 328, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4e", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 308, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d4f", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 483, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d50", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 600, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d51", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 55, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d52", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 239, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d53", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 536, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d54", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 373, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d55", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 598, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d56", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 566, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 565, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 567, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually, .", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d57", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ComparisonCriteria.java", 
    "filehash" : 132084177, 
    "comments" : [
        {
            "id" : 260, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.88, 
            "comment" : "// TODO (Sep 8, 2008 4:36:12 PM): check structure", 
            "class" : "public abstract class ComparisonCriteria", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d58", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 10, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d59", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 477, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5a", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 374, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5b", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 211, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5c", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 531, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5d", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 162, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5e", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/InexactComparisonCriteria.java", 
    "filehash" : 2574524166, 
    "comments" : [
        {
            "id" : 262, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.88, 
            "comment" : "// TODO (Apr 29, 2009 4:43:46 PM): Look for missing JavaDoc", 
            "class" : "public class InexactComparisonCriteria extends ComparisonCriteria", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d5f", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 258, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d60", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 454, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d61", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 255, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d62", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 286, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d63", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 432, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d64", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 209, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 206, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d65", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 301, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Should be able to remove this suppression in some brave new hamcrest world.", 
            "class" : "public class ExpectedException implements MethodRule", 
            "method" : "public Statement apply(Statement base, FrameworkMethod method, Object target)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 302, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Adds to the list of requirements for any thrown exception that it\n* should be an instance of @code type}*/", 
            "class" : "public class ExpectedException implements MethodRule", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d66", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 275, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d67", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 592, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d68", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 452, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 437, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 449, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code expecting} attribute, return normally only if @code next}\n* throws an exception of the correct type, and throw an exception\n* otherwise.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 440, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 443, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n*\n* @deprecated unused API, will go away in future version*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 447, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the above\n* steps. A @code Rule} may prevent all execution of the above steps, or\n* add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link MethodRule}\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 450, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 451, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @Before}\n* methods on this class and superclasses before running @code next}; if\n* any throws an Exception, stop execution and pass the exception on.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 445, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d69", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<? extends TestCase> getTestConstructor(Class<? extends TestCase> theClass)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private static String exceptionToString(Throwable t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6a", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 384, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6b", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 271, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6c", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 335, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 337, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 348, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 340, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 336, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 334, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6d", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 408, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 400, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 407, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6e", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 231, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d6f", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 430, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d70", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 293, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotates fields that contain rules. Such a field must be public, not\n* static, and a subtype of @link MethodRule}. For more information,\n* see @link MethodRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d71", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 378, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d72", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 399, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 397, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 392, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 10.64, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 396, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d73", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 605, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d74", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 456, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d75", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 473, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 475, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d76", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 577, 
            "total_pattern" : 8.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.5, 
            "comment" : "// This test case is obsolete, since the compiler will catch this error in 1.5 public void testNoTestCaseClass() Test t= new TestSuite(NoTestCaseClass.class); t.run(fResult); assertEquals(1, fResult.runCount()); // warning test assertTrue(! fResult.wasSuccessful()); }", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testInheritedTests()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "obsolete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 578, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d77", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 295, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 296, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 297, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if @code callable}\n* threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 294, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d78", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 520, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 517, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d79", 
    "reference" : "r4.7", 
    "commit" : "a8629da96207e1ce71ead9ba9f85bc324f09bcab", 
    "commit_date" : "2009-07-28T02:16:50.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 161, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7a", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 414, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 413, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 417, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 422, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7b", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 265, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 266, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 267, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7c", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7d", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 255, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7e", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d7f", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 310, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that are\n* guaranteed to be deleted when the test method finishes (whether it passes or\n* fails):\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 314, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 313, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 316, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder.\n* Usually not called directly, since it is automatically applied\n* by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d80", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 556, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d81", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 560, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d82", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 594, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 595, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 596, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 597, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d83", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 535, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d84", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 602, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d85", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 611, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d86", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 212, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d87", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 230, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 227, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 223, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d88", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 250, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d89", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 152, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 157, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8a", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8b", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 103, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 88, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8c", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 214, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 213, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8d", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 83, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8e", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 469, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 472, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d8f", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 604, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d90", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 497, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 496, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 507, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 500, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 498, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 493, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 502, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d91", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 191, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 163, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 202, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 205, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 203, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 192, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double epsilon)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d92", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 491, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static List&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n* Fibonacci,\n*   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },\n*  6, 8 } } });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d93", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 58, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d94", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 409, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d95", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 321, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails\n*\n* @param e\n* @param method*/", 
            "class" : "public class TestWatchman implements MethodRule", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 319, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d96", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 610, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 1.2, 
            "total_score" : 3.08, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d97", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 328, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d98", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 308, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d99", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 483, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9a", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 600, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9b", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 55, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9c", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 241, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9d", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 536, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9e", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 373, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176d9f", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 598, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da0", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 566, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 565, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 567, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually, .", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da1", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 10, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da2", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 477, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da3", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 374, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da4", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 211, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da5", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 531, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da6", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 162, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da7", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 454, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da8", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 260, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176da9", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 286, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176daa", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 257, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dab", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 432, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dac", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 209, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 206, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dad", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 301, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Should be able to remove this suppression in some brave new hamcrest world.", 
            "class" : "public class ExpectedException implements MethodRule", 
            "method" : "public Statement apply(Statement base, FrameworkMethod method, Object target)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 302, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Adds to the list of requirements for any thrown exception that it\n* should be an instance of @code type}*/", 
            "class" : "public class ExpectedException implements MethodRule", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dae", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 275, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176daf", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 592, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db0", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 452, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 437, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 449, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code expecting} attribute, return normally only if @code next}\n* throws an exception of the correct type, and throw an exception\n* otherwise.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 440, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 443, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n*\n* @deprecated unused API, will go away in future version*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 447, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the above\n* steps. A @code Rule} may prevent all execution of the above steps, or\n* add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link MethodRule}\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 450, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 451, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @Before}\n* methods on this class and superclasses before running @code next}; if\n* any throws an Exception, stop execution and pass the exception on.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 445, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db1", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<? extends TestCase> getTestConstructor(Class<? extends TestCase> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private static String exceptionToString(Throwable t)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db2", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 384, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db3", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 271, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db4", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 335, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 337, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 348, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 340, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 336, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 334, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db5", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 408, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 400, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 407, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db6", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 233, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db7", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 430, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db8", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 293, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotates fields that contain rules. Such a field must be public, not\n* static, and a subtype of @link MethodRule}. For more information,\n* see @link MethodRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176db9", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 378, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dba", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 399, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 397, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 392, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 10.64, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 396, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dbb", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 605, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dbc", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 456, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dbd", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 473, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 475, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dbe", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 577, 
            "total_pattern" : 8.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.5, 
            "comment" : "// This test case is obsolete, since the compiler will catch this error in 1.5 public void testNoTestCaseClass() Test t= new TestSuite(NoTestCaseClass.class); t.run(fResult); assertEquals(1, fResult.runCount()); // warning test assertTrue(! fResult.wasSuccessful()); }", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testInheritedTests()", 
            "patterns" : [
                {
                    "name" : "obsolete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 578, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dbf", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 295, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 296, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 297, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if @code callable}\n* threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 294, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc0", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 520, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 517, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc1", 
    "reference" : "r4.8", 
    "commit" : "5a3a326096cf65a58272ee89a5ef1c164cfd9d33", 
    "commit_date" : "2009-12-01T04:08:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 161, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc2", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 439, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 434, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 430, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 431, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc3", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 270, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 269, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 271, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc4", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc5", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc6", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 259, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc7", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 325, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder.\n* Usually not called directly, since it is automatically applied\n* by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 319, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that are\n* guaranteed to be deleted when the test method finishes (whether it passes or\n* fails):\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 323, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 322, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc8", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 583, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dc9", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 587, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dca", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ClassRule.java", 
    "filehash" : 2048863491, 
    "comments" : [
        {
            "id" : 213, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Annotates static fields that contain rules. Such a field must be public,\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link BeforeClass} methods,\n* then the entire body of the test class (all contained methods, if it is\n* a standard JUnit test class, or all contained classes, if it is a\n* @link org.junit.runners.Suite}, and finally any @link AfterClass} methods.\n*\n* The statement passed to the @link org.junit.rules.TestRule} will never throw an exception,\n* and throwing an exception from the @link org.junit.rules.TestRule} will result in undefined\n* behavior. This means that some @link org.junit.rules.TestRule}s, such as\n* @link org.junit.rules.ErrorCollector},\n* @link org.junit.rules.ExpectedException},\n* and @link org.junit.rules.Timeout},\n* have undefined behavior when used as @link ClassRule}s.\n*\n* If there are multiple\n* annotated @link ClassRule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test suite that connects to a server once before\n* all the test classes run, and disconnects after they are finished:\n*\n* <pre>\n*\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource resource= new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* };\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* };\n* };\n* }\n* </pre>\n*\n* For more information and more examples, see @link org.junit.rules.TestRule}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dcb", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 624, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 626, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 627, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 625, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dcc", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 562, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dcd", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 636, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dce", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 647, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dcf", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 212, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd0", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 230, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 233, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 226, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd1", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 254, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd2", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 152, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 157, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd3", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd4", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestRule.java", 
    "filehash" : 3520460052, 
    "comments" : [
        {
            "id" : 328, 
            "total_pattern" : 19.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 20.78, 
            "comment" : "/**\n* A TestRule is an alteration in how a test method, or set of test methods,\n* is run and reported. A @link TestRule} may add additional checks that cause\n* a test that would otherwise fail to pass, or it may perform necessary setup or\n* cleanup for tests, or it may observe test execution to report it elsewhere.\n* @link TestRule}s can do everything that could be done previously with\n* methods annotated with @link org.junit.Before},\n* @link org.junit.After}, @link org.junit.BeforeClass}, or\n* @link org.junit.AfterClass}, but they are more powerful, and more easily\n* shared\n* between projects and classes.\n*\n* The default JUnit test runners for suites and\n* individual test cases recognize @link TestRule}s introduced in two different\n* ways. @link org.junit.Rule} annotates method-level\n* @link TestRule}s, and @link org.junit.ClassRule}\n* annotates class-level @link TestRule}s. See Javadoc for those annotations\n* for more information.\n*\n* Multiple @link TestRule}s can be applied to a test or suite execution. The\n* @link Statement} that executes the method or suite is passed to each annotated\n* @link org.junit.Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link org.junit.Rule}, if any. For\n* examples of how this can be useful, see these provided TestRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatcher}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd5", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 103, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 88, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd6", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 214, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 215, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd7", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 489, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 492, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd8", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 83, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dd9", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 638, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dda", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 526, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 524, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "private void validateClassRules(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 534, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 520, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 521, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 517, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods,\n* handle annotated @link ClassRule}s, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 522, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ddb", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatcher.java", 
    "filehash" : 4088168215, 
    "comments" : [
        {
            "id" : 330, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatcher is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatcher()\n* &amp;#064;Override\n* protected void failed(Description d)\n* watchedLog+= d + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* protected void succeeded(Description d)\n* watchedLog+= d + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 332, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test fails\n*\n* @param e\n* @param description*/", 
            "class" : "public abstract class TestWatcher implements TestRule", 
            "method" : "protected void succeeded(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ddc", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 191, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 163, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 202, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 205, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 203, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 192, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ddd", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 515, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static List&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n*   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },\n*  6, 8 } } });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dde", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 58, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ddf", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 426, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de0", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 335, 
            "total_pattern" : 10.75, 
            "total_heuristic" : 1.13, 
            "total_score" : 11.88, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @deprecated @link MethodRule} is deprecated.\n* Use @link TestWatcher} implements @link TestRule} instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "link", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun architecture", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 337, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails\n*\n* @param e\n* @param method*/", 
            "class" : "@Deprecated", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de1", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 646, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 1.2, 
            "total_score" : 3.08, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de2", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 344, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de3", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 316, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de4", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 507, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de5", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 632, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de6", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 55, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de7", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 244, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de8", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 563, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176de9", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 389, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dea", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 630, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176deb", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 594, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 595, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 596, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 593, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 597, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 598, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 592, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dec", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 10, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ded", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 501, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dee", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 391, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176def", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 211, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df0", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 558, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df1", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 162, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df2", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 264, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df3", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 473, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df4", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 261, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df5", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 294, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df6", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 449, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df7", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 209, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 206, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df8", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 310, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Adds to the list of requirements for any thrown exception that it\n* should be an instance of @code type}*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 309, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Should be able to remove this suppression in some brave new hamcrest world.", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176df9", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 279, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dfa", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 622, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dfb", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 466, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code expecting} attribute, return normally only if @code next}\n* throws an exception of the correct type, and throw an exception\n* otherwise.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 468, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @Before}\n* methods on this class and superclasses before running @code next}; if\n* any throws an Exception, stop execution and pass the exception on.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 462, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 470, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* @param target\n* the test case instance\n* @return a list of MethodRules that should be applied when executing this\n* test\n* @deprecated @link org.junit.rules.MethodRule} is a deprecated interface. Port to\n* @link TestRule} and\n* @link BlockJUnit4ClassRunner#getTestRules(Object)}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 454, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 457, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 464, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the\n* above steps. A @code Rule} may prevent all execution of the above steps,\n* or add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link TestRule}\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 460, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n*\n* @deprecated unused API, will go away in future version*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 467, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 469, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dfc", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<?> getTestConstructor(Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private void addTestsFromTestCase(final Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dfd", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 401, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dfe", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 275, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176dff", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 424, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 417, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 425, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e00", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 353, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 356, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 351, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 352, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 350, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 364, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e01", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 236, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e02", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 447, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e03", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 301, 
            "total_pattern" : 18.25, 
            "total_heuristic" : 1.13, 
            "total_score" : 19.38, 
            "comment" : "/**\n* Annotates fields that contain rules. Such a field must be public, not\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link Before} methods,\n* then the @link Test} method, and finally any @link After} methods,\n* throwing an exception if any of these fail. If there are multiple\n* annotated @link Rule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test class that creates a temporary folder before\n* each test method, and deletes it after each:\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n*\n* For more information and more examples, see\n* @link org.junit.rules.TestRule}.\n*\n* Note: for backwards compatibility, this annotation may also mark\n* fields of type @link org.junit.rules.MethodRule}, which will be honored. However,\n* this is a deprecated interface and feature.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e04", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 395, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e05", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 414, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 413, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 416, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 409, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 10.64, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e06", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 639, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e07", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 475, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e08", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/Categories.java", 
    "filehash" : 1709308397, 
    "comments" : [
        {
            "id" : 221, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// the way filters are implemented makes this unnecessarily complicated, buggy, and difficult to specify. A new way of handling filters could someday enable a better new implementation.", 
            "class" : "public class Categories extends Suite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "unnecessarily complicated", 
                    "score" : 3.0, 
                    "class" : "Adv + Adj", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 220, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* From a given set of test classes, runs only the classes and methods that are\n* annotated with either the category given with the @IncludeCategory\n* annotation, or a subtype of that category.\n*\n* Note that, for now, annotating suites with @code @Category} has no effect.\n* Categories must be annotated on the direct method or class.\n*\n* Example:\n*\n* <pre>\n* public interface FastTests\n* }\n*\n* public interface SlowTests\n* }\n*\n* public static class A\n* &amp;#064;Test\n* public void a()\n* fail();\n* }\n*\n* &amp;#064;Category(SlowTests.class)\n* &amp;#064;Test\n* public void b()\n* }\n* }\n*\n* &amp;#064;Category(  SlowTests.class, FastTests.class })\n* public static class B\n* &amp;#064;Test\n* public void c()\n*\n* }\n* }\n*\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(SlowTests.class)\n* &amp;#064;SuiteClasses(  A.class, B.class })\n* // Note that Categories is a kind of Suite\n* public static class SlowTestSuite\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e09", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 497, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 499, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0a", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 304, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 303, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 305, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if @code callable}\n* threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 302, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0b", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 608, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0c", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 547, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 544, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0d", 
    "reference" : "r4.9", 
    "commit" : "61f06547599bb6b98bca99d5bc457eb20bc17cab", 
    "commit_date" : "2011-08-22T18:20:52.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 161, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0e", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 437, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 438, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 446, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 441, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e0f", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 270, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 269, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 271, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e10", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e11", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e12", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 259, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e13", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 330, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with a random name under the temporary\n* folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFolder(String... folderNames)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 324, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that are\n* guaranteed to be deleted when the test method finishes (whether it passes or\n* fails):\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 332, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder.\n* Usually not called directly, since it is automatically applied\n* by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 329, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 327, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 328, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with a random name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e14", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 591, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e15", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 595, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e16", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ClassRule.java", 
    "filehash" : 2048863491, 
    "comments" : [
        {
            "id" : 213, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Annotates static fields that contain rules. Such a field must be public,\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link BeforeClass} methods,\n* then the entire body of the test class (all contained methods, if it is\n* a standard JUnit test class, or all contained classes, if it is a\n* @link org.junit.runners.Suite}, and finally any @link AfterClass} methods.\n*\n* The statement passed to the @link org.junit.rules.TestRule} will never throw an exception,\n* and throwing an exception from the @link org.junit.rules.TestRule} will result in undefined\n* behavior. This means that some @link org.junit.rules.TestRule}s, such as\n* @link org.junit.rules.ErrorCollector},\n* @link org.junit.rules.ExpectedException},\n* and @link org.junit.rules.Timeout},\n* have undefined behavior when used as @link ClassRule}s.\n*\n* If there are multiple\n* annotated @link ClassRule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test suite that connects to a server once before\n* all the test classes run, and disconnects after they are finished:\n*\n* <pre>\n*\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource resource= new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* };\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* };\n* };\n* }\n* </pre>\n*\n* For more information and more examples, see @link org.junit.rules.TestRule}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e17", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 633, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 635, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 632, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 634, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e18", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 570, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e19", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 644, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1a", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 659, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1b", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 212, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1c", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 230, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 233, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 226, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1d", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 254, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1e", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 152, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 157, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e1f", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e20", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestRule.java", 
    "filehash" : 3520460052, 
    "comments" : [
        {
            "id" : 335, 
            "total_pattern" : 19.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 20.78, 
            "comment" : "/**\n* A TestRule is an alteration in how a test method, or set of test methods,\n* is run and reported. A @link TestRule} may add additional checks that cause\n* a test that would otherwise fail to pass, or it may perform necessary setup or\n* cleanup for tests, or it may observe test execution to report it elsewhere.\n* @link TestRule}s can do everything that could be done previously with\n* methods annotated with @link org.junit.Before},\n* @link org.junit.After}, @link org.junit.BeforeClass}, or\n* @link org.junit.AfterClass}, but they are more powerful, and more easily\n* shared\n* between projects and classes.\n*\n* The default JUnit test runners for suites and\n* individual test cases recognize @link TestRule}s introduced in two different\n* ways. @link org.junit.Rule} annotates method-level\n* @link TestRule}s, and @link org.junit.ClassRule}\n* annotates class-level @link TestRule}s. See Javadoc for those annotations\n* for more information.\n*\n* Multiple @link TestRule}s can be applied to a test or suite execution. The\n* @link Statement} that executes the method or suite is passed to each annotated\n* @link org.junit.Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link org.junit.Rule}, if any. For\n* examples of how this can be useful, see these provided TestRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatcher}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e21", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 103, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 88, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e22", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 214, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 215, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e23", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 496, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 499, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e24", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 83, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e25", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 646, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e26", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 524, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods,\n* handle annotated @link ClassRule}s, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 533, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 542, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 531, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "private void validateClassRules(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 529, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 528, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 527, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e27", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatcher.java", 
    "filehash" : 4088168215, 
    "comments" : [
        {
            "id" : 339, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test fails\n*\n* @param e\n* @param description*/", 
            "class" : "public abstract class TestWatcher implements TestRule", 
            "method" : "protected void succeeded(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 337, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatcher is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatcher()\n* &amp;#064;Override\n* protected void failed(Description d)\n* watchedLog+= d + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* protected void succeeded(Description d)\n* watchedLog+= d + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e28", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 191, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 163, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 202, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 205, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 203, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 192, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e29", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 522, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static List&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n*  0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },  6, 8 }\n* });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2a", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 58, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2b", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 433, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2c", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkMethod.java", 
    "filehash" : 321338782, 
    "comments" : [
        {
            "id" : 494, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns true iff this is a no-arg method that returns a value assignable\n* to @code type}\n*\n* @deprecated This is used only by the Theories runner, and does not\n* use all the generic type info that it ought to. It will be replaced\n* with a forthcoming ParameterSignature#canAcceptResultOf(FrameworkMethod)\n* once Theories moves to junit-contrib.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be replaced", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2d", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 342, 
            "total_pattern" : 10.75, 
            "total_heuristic" : 1.13, 
            "total_score" : 11.88, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @deprecated @link MethodRule} is deprecated.\n* Use @link TestWatcher} implements @link TestRule} instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "link", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun architecture", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 344, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails\n*\n* @param e\n* @param method*/", 
            "class" : "@Deprecated", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2e", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 658, 
            "total_pattern" : 1.88, 
            "total_heuristic" : 1.2, 
            "total_score" : 3.08, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e2f", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 351, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e30", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 317, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e31", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 514, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e32", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 640, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e33", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 55, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e34", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 244, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e35", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 571, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e36", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 396, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e37", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 638, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e38", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 601, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 606, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 600, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 603, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 605, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 604, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 602, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e39", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 10, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3a", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 508, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3b", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 398, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3c", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 211, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3d", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 566, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3e", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 162, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e3f", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 264, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e40", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 480, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e41", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 261, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e42", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 294, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e43", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 456, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e44", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 209, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 206, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e45", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 310, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Should be able to remove this suppression in some brave new hamcrest world.", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 311, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Adds to the list of requirements for any thrown exception that it\n* should be an instance of @code type}*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e46", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 630, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e47", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 279, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e48", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 471, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the\n* above steps. A @code Rule} may prevent all execution of the above steps,\n* or add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link TestRule}\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 473, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code expecting} attribute, return normally only if @code next}\n* throws an exception of the correct type, and throw an exception\n* otherwise.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 474, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 475, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @Before}\n* methods on this class and superclasses before running @code next}; if\n* any throws an Exception, stop execution and pass the exception on.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 461, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 464, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateNoNonStaticInnerClass(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 477, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.13, 
            "comment" : "/**\n* @param target\n* the test case instance\n* @return a list of MethodRules that should be applied when executing this\n* test\n* @deprecated @link org.junit.rules.MethodRule} is a deprecated interface. Port to\n* @link TestRule} and\n* @link BlockJUnit4ClassRunner#getTestRules(Object)}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 467, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n*\n* @deprecated unused API, will go away in future version*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 469, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 476, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e49", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<?> getTestConstructor(Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private void addTestsFromTestCase(final Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4a", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 408, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4b", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 275, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4c", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 359, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 357, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 358, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 363, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 371, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 360, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4d", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 424, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 432, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 431, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4e", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 236, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e4f", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 454, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e50", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 301, 
            "total_pattern" : 18.25, 
            "total_heuristic" : 1.13, 
            "total_score" : 19.38, 
            "comment" : "/**\n* Annotates fields that contain rules. Such a field must be public, not\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link Before} methods,\n* then the @link Test} method, and finally any @link After} methods,\n* throwing an exception if any of these fail. If there are multiple\n* annotated @link Rule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test class that creates a temporary folder before\n* each test method, and deletes it after each:\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n*\n* For more information and more examples, see\n* @link org.junit.rules.TestRule}.\n*\n* Note: for backwards compatibility, this annotation may also mark\n* fields of type @link org.junit.rules.MethodRule}, which will be honored. However,\n* this is a deprecated interface and feature.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e51", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 402, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e52", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 421, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 416, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 10.64, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 423, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 420, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e53", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 651, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e54", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 482, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e55", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/Categories.java", 
    "filehash" : 1709308397, 
    "comments" : [
        {
            "id" : 221, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// the way filters are implemented makes this unnecessarily complicated, buggy, and difficult to specify. A new way of handling filters could someday enable a better new implementation.", 
            "class" : "public class Categories extends Suite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "unnecessarily complicated", 
                    "score" : 3.0, 
                    "class" : "Adv + Adj", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 220, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* From a given set of test classes, runs only the classes and methods that are\n* annotated with either the category given with the @IncludeCategory\n* annotation, or a subtype of that category.\n*\n* Note that, for now, annotating suites with @code @Category} has no effect.\n* Categories must be annotated on the direct method or class.\n*\n* Example:\n*\n* <pre>\n* public interface FastTests\n* }\n*\n* public interface SlowTests\n* }\n*\n* public static class A\n* &amp;#064;Test\n* public void a()\n* fail();\n* }\n*\n* &amp;#064;Category(SlowTests.class)\n* &amp;#064;Test\n* public void b()\n* }\n* }\n*\n* &amp;#064;Category(  SlowTests.class, FastTests.class })\n* public static class B\n* &amp;#064;Test\n* public void c()\n*\n* }\n* }\n*\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(SlowTests.class)\n* &amp;#064;SuiteClasses(  A.class, B.class })\n* // Note that Categories is a kind of Suite\n* public static class SlowTestSuite\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e56", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 504, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 506, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e57", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 304, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 303, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 305, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure with the given @code reason}\n* to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public <T> void checkThat(final T value, final Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 302, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 306, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if\n* @code callable} threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e58", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 616, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e59", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 555, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 552, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5a", 
    "reference" : "r4.10", 
    "commit" : "45a44647e7306262162e1346b750c3209019f2e1", 
    "commit_date" : "2011-09-29T18:18:35.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 161, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5b", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 875, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 876, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 879, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Not used within JUnit. Clients should simply instantiate ErrorReportingRunner themselves*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "not used", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "unnecessary or not used code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 884, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n*\n* For example, here is code to run a test suite in alphabetical order:\n*\n* <pre>\nprivate static Comparator<Description> forward()\nreturn new Comparator<Description>()\npublic int compare(Description o1, Description o2)\nreturn o1.getDisplayName().compareTo(o2.getDisplayName());\n}\n};\n}\n\npublic static main()\nnew JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n}\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5c", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5d", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 553, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 554, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 8.4, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }, 
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 555, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "public abstract class TypeSafeMatcher&lt;T&gt; extends BaseMatcher&lt;T&gt;", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5e", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e5f", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 506, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 7.26, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e60", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 651, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that are\n* guaranteed to be deleted when the test method finishes (whether it passes or\n* fails):\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 654, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 655, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Returns a new fresh file with a random name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 656, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 657, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Returns a new fresh folder with a random name under the temporary\n* folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFolder(String... folderNames)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 659, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder.\n* Usually not called directly, since it is automatically applied\n* by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e61", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 1179, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e62", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 1196, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.48, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e63", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ClassRule.java", 
    "filehash" : 2048863491, 
    "comments" : [
        {
            "id" : 375, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Annotates static fields that contain rules. Such a field must be public,\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link BeforeClass} methods,\n* then the entire body of the test class (all contained methods, if it is\n* a standard JUnit test class, or all contained classes, if it is a\n* @link org.junit.runners.Suite}, and finally any @link AfterClass} methods.\n*\n* The statement passed to the @link org.junit.rules.TestRule} will never throw an exception,\n* and throwing an exception from the @link org.junit.rules.TestRule} will result in undefined\n* behavior. This means that some @link org.junit.rules.TestRule}s, such as\n* @link org.junit.rules.ErrorCollector},\n* @link org.junit.rules.ExpectedException},\n* and @link org.junit.rules.Timeout},\n* have undefined behavior when used as @link ClassRule}s.\n*\n* If there are multiple\n* annotated @link ClassRule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test suite that connects to a server once before\n* all the test classes run, and disconnects after they are finished:\n*\n* <pre>\n*\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource resource= new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* };\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* };\n* };\n* }\n* </pre>\n*\n* For more information and more examples, see @link org.junit.rules.TestRule}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e64", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 1133, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }, 
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e65", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 1300, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1301, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 1302, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1303, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "@Test public void equals()", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e66", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 1336, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "@AfterClass public static void calledTwice()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e67", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 374, 
            "total_pattern" : 19.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 19.0, 
            "comment" : "/**\n* <p>Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those the current class.</p>\n*\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n* @see org.junit.AfterClass*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e68", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 1371, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e69", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 449, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 453, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 456, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6a", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 491, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants.\n*\n* So, for example:\n* <pre>\n* /@RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* }\n* </pre>\n*\n* For a real example, @see org.junit.tests.manipulation.SortableTest.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6b", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 119, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n*\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6c", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 278, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n*\n* <p>TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.</p>\n*\n* <p> When the wait command line argument is given TestRunner\n* waits until the users types RETURN.</p>\n*\n* <p>TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.</p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 283, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.28, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6d", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestRule.java", 
    "filehash" : 3520460052, 
    "comments" : [
        {
            "id" : 667, 
            "total_pattern" : 39.0, 
            "total_heuristic" : 2.56, 
            "total_score" : 41.56, 
            "comment" : "/**\n* A TestRule is an alteration in how a test method, or set of test methods,\n* is run and reported. A @link TestRule} may add additional checks that cause\n* a test that would otherwise fail to pass, or it may perform necessary setup or\n* cleanup for tests, or it may observe test execution to report it elsewhere.\n* @link TestRule}s can do everything that could be done previously with\n* methods annotated with @link org.junit.Before},\n* @link org.junit.After}, @link org.junit.BeforeClass}, or\n* @link org.junit.AfterClass}, but they are more powerful, and more easily\n* shared\n* between projects and classes.\n*\n* The default JUnit test runners for suites and\n* individual test cases recognize @link TestRule}s introduced in two different\n* ways. @link org.junit.Rule} annotates method-level\n* @link TestRule}s, and @link org.junit.ClassRule}\n* annotates class-level @link TestRule}s. See Javadoc for those annotations\n* for more information.\n*\n* Multiple @link TestRule}s can be applied to a test or suite execution. The\n* @link Statement} that executes the method or suite is passed to each annotated\n* @link org.junit.Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link org.junit.Rule}, if any. For\n* examples of how this can be useful, see these provided TestRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatcher}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6e", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 146, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 147, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 162, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult extends Object", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e6f", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 376, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails. Create and throw\n* a <code>ComparisonFailure</code> manually if you want to show users the difference between two complex\n* strings.\n*\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 377, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* The maximum length for fExpected and fActual. If it is exceeded, the strings should be shortened.\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e70", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 142, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e71", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 989, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 992, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e72", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 1338, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e73", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 1066, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods,\n* handle annotated @link ClassRule}s, create a composite\n* @link Description}, and run children sequentially.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 1069, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1070, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1071, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1073, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class. Override to add pre-/post-processing.\n* Here is an outline of the implementation:\n* <ul>\n* <li>Call @link #runChild(Object, RunNotifier)} on each object returned by @link #getChildren()} (subject to any imposed filter and sort).</li>\n* <li>ALWAYS run all non-overridden @code @BeforeClass} methods on this class\n* and superclasses before the previous step; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before any of the previous steps; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.\n* </ul>\n* @param notifier\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "private void validateClassRules(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1075, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1084, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e74", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 325, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.28, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:<br/>\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 330, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 343, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertArrayEquals(int[] expecteds, int[] actuals)", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 344, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 4.52, 
            "total_score" : 10.52, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds\n* long array with expected values.\n* @param actuals\n* long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 353, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 354, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 364, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message\n* the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 365, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds\n* Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals\n* Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 366, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 367, 
            "total_pattern" : 14.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 14.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* :\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* @param reason\n* additional information about the error\n* @param <T>\n* the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual\n* the computed value being compared\n* @param matcher\n* an expression, built of @link Matcher}s, specifying allowed\n* values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e75", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatcher.java", 
    "filehash" : 4088168215, 
    "comments" : [
        {
            "id" : 676, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.5, 
            "comment" : "/**\n* TestWatcher is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatcher()\n* &amp;#064;Override\n* protected void failed(Description d)\n* watchedLog+= d + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* protected void succeeded(Description d)\n* watchedLog+= d + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 678, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Invoked when a test fails\n*\n* @param e\n* @param description*/", 
            "class" : "public abstract class TestWatcher implements TestRule", 
            "method" : "protected void succeeded(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e76", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 1045, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* </p>\n*\n* For example, to test a Fibonacci function, write:\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static List&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]\n*  0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },  5, 5 },  6, 8 }\n* });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n*\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e77", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 110, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 111, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e78", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 863, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e79", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 685, 
            "total_pattern" : 21.5, 
            "total_heuristic" : 2.26, 
            "total_score" : 23.76, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @deprecated @link MethodRule} is deprecated.\n* Use @link TestWatcher} implements @link TestRule} instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "link", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun architecture", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "link", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun architecture", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 687, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Invoked when a test method fails\n*\n* @param e\n* @param method*/", 
            "class" : "@Deprecated", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7a", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkMethod.java", 
    "filehash" : 321338782, 
    "comments" : [
        {
            "id" : 981, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 11.0, 
            "comment" : "/**\n* Returns true iff this is a no-arg method that returns a value assignable\n* to @code type}\n*\n* @deprecated This is used only by the Theories runner, and does not\n* use all the generic type info that it ought to. It will be replaced\n* with a forthcoming ParameterSignature#canAcceptResultOf(FrameworkMethod)\n* once Theories moves to junit-contrib.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be replaced", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will be replaced", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7b", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/CommandLineTest.java", 
    "filehash" : 3347070920, 
    "comments" : [
        {
            "id" : 1369, 
            "total_pattern" : 3.759, 
            "total_heuristic" : 2.4, 
            "total_score" : 6.159, 
            "comment" : "// todo create a TestSystem instead", 
            "class" : "static public class Example", 
            "method" : "@Test public void runATest()", 
            "patterns" : [
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "todo", 
                    "score" : 1.88, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "TAG+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7c", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 701, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7d", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 628, 
            "total_pattern" : 24.0, 
            "total_heuristic" : 2.56, 
            "total_score" : 26.56, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7e", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 1033, 
            "total_pattern" : 15.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 17.26, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code klass}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e7f", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", 
    "filehash" : 3784654530, 
    "comments" : [
        {
            "id" : 1316, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "// Overhead could be less than half a millisecond", 
            "class" : "@RunWith(Suite.class)", 
            "method" : "@Test(timeout=1500)", 
            "patterns" : [
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e80", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 106, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e81", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 479, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e82", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 1135, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e83", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 778, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e84", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 1308, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/*\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e85", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 1217, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1218, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1219, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1220, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1221, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1222, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1223, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e86", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 19, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 25, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 26, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "public class Assert", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e87", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 1002, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 11.0, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e88", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 782, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e89", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 373, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* <p>When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class.\n* No other ordering is defined.\n* </p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8a", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 1121, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 12.28, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8b", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 306, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* <p>If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8c", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 532, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8d", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 946, 
            "total_pattern" : 13.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 13.0, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8e", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 529, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 2.56, 
            "total_score" : 11.56, 
            "comment" : "/**\n* <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.</p>\n*\n* For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:<br/>\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:<br/>\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e8f", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 598, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* @param elementMatchers\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "public static <T> org.hamcrest.Matcher<java.lang.Iterable<T>> hasItems(T... elements)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e90", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 902, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n* <p/>\n* The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e91", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 368, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.28, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information.\n* The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently.\n*\n* For example:\n* <pre>\n* // only provides information if database is reachable.\n* /@Test public void calculateTotalSalary()\n* DBConnection dbc = Database.connect();\n* assumeNotNull(dbc);\n* // ...\n* }\n* </pre>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 371, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n*\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e92", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 621, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Should be able to remove this suppression in some brave new hamcrest world.", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 622, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Adds to the list of requirements for any thrown exception that it\n* should be an instance of @code type}*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "@SuppressWarnings(\"unchecked\")", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e93", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", 
    "filehash" : 1284031345, 
    "comments" : [
        {
            "id" : 566, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.\n*\n* This may disappear as soon as 1 April 2009*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e94", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 1296, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e95", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 927, 
            "total_pattern" : 14.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 16.26, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n*\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 930, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateNoNonStaticInnerClass(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 933, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 11.0, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n*\n* @deprecated unused API, will go away in future version*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 935, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 937, 
            "total_pattern" : 15.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 16.28, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the\n* above steps. A @code Rule} may prevent all execution of the above steps,\n* or add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link TestRule}\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 939, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code expecting} attribute, return normally only if @code next}\n* throws an exception of the correct type, and throw an exception\n* otherwise.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 940, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 941, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @Before}\n* methods on this class and superclasses before running @code next}; if\n* any throws an Exception, stop execution and pass the exception on.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 942, 
            "total_pattern" : 18.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 18.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n*\n* @deprecated Will be private soon: use Rules instead*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 943, 
            "total_pattern" : 14.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 16.26, 
            "comment" : "/**\n* @param target\n* the test case instance\n* @return a list of MethodRules that should be applied when executing this\n* test\n* @deprecated @link org.junit.rules.MethodRule} is a deprecated interface. Port to\n* @link TestRule} and\n* @link BlockJUnit4ClassRunner#getTestRules(Object)}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e96", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 192, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 2.26, 
            "total_score" : 5.26, 
            "comment" : "/**\n* <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* </p>\n*\n* <p>Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* </p>\n*\n* <p>This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.</p>\n*\n* <p>A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n* </p>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 195, 
            "total_pattern" : 11.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 11.0, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<?> getTestConstructor(Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 200, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private void addTestsFromTestCase(final Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e97", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 561, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e98", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 815, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e99", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 462, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9a", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 721, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* <p>A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).</p>\n*\n* <p><code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.</p>\n*\n* <p>In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.</p>\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 722, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n* @param name the name of the <code>Description</code>\n* @param annotations\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 723, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 724, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 727, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.28, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 735, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 6.28, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9b", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 852, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 859, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 860, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9c", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 899, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "private class Listener extends RunListener", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9d", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 611, 
            "total_pattern" : 36.5, 
            "total_heuristic" : 2.26, 
            "total_score" : 38.76, 
            "comment" : "/**\n* Annotates fields that contain rules. Such a field must be public, not\n* static, and a subtype of @link org.junit.rules.TestRule}.\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link Before} methods,\n* then the @link Test} method, and finally any @link After} methods,\n* throwing an exception if any of these fail. If there are multiple\n* annotated @link Rule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general.\n*\n* For example, here is a test class that creates a temporary folder before\n* each test method, and deletes it after each:\n*\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n*\n* For more information and more examples, see\n* @link org.junit.rules.TestRule}.\n*\n* Note: for backwards compatibility, this annotation may also mark\n* fields of type @link org.junit.rules.MethodRule}, which will be honored. However,\n* this is a deprecated interface and feature.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "interface", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }, 
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9e", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 786, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 11.28, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176e9f", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 823, 
            "total_pattern" : 20.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 21.28, 
            "comment" : "/**\n* <p>If you need to respond to the events during a test run, extend <code>RunListener</code>\n* and override the appropriate methods. If a listener throws an exception while processing a\n* test event, it will be removed for the remainder of the test run.</p>\n*\n* <p>For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* </p>\n* @see org.junit.runner.JUnitCore*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 827, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 828, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Called when an atomic test fails.\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 830, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea0", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 1348, 
            "total_pattern" : 5.2, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.2, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "@org.junit.Test public void ensureTestIsRun()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea1", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 960, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 2.4, 
            "total_score" : 2.4, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea2", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/Categories.java", 
    "filehash" : 1709308397, 
    "comments" : [
        {
            "id" : 382, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* From a given set of test classes, runs only the classes and methods that are\n* annotated with either the category given with the @IncludeCategory\n* annotation, or a subtype of that category.\n*\n* Note that, for now, annotating suites with @code @Category} has no effect.\n* Categories must be annotated on the direct method or class.\n*\n* Example:\n*\n* <pre>\n* public interface FastTests\n* }\n*\n* public interface SlowTests\n* }\n*\n* public static class A\n* &amp;#064;Test\n* public void a()\n* fail();\n* }\n*\n* &amp;#064;Category(SlowTests.class)\n* &amp;#064;Test\n* public void b()\n* }\n* }\n*\n* &amp;#064;Category(  SlowTests.class, FastTests.class })\n* public static class B\n* &amp;#064;Test\n* public void c()\n*\n* }\n* }\n*\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(SlowTests.class)\n* &amp;#064;SuiteClasses(  A.class, B.class })\n* // Note that Categories is a kind of Suite\n* public static class SlowTestSuite\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 383, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// the way filters are implemented makes this unnecessarily complicated, buggy, and difficult to specify. A new way of handling filters could someday enable a better new implementation.", 
            "class" : "public class Categories extends Suite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "unnecessarily complicated", 
                    "score" : 3.0, 
                    "class" : "Adv + Adj", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "unnecessarily complicated", 
                    "score" : 3.0, 
                    "class" : "Adv + Adj", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea3", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 998, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1000, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea4", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 612, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 613, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 614, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 615, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds a failure with the given @code reason}\n* to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public <T> void checkThat(final T value, final Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 616, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if\n* @code callable} threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea5", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 1261, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea6", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 1102, 
            "total_pattern" : 24.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 24.0, 
            "comment" : "/**\n* <p>The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.</p>\n*\n* <p>A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* </p>\n*\n* <p>The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre></p>\n*\n* <p>The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre></p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 1105, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it* takes longer than that number of milliseconds.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea7", 
    "reference" : "r4.11", 
    "commit" : "c2e4d911fadfbd64444fb285342a8f1b72336169", 
    "commit_date" : "2012-11-13T20:10:09.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 304, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* <p>If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class.</p>\n*\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 453, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that should\n* be deleted when the test method finishes (whether it passes or\n* fails). Whether the deletion is successful or not is not checked by this rule.\n* No exception will be thrown in case the deletion fails.\n*\n* <p>Example of usage:\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 456, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 457, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with a random name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 458, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name under the temporary\n* folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFile()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 459, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given name(s) under the temporary\n* folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File newFolder(String folder)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 461, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with a random name under the temporary folder.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "private boolean isLastElementInArray(int index, String[] array)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 463, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder. Usually not\n* called directly, since it is automatically applied by the @link Rule}*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ea9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 800, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eaa", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 804, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eab", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/DataPoint.java", 
    "filehash" : 1158314685, 
    "comments" : [
        {
            "id" : 304, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 6.2, 
            "comment" : "/**\n* Annotating an field or method with &amp;#064;DataPoint will cause the field value\n* or the value returned by the method to be used as a potential parameter for\n* theories in that class, when run with the\n* @link org.junit.experimental.theories.Theories Theories} runner.\n* <p>\n* A DataPoint is only considered as a potential value for parameters for\n* which its type is assignable. When multiple @code DataPoint}s exist\n* with overlapping types more control can be obtained by naming each DataPoint\n* using the value of this annotation, e.g. with\n* <code>&amp;#064;DataPoint(\"dataset1\", \"dataset2\"})</code>, and then specifying\n* which named set to consider as potential values for each parameter using the\n* @link org.junit.experimental.theories.FromDataPoints &amp;#064;FromDataPoints}\n* annotation.\n* <p>\n* Parameters with no specified source (i.e. without &amp;#064;FromDataPoints or\n* other @link org.junit.experimental.theories.ParametersSuppliedBy\n* &amp;#064;ParameterSuppliedBy} annotations) will use all @code DataPoint}s that are\n* assignable to the parameter type as potential values, including named sets of\n* @code DataPoint}s.\n*\n* <pre>\n* &amp;#064;DataPoint\n* public static String dataPoint = \"value\";\n*\n* &amp;#064;DataPoint(\"generated\")\n* public static String generatedDataPoint()\n* return \"generated value\";\n* }\n*\n* &amp;#064;Theory\n* public void theoryMethod(String param)\n* ...\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theories\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.FromDataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eac", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ClassRule.java", 
    "filehash" : 2048863491, 
    "comments" : [
        {
            "id" : 240, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Annotates static fields that reference rules or methods that return them. A field must be public,\n* static, and a subtype of @link org.junit.rules.TestRule}. A method must be public static, and return\n* a subtype of @link org.junit.rules.TestRule}.\n* <p>\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link BeforeClass} methods,\n* then the entire body of the test class (all contained methods, if it is\n* a standard JUnit test class, or all contained classes, if it is a\n* @link org.junit.runners.Suite}, and finally any @link AfterClass} methods.\n* <p>\n* The statement passed to the @link org.junit.rules.TestRule} will never throw an exception,\n* and throwing an exception from the @link org.junit.rules.TestRule} will result in undefined\n* behavior. This means that some @link org.junit.rules.TestRule}s, such as\n* @link org.junit.rules.ErrorCollector},\n* @link org.junit.rules.ExpectedException},\n* and @link org.junit.rules.Timeout},\n* have undefined behavior when used as @link ClassRule}s.\n* <p>\n* If there are multiple\n* annotated @link ClassRule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general. However, Rules defined by fields will always be applied\n* before Rules defined by methods.\n* <p>\n* For example, here is a test suite that connects to a server once before\n* all the test classes run, and disconnects after they are finished:\n* <pre>\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource resource= new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* }\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* }\n* };\n* }\n* </pre>\n* <p>\n* and the same using a method\n* <pre>\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource getResource()\n* return new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* }\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* }\n* };\n* }\n* }\n* </pre>\n* <p>\n* For more information and more examples, see @link org.junit.rules.TestRule}.\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ead", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java", 
    "filehash" : 723073644, 
    "comments" : [
        {
            "id" : 313, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotating a @link org.junit.experimental.theories.Theory Theory} method int\n* parameter with &amp;#064;TestedOn causes it to be supplied with values from the\n* ints array given when run as a theory by the\n* @link org.junit.experimental.theories.Theories Theories} runner. For\n* example, the below method would be called three times by the Theories runner,\n* once with each of the int parameters specified.\n*\n* <pre>\n* &amp;#064;Theory\n* public void shouldPassForSomeInts(&amp;#064;TestedOn(ints=1, 2, 3}) int param)\n* ...\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "would be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eae", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/FixMethodOrder.java", 
    "filehash" : 3900612963, 
    "comments" : [
        {
            "id" : 318, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* This class allows the user to choose the order of execution of the methods within a test class.\n*\n* <p>The default order of execution of JUnit tests within a class is deterministic but not predictable.\n* The order of execution is not guaranteed for Java 7 (and some previous versions, and can even change\n* from run to run, so the order of execution was changed to be deterministic (in JUnit 4.11)\n*\n* <p>It is recommended that test methods be written so that they are independent of the order that they are executed.\n* However, there may be a number of dependent tests either through error or by design.\n* This class allows the user to specify the order of execution of test methods.\n*\n* <p>For possibilities, see @link MethodSorters}\n*\n* Here is an example:\n*\n* <pre>\n* &amp;#064;FixMethodOrder(MethodSorters.NAME_ASCENDING)\n* public class MyTest\n* }\n* </pre>\n*\n* @see org.junit.runners.MethodSorters\n* @since 4.11*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eaf", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 858, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 859, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 860, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 861, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb0", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 901, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb1", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/validator/ValidateWith.java", 
    "filehash" : 3485280202, 
    "comments" : [
        {
            "id" : 764, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Allows for an @link AnnotationValidator} to be attached to an annotation.\n*\n* <p>When attached to an annotation, the validator will be instantiated and invoked\n* by the @link org.junit.runners.ParentRunner}.</p>\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb2", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestRule.java", 
    "filehash" : 3520460052, 
    "comments" : [
        {
            "id" : 466, 
            "total_pattern" : 19.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 20.78, 
            "comment" : "/**\n* A TestRule is an alteration in how a test method, or set of test methods,\n* is run and reported. A @link TestRule} may add additional checks that cause\n* a test that would otherwise fail to pass, or it may perform necessary setup or\n* cleanup for tests, or it may observe test execution to report it elsewhere.\n* @link TestRule}s can do everything that could be done previously with\n* methods annotated with @link org.junit.Before},\n* @link org.junit.After}, @link org.junit.BeforeClass}, or\n* @link org.junit.AfterClass}, but they are more powerful, and more easily\n* shared\n* between projects and classes.\n*\n* The default JUnit test runners for suites and\n* individual test cases recognize @link TestRule}s introduced in two different\n* ways. @link org.junit.Rule} annotates method-level\n* @link TestRule}s, and @link org.junit.ClassRule}\n* annotates class-level @link TestRule}s. See Javadoc for those annotations\n* for more information.\n*\n* Multiple @link TestRule}s can be applied to a test or suite execution. The\n* @link Statement} that executes the method or suite is passed to each annotated\n* @link org.junit.Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link org.junit.Rule}, if any. For\n* examples of how this can be useful, see these provided TestRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatcher}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb3", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 92, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 93, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 108, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb4", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 241, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails.\n* Create and throw a <code>ComparisonFailure</code> manually if you want to show users the\n* difference between two complex strings.\n* <p/>\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 242, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for expected and actual strings. If it is exceeded, the strings should be shortened.\n*\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 243, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*\n* We have to use the f prefix until the next major release to ensure\n* serialization compatibility.\n* See https://github.com/junit-team/junit/issues/976*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to use", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb5", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/internal/runners/statements/FailOnTimeoutTest.java", 
    "filehash" : 3084503083, 
    "comments" : [
        {
            "id" : 909, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// Must show up in stack trace", 
            "class" : "private static final class StuckStatement extends Statement", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb6", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 672, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 675, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb7", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/categories/MultiCategoryTest.java", 
    "filehash" : 3851480385, 
    "comments" : [
        {
            "id" : 878, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* This test is mentioned in @code Categories} and any changes\n* must be reflected.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatcher.java", 
    "filehash" : 4088168215, 
    "comments" : [
        {
            "id" : 468, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatcher is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public TestWatcher watchman= new TestWatcher()\n* &amp;#064;Override\n* protected void failed(Throwable e, Description description)\n* watchedLog+= description + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* protected void succeeded(Description description)\n* watchedLog+= description + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 470, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Invoked when a test is skipped due to a failed assumption.\n*\n* @deprecated use @link #skipped(AssumptionViolatedException, Description)}*/", 
            "class" : "public abstract class TestWatcher implements TestRule", 
            "method" : "@SuppressWarnings(\"deprecation\")", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eb9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 59, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 60, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eba", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 590, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ebb", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/Stopwatch.java", 
    "filehash" : 1818549372, 
    "comments" : [
        {
            "id" : 446, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.\n*\n* <p>Override them to get the time in nanoseconds. For example, this class will keep logging the\n* time spent by each passed, failed, skipped, and finished test:\n*\n* <pre>\n* public static class StopwatchTest\n* private static final Logger logger = Logger.getLogger(&amp;quot;&amp;quot;);\n*\n* private static void logInfo(Description description, String status, long nanos)\n* String testName = description.getMethodName();\n* logger.info(String.format(&amp;quot;Test %s %s, spent %d microseconds&amp;quot;,\n* testName, status, TimeUnit.NANOSECONDS.toMicros(nanos)));\n* }\n*\n* &amp;#064;Rule\n* public Stopwatch stopwatch = new Stopwatch()\n* &amp;#064;Override\n* protected void succeeded(long nanos, Description description)\n* logInfo(description, &amp;quot;succeeded&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void failed(long nanos, Throwable e, Description description)\n* logInfo(description, &amp;quot;failed&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void skipped(long nanos, AssumptionViolatedException e, Description description)\n* logInfo(description, &amp;quot;skipped&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void finished(long nanos, Description description)\n* logInfo(description, &amp;quot;finished&amp;quot;, nanos);\n* }\n* };\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void skips()\n* assumeTrue(false);\n* }\n* }\n* </pre>\n*\n* An example to assert runtime:\n* <pre>\n* &amp;#064;Test\n* public void performanceTest() throws InterruptedException\n* long delta = 30;\n* Thread.sleep(300L);\n* assertEquals(300d, stopwatch.runtime(MILLISECONDS, delta);\n* Thread.sleep(500L);\n* assertEquals(800d, stopwatch.runtime(MILLISECONDS, delta);\n* }\n* </pre>\n*\n* @author tibor17\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 449, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test fails*/", 
            "class" : "public abstract class Stopwatch implements TestRule", 
            "method" : "protected void succeeded(long nanos, Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ebc", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 472, 
            "total_pattern" : 7.25, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.25, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @since 4.7\n* @deprecated Use @link TestWatcher} (which implements @link TestRule}) instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 474, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails*/", 
            "class" : "@Deprecated", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ebd", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/Throwables.java", 
    "filehash" : 2141092837, 
    "comments" : [
        {
            "id" : 399, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Rethrows the given @code Throwable}, allowing the caller to\n* declare that it throws @code Exception}. This is useful when\n* your callers have nothing reasonable they can do when a\n* @code Throwable} is thrown. This is declared to return @code Exception}\n* so it can be used in a @code throw} clause:\n* <pre>\n* try\n* doSomething();\n* } catch (Throwable e}\n* throw Throwables.rethrowAsException(e);\n* }\n* doSomethingLater();\n* </pre>\n*\n* @param e exception to rethrow\n* @return does not return anything\n* @since 4.12*/", 
            "class" : "public final class Throwables", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ebe", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 491, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.\n*\n* @since 4.6*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ebf", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 292, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec0", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/validator/AnnotationValidator.java", 
    "filehash" : 1247169451, 
    "comments" : [
        {
            "id" : 754, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Validates annotations on classes and methods. To be validated,\n* an annotation should be annotated with @link ValidateWith}\n*\n* Instances of this class are shared by multiple test runners, so they should\n* be immutable and thread-safe.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec1", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 780, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec2", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 550, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n*\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec3", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestTimedOutException.java", 
    "filehash" : 61165271, 
    "comments" : [
        {
            "id" : 702, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Exception thrown when a test fails on timeout.\n*\n* @since 4.12\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec4", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 809, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 810, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 811, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 812, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 813, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 814, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 815, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec5", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 10, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.\n*\n* @deprecated Please use @link org.junit.Assert} instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "@Deprecated", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "@Deprecated", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec6", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 552, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec7", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 238, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class,\n* unless they are overridden in the current class. No other ordering is defined.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 167, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class, unless they are shadowed in the current class.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ec9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AssumptionViolatedException.java", 
    "filehash" : 2549250296, 
    "comments" : [
        {
            "id" : 233, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* An exception class used to implement <i>assumptions</i> (state in which a given test\n* is meaningful and should or should not be executed). A test for which an assumption\n* fails should not generate a test case failure.\n*\n* @see org.junit.Assume\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eca", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/Annotatable.java", 
    "filehash" : 2089749227, 
    "comments" : [
        {
            "id" : 649, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A model element that may have annotations.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may have", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ecb", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 643, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ecc", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/Theory.java", 
    "filehash" : 1465182915, 
    "comments" : [
        {
            "id" : 317, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Marks test methods that should be read as theories by the @link org.junit.experimental.theories.Theories Theories} runner.\n*\n* @see org.junit.experimental.theories.Theories*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ecd", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 223, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information. Assume\n* basically means \"don't run this test if these conditions don't apply\". The default JUnit runner skips tests with\n* failing assumptions. Custom runners may behave differently.\n* <p>\n* A good example of using assumptions is in <a href=\"https://github.com/junit-team/junit/wiki/Theories\">Theories</a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case.\n* </p>\n* Failed assumptions are usually not logged, because there may be many tests that don't apply to certain\n* configurations.\n*\n* <p>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>\n* </p>\n*\n* @see <a href=\"https://github.com/junit-team/junit/wiki/Theories\">Theories</a>\n*\n* @since 4.4*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 229, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 230, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(\"alwaysPasses\", 1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(\"alwaysFails\", 0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers*/", 
            "class" : "public class Assume", 
            "method" : "public static <T> void assumeThat(T actual, Matcher<T> matcher)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ece", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestFailure.java", 
    "filehash" : 97383699, 
    "comments" : [
        {
            "id" : 84, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a String containing the stack trace of the error\n* thrown by TestFailure.*/", 
            "class" : "public class TestFailure", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 86, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns @code true} if the error is considered a failure\n* (i.e. if it is an instance of @code AssertionFailedError}),\n* @code false} otherwise.*/", 
            "class" : "public class TestFailure", 
            "method" : "public String exceptionMessage()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ecf", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 425, 
            "total_pattern" : 21.0, 
            "total_heuristic" : 4.88, 
            "total_score" : 25.88, 
            "comment" : "/**\n* The @code ExpectedException} rule allows you to verify that your code\n* throws a specific exception.\n*\n* <h3>Usage</h3>\n*\n* <pre> public class SimpleExpectedExceptionTest\n* &amp;#064;Rule\n* public ExpectedException thrown= ExpectedException.none();\n*\n* &amp;#064;Test\n* public void throwsNothing()\n* // no exception expected, none thrown: passes.\n* }\n*\n* &amp;#064;Test\n* public void throwsExceptionWithSpecificType()\n* thrown.expect(NullPointerException.class);\n* throw new NullPointerException();\n* }\n* }</pre>\n*\n* <p>\n* You have to add the @code ExpectedException} rule to your test.\n* This doesn't affect your existing tests (see @code throwsNothing()}).\n* After specifiying the type of the expected exception your test is\n* successful when such an exception is thrown and it fails if a\n* different or no exception is thrown.\n*\n* <p>\n* Instead of specifying the exception's type you can characterize the\n* expected exception based on other criterias, too:\n*\n* <ul>\n* <li>The exception's message contains a specific text: @link #expectMessage(String)}</li>\n* <li>The exception's message complies with a Hamcrest matcher: @link #expectMessage(Matcher)}</li>\n* <li>The exception's cause complies with a Hamcrest matcher: @link #expectCause(Matcher)}</li>\n* <li>The exception itself complies with a Hamcrest matcher: @link #expect(Matcher)}</li>\n* </ul>\n*\n* <p>\n* You can combine any of the presented expect-methods. The test is\n* successful if all specifications are met.\n* <pre> &amp;#064;Test\n* public void throwsException()\n* thrown.expect(NullPointerException.class);\n* thrown.expectMessage(&amp;quot;happened&amp;quot;);\n* throw new NullPointerException(&amp;quot;What happened?&amp;quot;);\n* }</pre>\n*\n* <h3>AssumptionViolatedExceptions</h3>\n* <p>\n* JUnit uses @link AssumptionViolatedException}s for indicating that a test\n* provides no useful information. (See @link org.junit.Assume} for more\n* information.) You have to call @code assume} methods before you set\n* expectations of the @code ExpectedException} rule. In this case the rule\n* will not handle consume the exceptions and it can be handled by the\n* framework. E.g. the following test is ignored by JUnit's default runner.\n*\n* <pre> &amp;#064;Test\n* public void ignoredBecauseOfFailedAssumption()\n* assumeTrue(false); // throws AssumptionViolatedException\n* thrown.expect(NullPointerException.class);\n* }</pre>\n*\n* <h3>AssertionErrors</h3>\n*\n* <p>\n* JUnit uses @link AssertionError}s for indicating that a test is failing. You\n* have to call @code assert} methods before you set expectations of the\n* @code ExpectedException} rule, if they should be handled by the framework.\n* E.g. the following test fails because of the @code assertTrue} statement.\n*\n* <pre> &amp;#064;Test\n* public void throwsUnhandled()\n* assertTrue(false); // throws AssertionError\n* thrown.expect(NullPointerException.class);\n* }</pre>\n*\n* <h3>Missing Exceptions</h3>\n* <p>\n* By default missing exceptions are reported with an error message\n* like \"Expected test to throw an instance of foo\". You can configure a different\n* message by means of @link #reportMissingExceptionWithMessage(String)}. You\n* can use a @code %s} placeholder for the description of the expected\n* exception. E.g. \"Test doesn't throw %s.\" will fail with the error message\n* \"Test doesn't throw an instance of foo.\".\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to add", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 427, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* This method does nothing. Don't use it.\n* @deprecated AssertionErrors are handled by default since JUnit 4.12. Just\n* like in JUnit &amp;lt;= 4.10.*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "public static ExpectedException none()", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 428, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* This method does nothing. Don't use it.\n* @deprecated AssumptionViolatedExceptions are handled by default since\n* JUnit 4.12. Just like in JUnit &amp;lt;= 4.10.*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 429, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 6.7, 
            "comment" : "/**\n* Specifies the failure message for tests that are expected to throw\n* an exception but do not throw any. You can use a @code %s} placeholder for\n* the description of the expected exception. E.g. \"Test doesn't throw %s.\"\n* will fail with the error message\n* \"Test doesn't throw an instance of foo.\".\n*\n* @param message exception detail message\n* @return the rule itself*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed0", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/AllTests.java", 
    "filehash" : 2336982868, 
    "comments" : [
        {
            "id" : 856, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "// These test files need to be cleaned. See https://sourceforge.net/pm/task.php?func=detailtask&amp;project_task_id=136507&amp;group_id=15278&amp;group_project_id=51407", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to be", 
                    "score" : 3.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed1", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 111, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* <p>\n* Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* <p>\n* This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.\n* <p>\n* A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class }\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 114, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<?> getTestConstructor(Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 119, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private void addTestsFromTestCase(final Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed2", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 562, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed3", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 497, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).\n* <p>\n* <code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.\n* <p>\n* In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 498, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n*\n* @param name the name of the <code>Description</code>\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 499, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n*\n* @param name the name of the <code>Description</code>\n* @param uniqueId an arbitrary object used to define uniqueness (in @link #equals(Object)}\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 500, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the 'class' named\n* <code>className</code>. Generally, this will be a leaf <code>Description</code>. This method is a better choice\n* than @link #createTestDescription(Class, String, Annotation...)} for test runners whose test cases are not\n* defined in an actual Java <code>Class</code>.\n*\n* @param className the class name of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 501, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n*\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(String className, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 502, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n*\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 503, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n*\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 506, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 515, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed4", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 579, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 588, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 589, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed5", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/JUnitCommandLineParseResult.java", 
    "filehash" : 3009038395, 
    "comments" : [
        {
            "id" : 532, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Exception used if there's a problem parsing the command line.*/", 
            "class" : "class JUnitCommandLineParseResult", 
            "method" : "private Request applyFilterSpecs(Request request)", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed6", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/Timeout.java", 
    "filehash" : 2837671573, 
    "comments" : [
        {
            "id" : 476, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.14, 
            "comment" : "/**\n* The Timeout Rule applies the same timeout to all test methods in a class:\n* <pre>\n* public static class HasGlobalLongTimeout\n*\n* &amp;#064;Rule\n* public Timeout globalTimeout= new Timeout(20);\n*\n* &amp;#064;Test\n* public void run1() throws InterruptedException\n* Thread.sleep(100);\n* }\n*\n* &amp;#064;Test\n* public void infiniteLoop()\n* while (true) }\n* }\n* }\n* </pre>\n* <p>\n* Each test is run in a new thread. If the specified timeout elapses before\n* the test completes, its execution is interrupted via @link Thread#interrupt()}.\n* This happens in interruptable I/O and locks, and methods in @link Object}\n* and @link Thread} throwing @link InterruptedException}.\n* <p>\n* A specified timeout of 0 will be interpreted as not set, however tests will\n* still launch from separate threads. This can be useful for disabling timeouts\n* in environments where they are dynamically set based on some property.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 477, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a @code Timeout} instance with the timeout specified\n* in milliseconds.\n* <p>\n* This constructor is deprecated.\n* <p>\n* Instead use @link #Timeout(long, java.util.concurrent.TimeUnit)},\n* @link Timeout#millis(long)}, or @link Timeout#seconds(long)}.\n*\n* @param millis the maximum time in milliseconds to allow the\n* test to run before it should timeout*/", 
            "class" : "public class Timeout implements TestRule", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 484, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Creates a @link Statement} that will run the given\n* @code statement}, and timeout the operation based\n* on the values configured in this rule. Subclasses\n* can override this method for different behavior.\n*\n* @since 4.12*/", 
            "class" : "public class Timeout implements TestRule", 
            "method" : "protected final boolean getLookingForStuckThread()", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 486, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Specifies the time to wait before timing out the test.\n*\n* <p>If this is not called, or is called with a\n* @code timeout} of @code 0}, the returned @code Timeout}\n* rule instance will cause the tests to wait forever to\n* complete, however the tests will still launch from a\n* separate thread. This can be useful for disabling timeouts\n* in environments where they are dynamically set based on\n* some property.\n*\n* @param timeout the maximum time to wait\n* @param unit the time unit of the @code timeout} argument\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "@Override public void evaluate()", 
            "patterns" : [
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 487, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Specifies whether to look for a stuck thread. If a timeout occurs and this\n* feature is enabled, the rule will look for a thread that appears to be stuck\n* and dump its backtrace. This feature is experimental. Behavior may change\n* after the 4.12 release in response to feedback.\n*\n* @param enable @code true} to enable the feature\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "protected TimeUnit getTimeUnit()", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed7", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 556, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 570, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.5, 
            "comment" : "/**\n* Register an instance of this class with @link RunNotifier} to be notified\n* of events that occur during a test run. All of the methods in this class\n* are abstract and have no implementation; override one or more methods to\n* receive events.\n* <p>\n* For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* <p>\n* To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* <p>\n* If a listener throws an exception for a test event, the other listeners will\n* have their @link RunListener#testFailure(Failure)} called with a @code Description}\n* of @link Description#TEST_MECHANISM} to indicate the failure.\n* <p>\n* By default, JUnit will synchronize calls to your listener. If your listener\n* is thread-safe and you want to allow JUnit to call your listener from\n* multiple threads when tests are run in parallel, you can annotate your\n* test class with @link RunListener.ThreadSafe}.\n* <p>\n* Listener methods will be called from the same thread as is running\n* the test, unless otherwise indicated by the method Javadoc\n*\n* @see org.junit.runner.JUnitCore\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 571, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called before any tests have been run. This may be called on an\n* arbitrary thread.\n*\n* @param description describes the tests to be run*/", 
            "class" : "public class RunListener", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 572, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when all tests have finished. This may be called on an\n* arbitrary thread.\n*\n* @param result the summary of the test run, including all the tests that failed*/", 
            "class" : "public class RunListener", 
            "method" : "public void testRunStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 574, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n*\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 575, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Called when an atomic test fails, or when a listener throws an exception.\n*\n* <p>In the case of a failure of an atomic test, this method will be called\n* with the same @code Description} passed to\n* @link #testStarted(Description)}, from the same thread that called\n* @link #testStarted(Description)}.\n*\n* <p>In the case of a listener throwing an exception, this will be called with\n* a @code Description} of @link Description#TEST_MECHANISM}, and may be called\n* on an arbitrary thread.\n*\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 577, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ed9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 912, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eda", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 420, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 421, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 422, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 423, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure with the given @code reason}\n* to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public <T> void checkThat(final T value, final Matcher<T> matcher)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 424, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if\n* @code callable} threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176edb", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 825, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176edc", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 748, 
            "total_pattern" : 21.0, 
            "total_heuristic" : 2.56, 
            "total_score" : 23.56, 
            "comment" : "/**\n* The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.\n* <p>\n* A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* <p>\n* The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre>\n* If the exception's message or one of its properties should be verified, the\n* @link org.junit.rules.ExpectedException ExpectedException} rule can be used. Further\n* information about exception testing can be found at the\n* <a href=\"https://github.com/junit-team/junit/wiki/Exception-testing\">JUnit Wiki</a>.\n* <p>\n* The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre>\n* <b>Warning</b>: while <code>timeout</code> is useful to catch and terminate\n* infinite loops, it should <em>not</em> be considered deterministic. The\n* following test may or may not fail depending on how the operating system\n* schedules threads:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void sleep100()\n* Thread.sleep(100);\n* }\n* </pre>\n* <b>THREAD SAFETY WARNING:</b> Test methods with a timeout parameter are run in a thread other than the\n* thread which runs the fixture's @Before and @After methods. This may yield different behavior for\n* code that is not thread safe when compared to the same test method without a timeout parameter.\n* <b>Consider using the @link org.junit.rules.Timeout} rule instead</b>, which ensures a test method is run on the\n* same thread as the fixture's @Before and @After methods.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 750, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.14, 
            "comment" : "/**\n* Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed if\n* and only if an exception of the specified class is thrown by the method. If the Throwable's\n* message or one of its properties should be verified, the\n* @link org.junit.rules.ExpectedException ExpectedException} rule can be used instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be used instead", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 751, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it\n* takes longer than that number of milliseconds.\n* <p>\n* <b>THREAD SAFETY WARNING:</b> Test methods with a timeout parameter are run in a thread other than the\n* thread which runs the fixture's @Before and @After methods. This may yield different behavior for\n* code that is not thread safe when compared to the same test method without a timeout parameter.\n* <b>Consider using the @link org.junit.rules.Timeout} rule instead</b>, which ensures a test method is run on the\n* same thread as the fixture's @Before and @After methods.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176edd", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 166, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class, unless they are overridden in the current class.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ede", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 595, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n*\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 596, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n*\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 599, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Creates a @link Request} that, when processed, will report an error for the given\n* test class with the given cause.*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 604, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n* <p>\n* For example, here is code to run a test suite in alphabetical order:\n* <pre>\n* private static Comparator&amp;lt;Description&amp;gt; forward()\n* return new Comparator&amp;lt;Description&amp;gt;()\n* public int compare(Description o1, Description o2)\n* return o1.getDisplayName().compareTo(o2.getDisplayName());\n* }\n* };\n* }\n*\n* public static main()\n* new JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n* }\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(final Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176edf", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee0", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 341, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes\n* @deprecated Please use @link org.hamcrest.TypeSafeMatcher}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 342, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 343, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "@Deprecated", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee1", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee2", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 309, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee3", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", 
    "filehash" : 819242240, 
    "comments" : [
        {
            "id" : 377, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Creates an instance wrapping the given statement with the given timeout in milliseconds.\n*\n* @param statement the statement to wrap\n* @param timeoutMillis the timeout in milliseconds\n* @deprecated use @link #builder()} instead.*/", 
            "class" : "public class FailOnTimeout extends Statement", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 379, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Specifies the time to wait before timing out the test.\n*\n* <p>If this is not called, or is called with a @code timeout} of\n* @code 0}, the returned @code Statement} will wait forever for the\n* test to complete, however the test will still launch from a separate\n* thread. This can be useful for disabling timeouts in environments\n* where they are dynamically set based on some property.\n*\n* @param timeout the maximum time to wait\n* @param unit the time unit of the @code timeout} argument\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 380, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Specifies whether to look for a stuck thread. If a timeout occurs and this\n* feature is enabled, the test will look for a thread that appears to be stuck\n* and dump its backtrace. This feature is experimental. Behavior may change\n* after the 4.12 release in response to feedback.\n*\n* @param enable @code true} to enable the feature\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "public Builder withTimeout(long timeout, TimeUnit unit)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 383, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// caller will re-throw; no need to call Thread.interrupt()", 
            "class" : "public static class Builder", 
            "method" : "private Throwable getResult(FutureTask<Throwable> task, Thread thread)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 386, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 2.7, 
            "comment" : "/**\n* Determines whether the test appears to be stuck in some thread other than\n* the \"main thread\" (the one created to run the test). This feature is experimental.\n* Behavior may change after the 4.12 release in response to feedback.\n* @param mainThread The main thread created by @code evaluate()}\n* @return The thread which appears to be causing the problem, if different from\n* @code mainThread}, or @code null} if the main thread appears to be the\n* problem or if the thread cannot be determined. The return value is never equal\n* to @code mainThread}.*/", 
            "class" : "public static class Builder", 
            "method" : "private StackTraceElement[] getStackTrace(Thread thread)", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee4", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", 
    "filehash" : 3628591064, 
    "comments" : [
        {
            "id" : 899, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Simple class that SHOULD fail because no parameters are met.*/", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should fail", 
                    "score" : 3.0, 
                    "class" : "Modal + Verb", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee5", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/rules/RuleMemberValidator.java", 
    "filehash" : 1145648460, 
    "comments" : [
        {
            "id" : 367, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the validated member to be non-static*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 369, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member to be static*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 370, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member's declaring class to be public*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 371, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member to be public*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 372, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member is a field implementing @link org.junit.rules.MethodRule} or @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 373, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Require the member to return an implementation of @link org.junit.rules.MethodRule} or\n* @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 374, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Require the member to return an implementation of @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 375, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member is a field implementing @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee6", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", 
    "filehash" : 3963443487, 
    "comments" : [
        {
            "id" : 331, 
            "total_pattern" : 6.25, 
            "total_heuristic" : 1.2, 
            "total_score" : 7.45, 
            "comment" : "/**\n* The @code AnnotatedBuilder} is a strategy for constructing runners for test class that have been annotated with the\n* @code @RunWith} annotation. All tests within this class will be executed using the runner that was specified within\n* the annotation.\n* <p>\n* If a runner supports inner member classes, the member classes will inherit the runner from the enclosing class, e.g.:\n* <pre>\n* &amp;#064;RunWith(MyRunner.class)\n* public class MyTest\n* // some tests might go here\n*\n* public class MyMemberClass\n* &amp;#064;Test\n* public void thisTestRunsWith_MyRunner()\n* // some test logic\n* }\n*\n* // some more tests might go here\n* }\n*\n* &amp;#064;RunWith(AnotherRunner.class)\n* public class AnotherMemberClass\n* // some tests might go here\n*\n* public class DeepInnerClass\n* &amp;#064;Test\n* public void thisTestRunsWith_AnotherRunner()\n* // some test logic\n* }\n* }\n*\n* public class DeepInheritedClass extends SuperTest\n* &amp;#064;Test\n* public void thisTestRunsWith_SuperRunner()\n* // some test logic\n* }\n* }\n* }\n* }\n*\n* &amp;#064;RunWith(SuperRunner.class)\n* public class SuperTest\n* // some tests might go here\n* }\n* </pre>\n* The key points to note here are:\n* <ul>\n* <li>If there is no RunWith annotation, no runner will be created.</li>\n* <li>The resolve step is inside-out, e.g. the closest RunWith annotation wins</li>\n* <li>RunWith annotations are inherited and work as if the class was annotated itself.</li>\n* <li>The default JUnit runner does not support inner member classes,\n* so this is only valid for custom runners that support inner member classes.</li>\n* <li>Custom runners with support for inner classes may or may not support RunWith annotations for member\n* classes. Please refer to the custom runner documentation.</li>\n* </ul>\n*\n* @see org.junit.runners.model.RunnerBuilder\n* @see org.junit.runner.RunWith\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee7", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/DisableOnDebug.java", 
    "filehash" : 1384888686, 
    "comments" : [
        {
            "id" : 414, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 5.2, 
            "comment" : "/**\n* The @code DisableOnDebug} Rule allows you to label certain rules to be\n* disabled when debugging.\n* <p>\n* The most illustrative use case is for tests that make use of the\n* @link Timeout} rule, when ran in debug mode the test may terminate on\n* timeout abruptly during debugging. Developers may disable the timeout, or\n* increase the timeout by making a code change on tests that need debugging and\n* remember revert the change afterwards or rules such as @link Timeout} that\n* may be disabled during debugging may be wrapped in a @code DisableOnDebug}.\n* <p>\n* The important benefit of this feature is that you can disable such rules\n* without any making any modifications to your test class to remove them during\n* debugging.\n* <p>\n* This does nothing to tackle timeouts or time sensitive code under test when\n* debugging and may make this less useful in such circumstances.\n* <p>\n* Example usage:\n*\n* <pre>\n* public static class DisableTimeoutOnDebugSampleTest\n*\n* &amp;#064;Rule\n* public TestRule timeout = new DisableOnDebug(new Timeout(20));\n*\n* &amp;#064;Test\n* public void myTest()\n* int i = 0;\n* assertEquals(0, i); // suppose you had a break point here to inspect i\n* }\n* }\n* </pre>\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 418, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Parses arguments passed to the runtime environment for debug flags\n* <p>\n* Options specified in:\n* <ul>\n* <li>\n* <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-6</a></li>\n* <li><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-7</a></li>\n* <li><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-8</a></li>\n*\n*\n* @param arguments\n* the arguments passed to the runtime environment, usually this\n* will be @link RuntimeMXBean#getInputArguments()}\n* @return true if the current JVM was started in debug mode, false\n* otherwise.*/", 
            "class" : "public class DisableOnDebug implements TestRule", 
            "method" : "public Statement apply(Statement base, Description description)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 419, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Returns @code true} if the JVM is in debug mode. This method may be used\n* by test classes to take additional action to disable code paths that\n* interfere with debugging if required.\n*\n* @return @code true} if the current JVM is in debug mode, @code false}\n* otherwise*/", 
            "class" : "public class DisableOnDebug implements TestRule", 
            "method" : "private static boolean isDebugging(List<String> arguments)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 779, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ee9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 239, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those of the current class, unless they are shadowed in the current class.\n* <p>\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.AfterClass\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eea", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 924, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eeb", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 274, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n*\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 278, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 281, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eec", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 302, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants. Abstract inner classes are ignored.\n* <p>\n* So, for example:\n* <pre>\n* &amp;#064;RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* abstract public static class Ignored ...}\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eed", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 62, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n*\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eee", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 157, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n* <p>\n* TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.\n* <p>\n* When the wait command line argument is given TestRunner\n* waits until the users types RETURN.\n* <p>\n* TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 162, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eef", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/CategoryValidator.java", 
    "filehash" : 3616995367, 
    "comments" : [
        {
            "id" : 266, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Validates that there are no errors in the use of the @code Category}\n* annotation. If there is, a @code Throwable} object will be added to the list\n* of errors.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 267, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem detected. Looks for\n* @code BeforeClass}, @code AfterClass}, @code Before} and @code After}\n* annotations.\n*\n* @param method the method that is being validated\n* @return A list of exceptions detected\n*\n* @since 4.12*/", 
            "class" : "public final class CategoryValidator extends AnnotationValidator", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef0", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 88, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef1", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 903, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef2", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 719, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods,\n* handle annotated @link ClassRule}s, create a composite\n* @link Description}, and run children sequentially.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 722, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected TestClass createTestClass(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 723, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected TestClass createTestClass(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 724, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected TestClass createTestClass(Class<?> testClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 726, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class.\n* Override to add pre-/post-processing. Here is an outline of the\n* implementation:\n* <ol>\n* <li>Determine the children to be run using @link #getChildren()}\n* (subject to any imposed filter and sort).</li>\n* <li>If there are any children remaining after filtering and ignoring,\n* construct a statement that will:\n* <ol>\n* <li>Apply all @code ClassRule}s on the test-class and superclasses.</li>\n* <li>Run all non-overridden @code @BeforeClass} methods on the test-class\n* and superclasses; if any throws an Exception, stop execution and pass the\n* exception on.</li>\n* <li>Run all remaining tests on the test-class.</li>\n* <li>Run all non-overridden @code @AfterClass} methods on the test-class\n* and superclasses: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link org.junit.runners.model.MultipleFailureException}.</li>\n* </ol>\n* </li>\n* </ol>\n*\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "private void validateClassRules(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 728, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses before executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link org.junit.runners.model.MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 738, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef3", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 173, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 180, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two doubles are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown with the given\n* message. If the unexpected value is infinity then the delta value is\n* ignored. NaNs are considered equal:\n* <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertNotEquals(long unexpected, long actual)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two doubles are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown. If the unexpected\n* value is infinity then the delta value is ignored.NaNs are considered\n* equal: <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails\n*\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two floats are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown. If the unexpected\n* value is infinity then the delta value is ignored.NaNs are considered\n* equal: <code>assertNotEquals(Float.NaN, Float.NaN, *)</code> fails\n*\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertNotEquals(double unexpected, double actual, double delta)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 196, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds long array with expected values.\n* @param actuals long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two floats are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown with the given\n* message. If the unexpected value is infinity then the delta value is\n* ignored. NaNs are considered equal:\n* <code>assertNotEquals(Float.NaN, Float.NaN, *)</code> fails\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 207, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "static public void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 208, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 219, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 220, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 221, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* <code>org.hamcrest.Matcher</code> does not currently document the meaning\n* of its type parameter <code>T</code>. This method assumes that a matcher\n* typed as <code>Matcher&amp;lt;T&amp;gt;</code> can be meaningfully applied only\n* to values that could be assigned to a variable of type <code>T</code>.\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed\n* values\n* @see org.hamcrest.CoreMatchers\n* @see org.hamcrest.MatcherAssert*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 222, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* <code>org.hamcrest.Matcher</code> does not currently document the meaning\n* of its type parameter <code>T</code>. This method assumes that a matcher\n* typed as <code>Matcher&amp;lt;T&amp;gt;</code> can be meaningfully applied only\n* to values that could be assigned to a variable of type <code>T</code>.\n*\n* @param reason additional information about the error\n* @param <T> the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed\n* values\n* @see org.hamcrest.CoreMatchers\n* @see org.hamcrest.MatcherAssert*/", 
            "class" : "public class Assert", 
            "method" : "public static <T> void assertThat(T actual, Matcher<? super T> matcher)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef4", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 712, 
            "total_pattern" : 19.7, 
            "total_heuristic" : 0.0, 
            "total_score" : 19.7, 
            "comment" : "/**\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* <p>\n* For example, to test a Fibonacci function, write:\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters(name= &amp;quot;index}: fib[0}]=1}&amp;quot;)\n* public static Iterable&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]   0, 0 },  1, 1 },  2, 1 },\n*  3, 2 },  4, 3 },  5, 5 },  6, 8 } });\n* }\n*\n* private int fInput;\n*\n* private int fExpected;\n*\n* public FibonacciTest(int input, int expected)\n* fInput= input;\n* fExpected= expected;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed using the\n* two-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* <p>\n* In order that you can easily identify the individual tests, you may provide a\n* name for the <code>&amp;#064;Parameters</code> annotation. This name is allowed\n* to contain placeholders, which are replaced at runtime. The placeholders are\n* <dl>\n* <dt>index}</dt>\n* <dd>the current parameter index</dd>\n* <dt>0}</dt>\n* <dd>the first parameter value</dd>\n* <dt>1}</dt>\n* <dd>the second parameter value</dd>\n* <dt>...</dt>\n* <dd>...</dd>\n* </dl>\n* <p>\n* In the example given above, the <code>Parameterized</code> runner creates\n* names like <code>[1: fib(3)=2]</code>. If you don't use the name parameter,\n* then the current parameter index is used as name.\n* <p>\n* You can also write:\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class FibonacciTest\n* &amp;#064;Parameters\n* public static Iterable&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]   0, 0 },  1, 1 },  2, 1 },\n*  3, 2 },  4, 3 },  5, 5 },  6, 8 } });\n* }\n*\n* &amp;#064;Parameter(0)\n* public int fInput;\n*\n* &amp;#064;Parameter(1)\n* public int fExpected;\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(fExpected, Fibonacci.compute(fInput));\n* }\n* }\n* </pre>\n* <p>\n* Each instance of <code>FibonacciTest</code> will be constructed with the default constructor\n* and fields annotated by <code>&amp;#064;Parameter</code> will be initialized\n* with the data values in the <code>&amp;#064;Parameters</code> method.\n*\n* <p>\n* The parameters can be provided as an array, too:\n*\n* <pre>\n* &amp;#064;Parameters\n* public static Object[][] data()\n* return new Object[][]   0, 0 },  1, 1 },  2, 1 },  3, 2 },  4, 3 },\n*  5, 5 },  6, 8 } };\n* }\n* </pre>\n*\n* <h3>Tests with single parameter</h3>\n* <p>\n* If your test needs a single parameter only, you don't have to wrap it with an\n* array. Instead you can provide an <code>Iterable</code> or an array of\n* objects.\n* <pre>\n* &amp;#064;Parameters\n* public static Iterable&amp;lt;? extends Object&amp;gt; data()\n* return Arrays.asList(&amp;quot;first test&amp;quot;, &amp;quot;second test&amp;quot;);\n* }\n* </pre>\n* <p>\n* or\n* <pre>\n* &amp;#064;Parameters\n* public static Object[] data()\n* return new Object[]  &amp;quot;first test&amp;quot;, &amp;quot;second test&amp;quot; };\n* }\n* </pre>\n*\n* <h3>Create different runners</h3>\n* <p>\n* By default the @code Parameterized} runner creates a slightly modified\n* @link BlockJUnit4ClassRunner} for each set of parameters. You can build an\n* own @code Parameterized} runner that creates another runner for each set of\n* parameters. Therefore you have to build a @link ParametersRunnerFactory}\n* that creates a runner for each @link TestWithParameters}. (\n* @code TestWithParameters} are bundling the parameters and the test name.)\n* The factory must have a public zero-arg constructor.\n*\n* <pre>\n* public class YourRunnerFactory implements ParameterizedRunnerFactory\n* public Runner createRunnerForTestWithParameters(TestWithParameters test)\n* throws InitializationError\n* return YourRunner(test);\n* }\n* }\n* </pre>\n* <p>\n* Use the @link UseParametersRunnerFactory} to tell the @code Parameterized}\n* runner that it should use your factory.\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* &amp;#064;UseParametersRunnerFactory(YourRunnerFactory.class)\n* public class YourTest\n* ...\n* }\n* </pre>\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must have", 
                    "score" : 1.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 715, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Annotation for fields of the test class which will be initialized by the\n* method annotated by <code>Parameters</code>.\n* By using directly this annotation, the test class constructor isn't needed.\n* Index range must start at 0.\n* Default value is 0.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 717, 
            "total_pattern" : 3.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.6, 
            "comment" : "/**\n* Add this annotation to your test class if you want to generate a special\n* runner. You have to specify a @link ParametersRunnerFactory} class that\n* creates such runners. The factory must have a public zero-arg\n* constructor.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must have", 
                    "score" : 1.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef5", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkMethod.java", 
    "filehash" : 321338782, 
    "comments" : [
        {
            "id" : 669, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns true if this is a no-arg method that returns a value assignable\n* to @code type}\n*\n* @deprecated This is used only by the Theories runner, and does not\n* use all the generic type info that it ought to. It will be replaced\n* with a forthcoming ParameterSignature#canAcceptResultOf(FrameworkMethod)\n* once Theories moves to junit-contrib.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be replaced", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef6", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 439, 
            "total_pattern" : 12.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 13.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* examples of how this can be useful, see these provided MethodRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatchman}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>\n*\n* Note that @link MethodRule} has been replaced by @link TestRule},\n* which has the added benefit of supporting class rules.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef7", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 689, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code clazz}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass implements Annotatable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 699, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/*\n* A method annotated with @Rule may return a @TestRule or a @MethodRule,\n* we cannot call the method to check whether the return type matches our\n* expectation i.e. subclass of valueClass. If we do that then the method\n* will be invoked twice and we do not want to do that. So we first check\n* whether return type matches our expectation and only then call the method\n* to fetch the MethodRule*/", 
            "class" : "public class TestClass implements Annotatable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef8", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 57, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176ef9", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/requests/ClassRequest.java", 
    "filehash" : 1184784129, 
    "comments" : [
        {
            "id" : 347, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*\n* We have to use the f prefix, because IntelliJ's JUnit4IdeaTestRunner uses\n* reflection to access this field. See\n* https://github.com/junit-team/junit/issues/960*/", 
            "class" : "public class ClassRequest extends Request", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to use", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176efa", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java", 
    "filehash" : 2096509089, 
    "comments" : [
        {
            "id" : 707, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A @link BlockJUnit4ClassRunner} with parameters support. Parameters can be\n* injected via constructor or into annotated fields.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176efb", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 871, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176efc", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/AssumptionViolatedException.java", 
    "filehash" : 4067814187, 
    "comments" : [
        {
            "id" : 324, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 10.14, 
            "comment" : "/**\n* An exception class used to implement <i>assumptions</i> (state in which a given test\n* is meaningful and should or should not be executed). A test for which an assumption\n* fails should not generate a test case failure.\n*\n* @see org.junit.Assume*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should not", 
                    "score" : 4.0, 
                    "class" : "modal + Neg", 
                    "theme" : "task should not be done", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 325, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 326, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given <i>value</i> (String or\n* Throwable) and an additional failing @link Matcher}.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 327, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given <i>value</i> (String or\n* Throwable) and an additional failing @link Matcher}.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 328, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given message only.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 329, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given message and a cause.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176efd", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 683, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176efe", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 775, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176eff", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/JUnitSystem.java", 
    "filehash" : 3538034753, 
    "comments" : [
        {
            "id" : 337, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Will be removed in the next major release*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f00", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/DataPoints.java", 
    "filehash" : 2343184586, 
    "comments" : [
        {
            "id" : 305, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* Annotating an array or iterable-typed field or method with &amp;#064;DataPoints\n* will cause the values in the array or iterable given to be used as potential\n* parameters for theories in that class when run with the\n* @link org.junit.experimental.theories.Theories Theories} runner.\n* <p>\n* DataPoints will only be considered as potential values for parameters for\n* which their types are assignable. When multiple sets of DataPoints exist with\n* overlapping types more control can be obtained by naming the DataPoints using\n* the value of this annotation, e.g. with\n* <code>&amp;#064;DataPoints(\"dataset1\", \"dataset2\"})</code>, and then specifying\n* which named set to consider as potential values for each parameter using the\n* @link org.junit.experimental.theories.FromDataPoints &amp;#064;FromDataPoints}\n* annotation.\n* <p>\n* Parameters with no specified source (i.e. without &amp;#064;FromDataPoints or\n* other @link org.junit.experimental.theories.ParametersSuppliedBy\n* &amp;#064;ParameterSuppliedBy} annotations) will use all DataPoints that are\n* assignable to the parameter type as potential values, including named sets of\n* DataPoints.\n* <p>\n* DataPoints methods whose array types aren't assignable from the target\n* parameter type (and so can't possibly return relevant values) will not be\n* called when generating values for that parameter. Iterable-typed datapoints\n* methods must always be called though, as this information is not available\n* here after generic type erasure, so expensive methods returning iterable\n* datapoints are a bad idea.\n*\n* <pre>\n* &amp;#064;DataPoints\n* public static String[] dataPoints = new String[]  ... };\n*\n* &amp;#064;DataPoints\n* public static String[] generatedDataPoints()\n* return new String[]  ... };\n* }\n*\n* &amp;#064;Theory\n* public void theoryMethod(String param)\n* ...\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theories\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.FromDataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "bad idea", 
                    "score" : 3.0, 
                    "class" : "Adj + Noun", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f01", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 323, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n*\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f02", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/DisableOnDebugTest.java", 
    "filehash" : 2158225611, 
    "comments" : [
        {
            "id" : 840, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Nasty rule that always fails*/", 
            "class" : "public class DisableOnDebugTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f03", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/rules/RuleMemberValidatorTest.java", 
    "filehash" : 2940949647, 
    "comments" : [
        {
            "id" : 888, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* If there is any property annotated with @ClassRule then it must implement\n* @link TestRule}\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit/issues/1019\">Issue #1019</a>*/", 
            "class" : "static class NonPublicTestWithClassRule", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 890, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* If there is any property annotated with @ClassRule then it must implement\n* @link TestRule}\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit/issues/1019\">Issue #1019</a>*/", 
            "class" : "public static class TestWithClassRuleMethodThatReturnsMethodRule", 
            "method" : "public Statement apply(Statement base, FrameworkMethod method, Object target)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f04", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 320, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.\n*\n* <p>For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f05", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 401, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing element\n* @deprecated Please use @link CoreMatchers#hasItem(Object)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 402, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing an element matching elementMatcher\n* @deprecated Please use @link CoreMatchers#hasItem(Matcher)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 403, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing every element in elements\n* @deprecated Please use @link CoreMatchers#hasItems(Object...)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 404, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)\n* @deprecated Please use @link CoreMatchers#hasItems(Matcher...)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 405, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection in which every element matches elementMatcher\n* @deprecated Please use @link CoreMatchers#everyItem(Matcher)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 406, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return a matcher matching any string that contains substring\n* @deprecated Please use @link CoreMatchers#containsString(String)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 407, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* This is useful for fluently combining matchers that must both pass. For example:\n* <pre>\n* assertThat(string, both(containsString(\"a\")).and(containsString(\"b\")));\n* </pre>\n*\n* @deprecated Please use @link CoreMatchers#both(Matcher)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 408, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* This is useful for fluently combining matchers where either may pass, for example:\n* <pre>\n* assertThat(string, either(containsString(\"a\")).or(containsString(\"b\")));\n* </pre>\n*\n* @deprecated Please use @link CoreMatchers#either(Matcher)} instead.*/", 
            "class" : "public class JUnitMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f06", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 616, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n*\n* <p>The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f07", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 623, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 11.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n* <p>\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>\n* <p>\n* In turn, in 2009 we introduced @link Rule}s. In many cases where extending\n* BlockJUnit4ClassRunner was necessary to add new behavior, @link Rule}s can\n* be used, which makes the extension more reusable and composable.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 627, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateNoNonStaticInnerClass(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 632, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 634, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @code createTest()}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* expecting} attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the\n* above steps. A @code Rule} may prevent all execution of the above steps,\n* or add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link TestRule}\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 639, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f08", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 351, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next major release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f09", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 284, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0a", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/FromDataPoints.java", 
    "filehash" : 3313684027, 
    "comments" : [
        {
            "id" : 306, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Annotating a parameter of a @link org.junit.experimental.theories.Theory\n* &amp;#064;Theory} method with <code>&amp;#064;FromDataPoints</code> will limit the\n* datapoints considered as potential values for that parameter to just the\n* @link org.junit.experimental.theories.DataPoints DataPoints} with the given\n* name. DataPoint names can be given as the value parameter of the\n* &amp;#064;DataPoints annotation.\n* <p>\n* DataPoints without names will not be considered as values for any parameters\n* annotated with &amp;#064;FromDataPoints.\n* <pre>\n* &amp;#064;DataPoints\n* public static String[] unnamed = new String[]  ... };\n*\n* &amp;#064;DataPoints(\"regexes\")\n* public static String[] regexStrings = new String[]  ... };\n*\n* &amp;#064;DataPoints(\"forMatching\", \"alphanumeric\"})\n* public static String[] testStrings = new String[]  ... };\n*\n* &amp;#064;Theory\n* public void stringTheory(String param)\n* // This will be called with every value in 'regexStrings',\n* // 'testStrings' and 'unnamed'.\n* }\n*\n* &amp;#064;Theory\n* public void regexTheory(&amp;#064;FromDataPoints(\"regexes\") String regex,\n* &amp;#064;FromDataPoints(\"forMatching\") String value)\n* // This will be called with only the values in 'regexStrings' as\n* // regex, only the values in 'testStrings' as value, and none\n* // of the values in 'unnamed'.\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.DataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0b", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/runner/ResultTest.java", 
    "filehash" : 3966759999, 
    "comments" : [
        {
            "id" : 832, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A version of @code Result} that returns a hard-coded runtime.\n* This makes values returned by the methods deterministic.*/", 
            "class" : "public class ResultTest extends TestCase", 
            "method" : "private void assertResultSerializable(Result result)", 
            "patterns" : [
                {
                    "name" : "hardcoded", 
                    "score" : 2.0, 
                    "class" : "Acronym", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 833, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Exceptions don't implement equals() so we need to compare field by field", 
            "class" : "private static class ResultWithFixedRunTime extends Result", 
            "method" : "private void assertSerializedCorrectly(Result result, Result fromStream)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0c", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java", 
    "filehash" : 3636538635, 
    "comments" : [
        {
            "id" : 886, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If there are multiple public methods annotated with @Rule returning a @link MethodRule}\n* then all the rules returned should be run.\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit/issues/589\">Issue #589</a> -\n* Support @Rule for methods works only for TestRule but not for MethodRule*/", 
            "class" : "public static class HasMultipleMethodsReturningMethodRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 887, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If there are any public methods annotated with @Rule returning a @link MethodRule}\n* then method should be called only once.\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit/issues/589\">Issue #589</a> -\n* Support @Rule for methods works only for TestRule but not for MethodRule*/", 
            "class" : "private static class Dummy implements MethodRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0d", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 605, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A <code>Result</code> collects and summarizes information from running multiple tests.\n* All tests are counted -- additional information is collected from tests that fail.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 613, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "@RunListener.ThreadSafe", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0e", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 413, 
            "total_pattern" : 15.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 16.7, 
            "comment" : "/**\n* Annotates fields that reference rules or methods that return a rule. A field must be public, not\n* static, and a subtype of @link org.junit.rules.TestRule} (preferred) or\n* @link org.junit.rules.MethodRule}. A method must be public, not static,\n* and must return a subtype of @link org.junit.rules.TestRule} (preferred) or\n* @link org.junit.rules.MethodRule}.\n* <p>\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link Before} methods,\n* then the @link Test} method, and finally any @link After} methods,\n* throwing an exception if any of these fail. If there are multiple\n* annotated @link Rule}s on a class, they will be applied in order of fields first, then methods.\n* However, if there are multiple fields (or methods) they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general. Rules defined by fields will always be applied\n* before Rules defined by methods. You can use a @link org.junit.rules.RuleChain} if you want\n* to have control over the order in which the Rules are applied.\n* <p>\n* For example, here is a test class that creates a temporary folder before\n* each test method, and deletes it after each:\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n* <p>\n* And the same using a method.\n* <pre>\n* public static class HasTempFolder\n* private TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Rule\n* public TemporaryFolder getFolder()\n* return folder;\n* }\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n* <p>\n* For more information and more examples, see\n* @link org.junit.rules.TestRule}.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f0f", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/Theories.java", 
    "filehash" : 2080580026, 
    "comments" : [
        {
            "id" : 315, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 1.84, 
            "total_score" : 11.84, 
            "comment" : "/**\n* The Theories runner allows to test a certain functionality against a subset of an infinite set of data points.\n* <p>\n* A Theory is a piece of functionality (a method) that is executed against several data inputs called data points.\n* To make a test method a theory you mark it with <b>&amp;#064;Theory</b>. To create a data point you create a public\n* field in your test class and mark it with <b>&amp;#064;DataPoint</b>. The Theories runner then executes your test\n* method as many times as the number of data points declared, providing a different data point as\n* the input argument on each invocation.\n* </p>\n* <p>\n* A Theory differs from standard test method in that it captures some aspect of the intended behavior in possibly\n* infinite numbers of scenarios which corresponds to the number of data points declared. Using assumptions and\n* assertions properly together with covering multiple scenarios with different data points can make your tests more\n* flexible and bring them closer to scientific theories (hence the name).\n* </p>\n* <p>\n* For example:\n* <pre>\n*\n* &amp;#064;RunWith(<b>Theories.class</b>)\n* public class UserTest\n* <b>&amp;#064;DataPoint</b>\n* public static String GOOD_USERNAME = \"optimus\";\n* <b>&amp;#064;DataPoint</b>\n* public static String USERNAME_WITH_SLASH = \"optimus/prime\";\n*\n* <b>&amp;#064;Theory</b>\n* public void filenameIncludesUsername(String username)\n* assumeThat(username, not(containsString(\"/\")));\n* assertThat(new User(username).configFileName(, containsString(username));\n* }\n* }\n* </pre>\n* This makes it clear that the user's filename should be included in the config file name,\n* only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n* a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n* point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n* assumptions pass, but an assertion fails, the test fails.\n* <p>\n* Defining general statements as theories allows data point reuse across a bunch of functionality tests and also\n* allows automated tools to search for new, unexpected data points that expose bugs.\n* </p>\n* <p>\n* The support for Theories has been absorbed from the Popper project, and more complete documentation can be found\n* from that projects archived documentation.\n* </p>\n*\n* @see <a href=\"http://web.archive.org/web/20071012143326/popper.tigris.org/tutorial.html\">Archived Popper project documentation</a>\n* @see <a href=\"http://web.archive.org/web/20110608210825/http://shareandenjoy.saff.net/tdd-specifications.pdf\">Paper on Theories</a>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f10", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 652, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f11", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/Categories.java", 
    "filehash" : 1709308397, 
    "comments" : [
        {
            "id" : 250, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* From a given set of test classes, runs only the classes and methods that are\n* annotated with either the category given with the @IncludeCategory\n* annotation, or a subtype of that category.\n* <p>\n* Note that, for now, annotating suites with @code @Category} has no effect.\n* Categories must be annotated on the direct method or class.\n* <p>\n* Example:\n* <pre>\n* public interface FastTests\n* }\n*\n* public interface SlowTests\n* }\n*\n* public interface SmokeTests\n* }\n*\n* public static class A\n* &amp;#064;Test\n* public void a()\n* fail();\n* }\n*\n* &amp;#064;Category(SlowTests.class)\n* &amp;#064;Test\n* public void b()\n* }\n*\n* &amp;#064;Category(FastTests.class, SmokeTests.class})\n* &amp;#064;Test\n* public void c()\n* }\n* }\n*\n* &amp;#064;Category(SlowTests.class, FastTests.class})\n* public static class B\n* &amp;#064;Test\n* public void d()\n* }\n* }\n*\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(SlowTests.class)\n* &amp;#064;SuiteClasses(A.class, B.class})\n* // Note that Categories is a kind of Suite\n* public static class SlowTestSuite\n* // Will run A.b and B.d, but not A.a and A.c\n* }\n* </pre>\n* <p>\n* Example to run multiple categories:\n* <pre>\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(FastTests.class, SmokeTests.class})\n* &amp;#064;SuiteClasses(A.class, B.class})\n* public static class FastOrSmokeTestSuite\n* // Will run A.c and B.d, but not A.b because it is not any of FastTests or SmokeTests\n* }\n* </pre>\n*\n* @version 4.12\n* @see <a href=\"https://github.com/junit-team/junit/wiki/Categories\">Categories at JUnit wiki</a>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f12", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 679, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 681, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Always returns a runner, even if it is just one that prints an error instead of running tests.\n*\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a933926b8a9f9639f176f13", 
    "reference" : "r4.12", 
    "commit" : "64155f8a9babcfcf4263cf4d08253a1556e75481", 
    "commit_date" : "2014-12-04T16:13:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java", 
    "filehash" : 543004780, 
    "comments" : [
        {
            "id" : 311, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotating a @link org.junit.experimental.theories.Theory Theory} method\n* parameter with &amp;#064;ParametersSuppliedBy causes it to be supplied with\n* values from the named\n* @link org.junit.experimental.theories.ParameterSupplier ParameterSupplier}\n* when run as a theory by the @link org.junit.experimental.theories.Theories\n* Theories} runner.\n*\n* In addition, annotations themselves can be annotated with\n* &amp;#064;ParametersSuppliedBy, and then used similarly. ParameterSuppliedBy\n* annotations on parameters are detected by searching up this heirarchy such\n* that these act as syntactic sugar, making:\n*\n* <pre>\n* &amp;#064;ParametersSuppliedBy(Supplier.class)\n* public &amp;#064;interface SpecialParameter  }\n*\n* &amp;#064;Theory\n* public void theoryMethod(&amp;#064;SpecialParameter String param)\n* ...\n* }\n* </pre>\n*\n* equivalent to:\n*\n* <pre>\n* &amp;#064;Theory\n* public void theoryMethod(&amp;#064;ParametersSuppliedBy(Supplier.class) String param)\n* ...\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9e9", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TemporaryFolder.java", 
    "filehash" : 3647819635, 
    "comments" : [
        {
            "id" : 494, 
            "total_pattern" : 12.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 12.5, 
            "comment" : "/**\n* The TemporaryFolder Rule allows creation of files and folders that should\n* be deleted when the test method finishes (whether it passes or\n* fails).\n* By default no exception will be thrown in case the deletion fails.\n*\n* <p>Example of usage:\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n*\n* <p>TemporaryFolder rule supports assured deletion mode, which\n* will fail the test in case deletion fails with @link AssertionError}.\n*\n* <p>Creating TemporaryFolder with assured deletion:\n* <pre>\n* &amp;#064;Rule\n* public TemporaryFolder folder= TemporaryFolder.builder().assureDeletion().build();\n* </pre>\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 495, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Create a temporary folder which uses system default temporary-file\n* directory to create temporary resources.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 496, 
            "total_pattern" : 8.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 8.0, 
            "comment" : "/**\n* Create a temporary folder which uses the specified directory to create\n* temporary resources.\n*\n* @param parentFolder folder where temporary resources will be created.\n* If @code null} then system default temporary-file directory is used.*/", 
            "class" : "public class TemporaryFolder extends ExternalResource", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 500, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Specifies which folder to use for creating temporary resources.\n* If @code null} then system default temporary-file directory is\n* used.\n*\n* @return this*/", 
            "class" : "public static class Builder", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 505, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with the given name under the temporary folder.*/", 
            "class" : "public static class Builder", 
            "method" : "public void create()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 506, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh file with a random name under the temporary folder.*/", 
            "class" : "public static class Builder", 
            "method" : "public File newFile(String fileName)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 507, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with the given path under the temporary\n* folder.*/", 
            "class" : "public static class Builder", 
            "method" : "public File newFile()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 508, 
            "total_pattern" : 13.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 14.28, 
            "comment" : "/**\n* Returns a new fresh folder with the given paths under the temporary\n* folder. For example, if you pass in the strings @code \"parent\"} and @code \"child\"}\n* then a directory named @code \"parent\"} will be created under the temporary folder\n* and a directory named @code \"child\"} will be created under the newly-created\n* @code \"parent\"} directory.*/", 
            "class" : "public static class Builder", 
            "method" : "public File newFolder(String path)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 510, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Returns a new fresh folder with a random name under the temporary folder.*/", 
            "class" : "public static class Builder", 
            "method" : "public File newFolder(String... paths)", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 514, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Delete all files and folders under the temporary folder. Usually not\n* called directly, since it is automatically applied by the @link Rule}.\n*\n* @throws AssertionError if unable to clean up resources\n* and deletion of resources is assured.*/", 
            "class" : "public static class Builder", 
            "method" : "public File getRoot()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 515, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Tries to delete all files and folders under the temporary folder and\n* returns whether deletion was successful or not.\n*\n* @return @code true} if all resources are deleted successfully,\n* @code false} otherwise.*/", 
            "class" : "public static class Builder", 
            "method" : "public void delete()", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ea", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/SimpleTest.java", 
    "filehash" : 2678669351, 
    "comments" : [
        {
            "id" : 878, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// avoid warning for not using result", 
            "class" : "public class SimpleTest extends TestCase", 
            "method" : "public void testDivideByZero()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9eb", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/extensions/AllTests.java", 
    "filehash" : 3723617698, 
    "comments" : [
        {
            "id" : 882, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.24, 
            "comment" : "// Collect tests manually because we have to test class collection code", 
            "class" : "public class AllTests", 
            "method" : "public static Test suite()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ec", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/management/ManagementFactory.java", 
    "filehash" : 1651786503, 
    "comments" : [
        {
            "id" : 360, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, managementFactoryClass will be none on failure", 
            "class" : "private static final class FactoryHolder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ed", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/DataPoint.java", 
    "filehash" : 1158314685, 
    "comments" : [
        {
            "id" : 312, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 6.2, 
            "comment" : "/**\n* Annotating an field or method with &amp;#064;DataPoint will cause the field value\n* or the value returned by the method to be used as a potential parameter for\n* theories in that class, when run with the\n* @link org.junit.experimental.theories.Theories Theories} runner.\n* <p>\n* A DataPoint is only considered as a potential value for parameters for\n* which its type is assignable. When multiple @code DataPoint}s exist\n* with overlapping types more control can be obtained by naming each DataPoint\n* using the value of this annotation, e.g. with\n* <code>&amp;#064;DataPoint(\"dataset1\", \"dataset2\"})</code>, and then specifying\n* which named set to consider as potential values for each parameter using the\n* @link org.junit.experimental.theories.FromDataPoints &amp;#064;FromDataPoints}\n* annotation.\n* <p>\n* Parameters with no specified source (i.e. without &amp;#064;FromDataPoints or\n* other @link org.junit.experimental.theories.ParametersSuppliedBy\n* &amp;#064;ParameterSuppliedBy} annotations) will use all @code DataPoint}s that are\n* assignable to the parameter type as potential values, including named sets of\n* @code DataPoint}s.\n*\n* <pre>\n* &amp;#064;DataPoint\n* public static String dataPoint = \"value\";\n*\n* &amp;#064;DataPoint(\"generated\")\n* public static String generatedDataPoint()\n* return \"generated value\";\n* }\n*\n* &amp;#064;Theory\n* public void theoryMethod(String param)\n* ...\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theories\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.FromDataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ee", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ClassRule.java", 
    "filehash" : 2048863491, 
    "comments" : [
        {
            "id" : 245, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Annotates static fields that reference rules or methods that return them. A field must be public,\n* static, and a subtype of @link org.junit.rules.TestRule}. A method must be public static, and return\n* a subtype of @link org.junit.rules.TestRule}.\n* <p>\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link BeforeClass} methods,\n* then the entire body of the test class (all contained methods, if it is\n* a standard JUnit test class, or all contained classes, if it is a\n* @link org.junit.runners.Suite}, and finally any @link AfterClass} methods.\n* <p>\n* The statement passed to the @link org.junit.rules.TestRule} will never throw an exception,\n* and throwing an exception from the @link org.junit.rules.TestRule} will result in undefined\n* behavior. This means that some @link org.junit.rules.TestRule}s, such as\n* @link org.junit.rules.ErrorCollector},\n* @link org.junit.rules.ExpectedException},\n* and @link org.junit.rules.Timeout},\n* have undefined behavior when used as @link ClassRule}s.\n* <p>\n* If there are multiple\n* annotated @link ClassRule}s on a class, they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general. However, Rules defined by fields will always be applied\n* after Rules defined by methods, i.e. the Statements returned by the former will\n* be executed around those returned by the latter.\n* <p>\n* For example, here is a test suite that connects to a server once before\n* all the test classes run, and disconnects after they are finished:\n* <pre>\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource resource= new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* }\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* }\n* };\n* }\n* </pre>\n* <p>\n* and the same using a method\n* <pre>\n* &amp;#064;RunWith(Suite.class)\n* &amp;#064;SuiteClasses(A.class, B.class, C.class})\n* public class UsesExternalResource\n* public static Server myServer= new Server();\n*\n* &amp;#064;ClassRule\n* public static ExternalResource getResource()\n* return new ExternalResource()\n* &amp;#064;Override\n* protected void before() throws Throwable\n* myServer.connect();\n* }\n*\n* &amp;#064;Override\n* protected void after()\n* myServer.disconnect();\n* }\n* };\n* }\n* }\n* </pre>\n* <p>\n* For more information and more examples, see @link org.junit.rules.TestRule}.\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ef", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java", 
    "filehash" : 723073644, 
    "comments" : [
        {
            "id" : 321, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotating a @link org.junit.experimental.theories.Theory Theory} method int\n* parameter with &amp;#064;TestedOn causes it to be supplied with values from the\n* ints array given when run as a theory by the\n* @link org.junit.experimental.theories.Theories Theories} runner. For\n* example, the below method would be called three times by the Theories runner,\n* once with each of the int parameters specified.\n*\n* <pre>\n* &amp;#064;Theory\n* public void shouldPassForSomeInts(&amp;#064;TestedOn(ints=1, 2, 3}) int param)\n* ...\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "would be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f0", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/FixMethodOrder.java", 
    "filehash" : 3900612963, 
    "comments" : [
        {
            "id" : 326, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* This class allows the user to choose the order of execution of the methods within a test class.\n*\n* <p>The default order of execution of JUnit tests within a class is deterministic but not predictable.\n* The order of execution is not guaranteed for Java 7 (and some previous versions, and can even change\n* from run to run, so the order of execution was changed to be deterministic (in JUnit 4.11)\n*\n* <p>It is recommended that test methods be written so that they are independent of the order that they are executed.\n* However, there may be a number of dependent tests either through error or by design.\n* This class allows the user to specify the order of execution of test methods.\n*\n* <p>For possibilities, see @link MethodSorters}\n*\n* Here is an example:\n*\n* <pre>\n* &amp;#064;FixMethodOrder(MethodSorters.NAME_ASCENDING)\n* public class MyTest\n* }\n* </pre>\n*\n* @see org.junit.runners.MethodSorters\n* @since 4.11*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f1", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/assertion/AssertionTest.java", 
    "filehash" : 2653396237, 
    "comments" : [
        {
            "id" : 986, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// If you want to use 1.4 assertions, they will be reported correctly.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 987, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// However, you need to add the -ea VM argument when running.", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 988, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// @Test (expected=AssertionError.class) public void error() assert false; }", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 989, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// int by default, cast is unnecessary", 
            "class" : "public class AssertionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "unnecessary", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f2", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java", 
    "filehash" : 1408914963, 
    "comments" : [
        {
            "id" : 1007, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "// Not annotated as a DataPoint and therefore should be ignored:", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f3", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/validator/ValidateWith.java", 
    "filehash" : 3485280202, 
    "comments" : [
        {
            "id" : 842, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Allows for an @link AnnotationValidator} to be attached to an annotation.\n*\n* <p>When attached to an annotation, the validator will be instantiated and invoked\n* by the @link org.junit.runners.ParentRunner}.</p>\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f4", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestRule.java", 
    "filehash" : 3520460052, 
    "comments" : [
        {
            "id" : 519, 
            "total_pattern" : 19.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 20.78, 
            "comment" : "/**\n* A TestRule is an alteration in how a test method, or set of test methods,\n* is run and reported. A @link TestRule} may add additional checks that cause\n* a test that would otherwise fail to pass, or it may perform necessary setup or\n* cleanup for tests, or it may observe test execution to report it elsewhere.\n* @link TestRule}s can do everything that could be done previously with\n* methods annotated with @link org.junit.Before},\n* @link org.junit.After}, @link org.junit.BeforeClass}, or\n* @link org.junit.AfterClass}, but they are more powerful, and more easily\n* shared\n* between projects and classes.\n*\n* The default JUnit test runners for suites and\n* individual test cases recognize @link TestRule}s introduced in two different\n* ways. @link org.junit.Rule} annotates method-level\n* @link TestRule}s, and @link org.junit.ClassRule}\n* annotates class-level @link TestRule}s. See Javadoc for those annotations\n* for more information.\n*\n* Multiple @link TestRule}s can be applied to a test or suite execution. The\n* @link Statement} that executes the method or suite is passed to each annotated\n* @link org.junit.Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link org.junit.Rule}, if any. For\n* examples of how this can be useful, see these provided TestRules,\n* or write your own:\n*\n* <ul>\n* <li>@link ErrorCollector}: collect multiple errors in one test method</li>\n* <li>@link ExpectedException}: make flexible assertions about thrown exceptions</li>\n* <li>@link ExternalResource}: start and stop a server, for example</li>\n* <li>@link TemporaryFolder}: create fresh files, and delete after test</li>\n* <li>@link TestName}: remember the test name for use during the method</li>\n* <li>@link TestWatcher}: add logic at events during method execution</li>\n* <li>@link Timeout}: cause test to fail after a set time</li>\n* <li>@link Verifier}: fail test if object state ends up incorrect</li>\n* </ul>\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f5", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestResult.java", 
    "filehash" : 442103774, 
    "comments" : [
        {
            "id" : 93, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* A <code>TestResult</code> collects the results of executing\n* a test case. It is an instance of the Collecting Parameter pattern.\n* The test framework distinguishes between <i>failures</i> and <i>errors</i>.\n* A failure is anticipated and checked for with assertions. Errors are\n* unanticipated problems like an @link ArrayIndexOutOfBoundsException}.\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 94, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Adds an error to the list of errors. The passed in exception\n* caused the error.*/", 
            "class" : "public class TestResult", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 109, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Informs the result that a test will be started.*/", 
            "class" : "public class TestResult", 
            "method" : "public synchronized boolean shouldStop()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f6", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/ComparisonFailure.java", 
    "filehash" : 3923430781, 
    "comments" : [
        {
            "id" : 246, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when an @link org.junit.Assert#assertEquals(Object, Object) assertEquals(String, String)} fails.\n* Create and throw a <code>ComparisonFailure</code> manually if you want to show users the\n* difference between two complex strings.\n* <p/>\n* Inspired by a patch from Alex Chaffee (alex@purpletech.com)\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 247, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The maximum length for expected and actual strings. If it is exceeded, the strings should be shortened.\n*\n* @see ComparisonCompactor*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 248, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*\n* We have to use the f prefix until the next major release to ensure\n* serialization compatibility.\n* See https://github.com/junit-team/junit4/issues/976*/", 
            "class" : "public class ComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to use", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f7", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/InitializationError.java", 
    "filehash" : 1574988475, 
    "comments" : [
        {
            "id" : 741, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Represents one or more problems encountered while initializing a Runner\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 744, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns one or more Throwables that led to this initialization error.*/", 
            "class" : "public class InitializationError extends Exception", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f8", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/samples/SimpleTest.java", 
    "filehash" : 336009984, 
    "comments" : [
        {
            "id" : 984, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Some simple tests.\n*\n* <p>This test is expected to fail.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9f9", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatcher.java", 
    "filehash" : 4088168215, 
    "comments" : [
        {
            "id" : 521, 
            "total_pattern" : 3.75, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.75, 
            "comment" : "/**\n* TestWatcher is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public TestWatcher watchman= new TestWatcher()\n* &amp;#064;Override\n* protected void failed(Throwable e, Description description)\n* watchedLog+= description + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* protected void succeeded(Description description)\n* watchedLog+= description + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @since 4.9*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 523, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Invoked when a test is skipped due to a failed assumption.\n*\n* @deprecated use @link #skipped(AssumptionViolatedException, Description)}*/", 
            "class" : "public abstract class TestWatcher implements TestRule", 
            "method" : "protected void skipped(AssumptionViolatedException e, Description description)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9fa", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Test.java", 
    "filehash" : 123284984, 
    "comments" : [
        {
            "id" : 60, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Test</em> can be run and collect its results.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 61, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Counts the number of test cases that will be run by this test.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9fb", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/StoppedByUserException.java", 
    "filehash" : 4259106001, 
    "comments" : [
        {
            "id" : 650, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Thrown when a user has requested that the test run stop. Writers of\n* test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.\n*\n* @see org.junit.runner.notification.RunNotifier\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9fc", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/StacktracePrintingMatcher.java", 
    "filehash" : 3264485415, 
    "comments" : [
        {
            "id" : 372, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* A matcher that delegates to throwableMatcher and in addition appends the\n* stacktrace of the actual Throwable in case of a mismatch.\n*\n* @deprecated use @code org.hamcrest.junit.JunitMatchers.isThrowable()}\n* or @code org.hamcrest.junit.JunitMatchers.isException()}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9fd", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/Stopwatch.java", 
    "filehash" : 1818549372, 
    "comments" : [
        {
            "id" : 487, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.\n*\n* <p>Override them to get the time in nanoseconds. For example, this class will keep logging the\n* time spent by each passed, failed, skipped, and finished test:\n*\n* <pre>\n* public static class StopwatchTest\n* private static final Logger logger = Logger.getLogger(&amp;quot;&amp;quot;);\n*\n* private static void logInfo(Description description, String status, long nanos)\n* String testName = description.getMethodName();\n* logger.info(String.format(&amp;quot;Test %s %s, spent %d microseconds&amp;quot;,\n* testName, status, TimeUnit.NANOSECONDS.toMicros(nanos)));\n* }\n*\n* &amp;#064;Rule\n* public Stopwatch stopwatch = new Stopwatch()\n* &amp;#064;Override\n* protected void succeeded(long nanos, Description description)\n* logInfo(description, &amp;quot;succeeded&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void failed(long nanos, Throwable e, Description description)\n* logInfo(description, &amp;quot;failed&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void skipped(long nanos, AssumptionViolatedException e, Description description)\n* logInfo(description, &amp;quot;skipped&amp;quot;, nanos);\n* }\n*\n* &amp;#064;Override\n* protected void finished(long nanos, Description description)\n* logInfo(description, &amp;quot;finished&amp;quot;, nanos);\n* }\n* };\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void skips()\n* assumeTrue(false);\n* }\n* }\n* </pre>\n*\n* An example to assert runtime:\n* <pre>\n* &amp;#064;Test\n* public void performanceTest() throws InterruptedException\n* long delta = 30;\n* Thread.sleep(300L);\n* assertEquals(300d, stopwatch.runtime(MILLISECONDS, delta);\n* Thread.sleep(500L);\n* assertEquals(800d, stopwatch.runtime(MILLISECONDS, delta);\n* }\n* </pre>\n*\n* @author tibor17\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 490, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test fails*/", 
            "class" : "public class Stopwatch implements TestRule", 
            "method" : "protected void succeeded(long nanos, Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9fe", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/TestWatchman.java", 
    "filehash" : 2273593498, 
    "comments" : [
        {
            "id" : 525, 
            "total_pattern" : 7.25, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.25, 
            "comment" : "/**\n* TestWatchman is a base class for Rules that take note of the testing\n* action, without modifying it. For example, this class will keep a log of each\n* passing and failing test:\n*\n* <pre>\n* public static class WatchmanTest\n* private static String watchedLog;\n*\n* &amp;#064;Rule\n* public MethodRule watchman= new TestWatchman()\n* &amp;#064;Override\n* public void failed(Throwable e, FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + e.getClass().getSimpleName()\n* + &amp;quot;/n&amp;quot;;\n* }\n*\n* &amp;#064;Override\n* public void succeeded(FrameworkMethod method)\n* watchedLog+= method.getName() + &amp;quot; &amp;quot; + &amp;quot;success!/n&amp;quot;;\n* }\n* };\n*\n* &amp;#064;Test\n* public void fails()\n* fail();\n* }\n*\n* &amp;#064;Test\n* public void succeeds()\n* }\n* }\n* </pre>\n*\n* @since 4.7\n* @deprecated Use @link TestWatcher} (which implements @link TestRule}) instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 527, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoked when a test method fails*/", 
            "class" : "@Deprecated", 
            "method" : "public void succeeded(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6c9ff", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/Throwables.java", 
    "filehash" : 2141092837, 
    "comments" : [
        {
            "id" : 435, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Rethrows the given @code Throwable}, allowing the caller to\n* declare that it throws @code Exception}. This is useful when\n* your callers have nothing reasonable they can do when a\n* @code Throwable} is thrown. This is declared to return @code Exception}\n* so it can be used in a @code throw} clause:\n* <pre>\n* try\n* doSomething();\n* } catch (Throwable e}\n* throw Throwables.rethrowAsException(e);\n* }\n* doSomethingLater();\n* </pre>\n*\n* @param e exception to rethrow\n* @return does not return anything\n* @since 4.12*/", 
            "class" : "public final class Throwables", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 438, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// We should never get here, because we are reading from a StringReader", 
            "class" : "public final class Throwables", 
            "method" : "private static List<String> getCauseStackTraceLines(Throwable exception)", 
            "patterns" : [
                {
                    "name" : "should never", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "task should not be done", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca00", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Computer.java", 
    "filehash" : 377765553, 
    "comments" : [
        {
            "id" : 544, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Represents a strategy for computing runners and suites.\n* WARNING: this class is very likely to undergo serious changes in version 4.8 and\n* beyond.\n*\n* @since 4.6*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 547, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/*\n* #1320 The generated suite is not based on a real class so\n* only a 'null' description can be generated from it. This name\n* will be overridden here.*/", 
            "class" : "public class Computer", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca01", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java", 
    "filehash" : 1194860544, 
    "comments" : [
        {
            "id" : 373, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* A matcher that applies a delegate matcher to the cause of the current Throwable, returning the result of that\n* match.\n*\n* @param <T> the type of the throwable being matched\n* @deprecated use @code org.hamcrest.junit.ExpectedException}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca02", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/PrintableResult.java", 
    "filehash" : 2619987268, 
    "comments" : [
        {
            "id" : 297, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A test result that prints nicely in error messages.\n* This is only intended to be used in JUnit self-tests.\n* For example:\n*\n* <pre>\n* assertThat(testResult(HasExpectedException.class, isSuccessful());\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca03", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/validator/AnnotationValidator.java", 
    "filehash" : 1247169451, 
    "comments" : [
        {
            "id" : 832, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Validates annotations on classes and methods. To be validated,\n* an annotation should be annotated with @link ValidateWith}\n*\n* Instances of this class are shared by multiple test runners, so they should\n* be immutable and thread-safe.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca04", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/MoneyBag.java", 
    "filehash" : 4084878076, 
    "comments" : [
        {
            "id" : 858, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A MoneyBag defers exchange rate conversions. For example adding\n* 12 Swiss Francs to 14 US Dollars is represented as a bag\n* containing the two Monies 12 CHF and 14 USD. Adding another\n* 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to\n* the deferred exchange rate conversion we can later value a\n* MoneyBag with different exchange rates.\n*\n* A MoneyBag is represented as a list of Monies and provides\n* different constructors to create a MoneyBag.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "later", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca05", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filter.java", 
    "filehash" : 344456979, 
    "comments" : [
        {
            "id" : 605, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Invoke with a @link org.junit.runner.Runner} to cause all tests it intends to run\n* to first be checked with the filter. Only those that pass the filter will be run.\n*\n* @param child the runner to be filtered by the receiver\n* @throws NoTestsRemainException if the receiver removes all tests*/", 
            "class" : "public abstract class Filter", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca06", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestTimedOutException.java", 
    "filehash" : 61165271, 
    "comments" : [
        {
            "id" : 773, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Exception thrown when a test fails on timeout.\n*\n* @since 4.12\n**/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca07", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/AssertTest.java", 
    "filehash" : 3591743889, 
    "comments" : [
        {
            "id" : 887, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/* In the tests that follow, we can't use standard formatting\n* for exception tests:\n* try\n* somethingThatShouldThrow();\n* fail();\n* catch (AssertionFailedError e)\n* }\n* because fail() would never be reported.*/", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 888, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 889, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testFail()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 890, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 891, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithNoMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 892, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "// Also, we are testing fail, so we can't rely on fail() working.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 893, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// We have to throw the exception manually.", 
            "class" : "public class AssertTest extends TestCase", 
            "method" : "public void testAssertionFailedErrorToStringWithMessage()", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca08", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Assert.java", 
    "filehash" : 3279340252, 
    "comments" : [
        {
            "id" : 10, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* A set of assert methods. Messages are only displayed when an assert fails.\n*\n* @deprecated Please use @link org.junit.Assert} instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "assert fails", 
                    "score" : 3.0, 
                    "class" : "Expression", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 16, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.*/", 
            "class" : "@Deprecated", 
            "method" : "static public void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 17, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with no message.*/", 
            "class" : "@Deprecated", 
            "method" : "static public void fail(String message)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca09", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Filterable.java", 
    "filehash" : 30341553, 
    "comments" : [
        {
            "id" : 607, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Runners that allow filtering should implement this interface. Implement @link #filter(Filter)}\n* to remove tests that don't pass the filter.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Before.java", 
    "filehash" : 2789248775, 
    "comments" : [
        {
            "id" : 243, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* When writing tests, it is common to find that several tests need similar\n* objects created before they can run. Annotating a <code>public void</code> method\n* with <code>&amp;#064;Before</code> causes that method to be run before the @link org.junit.Test} method.\n* The <code>&amp;#064;Before</code> methods of superclasses will be run before those of the current class,\n* unless they are overridden in the current class. No other ordering is defined.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* List empty;\n* &amp;#064;Before public void initialize()\n* empty= new ArrayList();\n* }\n* &amp;#064;Test public void size()\n* ...\n* }\n* &amp;#064;Test public void remove()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.After\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AfterClass.java", 
    "filehash" : 24832208, 
    "comments" : [
        {
            "id" : 167, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you allocate expensive external resources in a @link org.junit.BeforeClass} method you need to release them\n* after all the tests in the class have run. Annotating a <code>public static void</code> method\n* with <code>&amp;#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&amp;#064;AfterClass</code>\n* methods are guaranteed to run even if a @link org.junit.BeforeClass} method throws an\n* exception. The <code>&amp;#064;AfterClass</code> methods declared in superclasses will be run after those of the current\n* class, unless they are shadowed in the current class.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* private static DatabaseConnection database;\n* &amp;#064;BeforeClass public static void login()\n* database= ...;\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;Test public void somethingElse()\n* ...\n* }\n* &amp;#064;AfterClass public static void logout()\n* database.logout();\n* }\n* }\n* </pre>\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Test\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/AssumptionViolatedException.java", 
    "filehash" : 2549250296, 
    "comments" : [
        {
            "id" : 238, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* An exception class used to implement <i>assumptions</i> (state in which a given test\n* is meaningful and should or should not be executed). A test for which an assumption\n* fails should not generate a test case failure.\n*\n* @see org.junit.Assume\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/Annotatable.java", 
    "filehash" : 2089749227, 
    "comments" : [
        {
            "id" : 713, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* A model element that may have annotations.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may have", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/JUnit4.java", 
    "filehash" : 1044950791, 
    "comments" : [
        {
            "id" : 707, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Aliases the current default JUnit 4 class runner, for future-proofing. If\n* future versions of JUnit change the default Runner class, they will also\n* change the definition of this class. Developers wanting to explicitly tag a\n* class as a JUnit 4 class should use @code @RunWith(JUnit4.class)}, not,\n* for example in JUnit 4.5, @code @RunWith(BlockJUnit4ClassRunner.class)}.\n* This is the only way this class should be used--any extension that\n* depends on the implementation details of this class is likely to break\n* in future versions.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca0f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/Theory.java", 
    "filehash" : 1465182915, 
    "comments" : [
        {
            "id" : 325, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Marks test methods that should be read as theories by the @link org.junit.experimental.theories.Theories Theories} runner.\n*\n* @see org.junit.experimental.theories.Theories*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca10", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assume.java", 
    "filehash" : 2410208851, 
    "comments" : [
        {
            "id" : 227, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* A set of methods useful for stating assumptions about the conditions in which a test is meaningful.\n* A failed assumption does not mean the code is broken, but that the test provides no useful information. Assume\n* basically means \"don't run this test if these conditions don't apply\". The default JUnit runner skips tests with\n* failing assumptions. Custom runners may behave differently.\n* <p>\n* A good example of using assumptions is in <a href=\"https://github.com/junit-team/junit4/wiki/Theories\">Theories</a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case.\n* </p>\n* Failed assumptions are usually not logged, because there may be many tests that don't apply to certain\n* configurations.\n*\n* <p>\n* These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they\n* read better if they are referenced through static import:<br/>\n* <pre>\n* import static org.junit.Assume.*;\n* ...\n* assumeTrue(...);\n* </pre>\n* </p>\n*\n* @see <a href=\"https://github.com/junit-team/junit4/wiki/Theories\">Theories</a>\n*\n* @since 4.4*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 228, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Do not instantiate.\n* @deprecated since 4.13.*/", 
            "class" : "public class Assume", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 234, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers\n* @deprecated use @code org.hamcrest.junit.MatcherAssume.assumeThat()}*/", 
            "class" : "public class Assume", 
            "method" : "public static void assumeNotNull(Object... objects)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 235, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n* If not, the test halts and is ignored.\n* Example:\n* <pre>:\n* assumeThat(\"alwaysPasses\", 1, is(1)); // passes\n* foo(); // will execute\n* assumeThat(\"alwaysFails\", 0, is(1)); // assumption failure! test halts\n* int x = 1 / 0; // will never execute\n* </pre>\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as @code assumeThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed values\n* @see org.hamcrest.CoreMatchers\n* @see org.junit.matchers.JUnitMatchers\n* @deprecated use @code org.hamcrest.junit.MatcherAssume.assumeThat()}*/", 
            "class" : "public class Assume", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca11", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestFailure.java", 
    "filehash" : 97383699, 
    "comments" : [
        {
            "id" : 85, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a String containing the stack trace of the error\n* thrown by TestFailure.*/", 
            "class" : "public class TestFailure", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 87, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns @code true} if the error is considered a failure\n* (i.e. if it is an instance of @code AssertionFailedError}),\n* @code false} otherwise.*/", 
            "class" : "public class TestFailure", 
            "method" : "public String exceptionMessage()", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca12", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/TemporaryFolderRuleAssuredDeletionTest.java", 
    "filehash" : 3547879927, 
    "comments" : [
        {
            "id" : 961, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Don't need to create as we are overriding deletion.*/", 
            "class" : "private static class StubTemporaryFolder extends TemporaryFolder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 962, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* Simulates failure to clean-up temporary folder.*/", 
            "class" : "private static class StubTemporaryFolder extends TemporaryFolder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca13", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/function/ThrowingRunnable.java", 
    "filehash" : 2116241288, 
    "comments" : [
        {
            "id" : 328, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* This interface facilitates the use of expectThrows from Java 8. It allows method references\n* to void methods (that declare checked exceptions) to be passed directly into expectThrows\n* without wrapping. It is not meant to be implemented directly.\n*\n* @since 4.13*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "to be implemented", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "need to implement or it wasnt well implemented", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca14", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/RuleMemberValidatorTest.java", 
    "filehash" : 1611667281, 
    "comments" : [
        {
            "id" : 953, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* If there is any property annotated with @ClassRule then it must implement\n* @link TestRule}\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit4/issues/1019\">Issue #1019</a>*/", 
            "class" : "static class NonPublicTestWithClassRule", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 955, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* If there is any property annotated with @ClassRule then it must implement\n* @link TestRule}\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit4/issues/1019\">Issue #1019</a>*/", 
            "class" : "public static class TestWithClassRuleMethodThatReturnsMethodRule", 
            "method" : "public Statement apply(Statement base, FrameworkMethod method, Object target)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca15", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ExpectedException.java", 
    "filehash" : 3237762205, 
    "comments" : [
        {
            "id" : 468, 
            "total_pattern" : 26.5, 
            "total_heuristic" : 4.88, 
            "total_score" : 31.38, 
            "comment" : "/**\n* The @code ExpectedException} rule allows you to verify that your code\n* throws a specific exception. Note that, starting with Java 8,\n* @link org.junit.Assert#assertThrows(java.lang.Class, org.junit.function.ThrowingRunnable)\n* Assert.assertThrows}\n* is often a better choice since it allows you to express exactly where you\n* expect the exception to be thrown. Use\n* @link org.junit.Assert#expectThrows(java.lang.Class,\n* org.junit.function.ThrowingRunnable) expectThrows}\n* if you need to assert something about the thrown exception.\n*\n* <h3>Usage</h3>\n*\n* <pre> public class SimpleExpectedExceptionTest\n* &amp;#064;Rule\n* public ExpectedException thrown = ExpectedException.none();\n*\n* &amp;#064;Test\n* public void throwsNothing()\n* // no exception expected, none thrown: passes.\n* }\n*\n* &amp;#064;Test\n* public void throwsExceptionWithSpecificType()\n* thrown.expect(NullPointerException.class);\n* throw new NullPointerException();\n* }\n* }</pre>\n*\n* <p>You have to add the @code ExpectedException} rule to your test.\n* This doesn't affect your existing tests (see @code throwsNothing()}).\n* After specifying the type of the expected exception your test is\n* successful when such an exception is thrown and it fails if a\n* different or no exception is thrown.\n*\n* <p>This rule does not perform any special magic to make execution continue\n* as if the exception had not been thrown. So it is nearly always a mistake\n* for a test method to have statements after the one that is expected to\n* throw the exception.\n*\n* <p>Instead of specifying the exception's type you can characterize the\n* expected exception based on other criteria, too:\n*\n* <ul>\n* <li>The exception's message contains a specific text: @link #expectMessage(String)}</li>\n* <li>The exception's message complies with a Hamcrest matcher: @link #expectMessage(Matcher)}</li>\n* <li>The exception's cause complies with a Hamcrest matcher: @link #expectCause(Matcher)}</li>\n* <li>The exception itself complies with a Hamcrest matcher: @link #expect(Matcher)}</li>\n* </ul>\n*\n* <p>You can combine any of the presented expect-methods. The test is\n* successful if all specifications are met.\n* <pre> &amp;#064;Test\n* public void throwsException()\n* thrown.expect(NullPointerException.class);\n* thrown.expectMessage(&amp;quot;happened&amp;quot;);\n* throw new NullPointerException(&amp;quot;What happened?&amp;quot;);\n* }</pre>\n*\n* <h3>AssumptionViolatedExceptions</h3>\n* <p>JUnit uses @link AssumptionViolatedException}s for indicating that a test\n* provides no useful information. (See @link org.junit.Assume} for more\n* information.) You have to call @code assume} methods before you set\n* expectations of the @code ExpectedException} rule. In this case the rule\n* will not handle consume the exceptions and it can be handled by the\n* framework. E.g. the following test is ignored by JUnit's default runner.\n*\n* <pre> &amp;#064;Test\n* public void ignoredBecauseOfFailedAssumption()\n* assumeTrue(false); // throws AssumptionViolatedException\n* thrown.expect(NullPointerException.class);\n* }</pre>\n*\n* <h3>AssertionErrors</h3>\n*\n* <p>JUnit uses @link AssertionError}s for indicating that a test is failing. You\n* have to call @code assert} methods before you set expectations of the\n* @code ExpectedException} rule, if they should be handled by the framework.\n* E.g. the following test fails because of the @code assertTrue} statement.\n*\n* <pre> &amp;#064;Test\n* public void throwsUnhandled()\n* assertTrue(false); // throws AssertionError\n* thrown.expect(NullPointerException.class);\n* }</pre>\n*\n* <h3>Missing Exceptions</h3>\n* <p>By default missing exceptions are reported with an error message\n* like \"Expected test to throw an instance of foo\". You can configure a different\n* message by means of @link #reportMissingExceptionWithMessage(String)}. You\n* can use a @code %s} placeholder for the description of the expected\n* exception. E.g. \"Test doesn't throw %s.\" will fail with the error message\n* \"Test doesn't throw an instance of foo.\".\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to add", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "mistake", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 470, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* This method does nothing. Don't use it.\n* @deprecated AssertionErrors are handled by default since JUnit 4.12. Just\n* like in JUnit &amp;lt;= 4.10.*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "public static ExpectedException none()", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 471, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* This method does nothing. Don't use it.\n* @deprecated AssumptionViolatedExceptions are handled by default since\n* JUnit 4.12. Just like in JUnit &amp;lt;= 4.10.*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 472, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 6.7, 
            "comment" : "/**\n* Specifies the failure message for tests that are expected to throw\n* an exception but do not throw any. You can use a @code %s} placeholder for\n* the description of the expected exception. E.g. \"Test doesn't throw %s.\"\n* will fail with the error message\n* \"Test doesn't throw an instance of foo.\".\n*\n* @param message exception detail message\n* @return the rule itself*/", 
            "class" : "public class ExpectedException implements TestRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca16", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/runner/RequestTest.java", 
    "filehash" : 3565455092, 
    "comments" : [
        {
            "id" : 975, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* #1320 A root of a @link Description} produced by\n* @link Request#classes(Class...)} should be named \"classes\"*/", 
            "class" : "public class RequestTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca17", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestSuite.java", 
    "filehash" : 1335393075, 
    "comments" : [
        {
            "id" : 112, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* A <code>TestSuite</code> is a <code>Composite</code> of Tests.\n* It runs a collection of test cases. Here is an example using\n* the dynamic test definition.\n* <pre>\n* TestSuite suite= new TestSuite();\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* </pre>\n* <p>\n* Alternatively, a TestSuite can extract the tests to be run automatically.\n* To do so you pass the class of your TestCase class to the\n* TestSuite constructor.\n* <pre>\n* TestSuite suite= new TestSuite(MathTest.class);\n* </pre>\n* <p>\n* This constructor creates a suite with all the methods\n* starting with \"test\" that take no arguments.\n* <p>\n* A final option is to do the same for a large array of test classes.\n* <pre>\n* Class[] testClasses =  MathTest.class, AnotherTest.class };\n* TestSuite suite= new TestSuite(testClasses);\n* </pre>\n*\n* @see Test*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "large", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 115, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns a test which will fail and log a warning message.*/", 
            "class" : "public class TestSuite implements Test", 
            "method" : "public static Constructor<?> getTestConstructor(Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 119, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// Avoid generating multiple error messages", 
            "class" : "public class TestSuite implements Test", 
            "method" : "private void addTestsFromTestCase(final Class<?> theClass)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca18", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/Failure.java", 
    "filehash" : 778430577, 
    "comments" : [
        {
            "id" : 617, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A <code>Failure</code> holds a description of the failed test and the\n* exception that was thrown while running it. In most cases the @link org.junit.runner.Description}\n* will be of a single test. However, if problems are encountered while constructing the\n* test (for example, if a @link org.junit.BeforeClass} method is not static, it may describe\n* something other than a single test.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca19", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Description.java", 
    "filehash" : 1479090109, 
    "comments" : [
        {
            "id" : 551, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <code>Description</code> describes a test which is to be run or has been run. <code>Descriptions</code>\n* can be atomic (a single test) or compound (containing children tests). <code>Descriptions</code> are used\n* to provide feedback about the tests that are about to run (for example, the tree view\n* visible in many IDEs) or tests that have been run (for example, the failures view).\n* <p>\n* <code>Descriptions</code> are implemented as a single class rather than a Composite because\n* they are entirely informational. They contain no logic aside from counting their tests.\n* <p>\n* In the past, we used the raw @link junit.framework.TestCase}s and @link junit.framework.TestSuite}s\n* to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have\n* a superclass below @link Object}. We needed a way to pass a class and name together. Description\n* emerged from this.\n*\n* @see org.junit.runner.Request\n* @see org.junit.runner.Runner\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 552, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n*\n* @param name the name of the <code>Description</code>\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 553, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Create a <code>Description</code> named <code>name</code>.\n* Generally, you will add children to this <code>Description</code>.\n*\n* @param name the name of the <code>Description</code>\n* @param uniqueId an arbitrary object used to define uniqueness (in @link #equals(Object)}\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Annotation... annotations)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 554, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the 'class' named\n* <code>className</code>. Generally, this will be a leaf <code>Description</code>. This method is a better choice\n* than @link #createTestDescription(Class, String, Annotation...)} for test runners whose test cases are not\n* defined in an actual Java <code>Class</code>.\n*\n* @param className the class name of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(String name, Serializable uniqueId, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 555, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n*\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @param annotations meta-data about the test, for downstream interpreters\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(String className, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 556, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n* (This remains for binary compatibility with clients of JUnit 4.3)\n*\n* @param clazz the class of the test\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 557, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Create a <code>Description</code> of a single test named <code>name</code> in the class <code>clazz</code>.\n* Generally, this will be a leaf <code>Description</code>.\n*\n* @param name the name of the test (a method name for test annotated with @link org.junit.Test})\n* @return a <code>Description</code> named <code>name</code>*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createTestDescription(Class<?> clazz, String name)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 561, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Describes a step in the test-running mechanism that goes so wrong no\n* other description can be used (for example, an exception thrown from a Runner's\n* constructor*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public static Description createSuiteDescription(Class<?> testClass, Annotation... annotations)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 570, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* @return a copy of this description, with no children (on the assumption that some of the\n* children will be added back)*/", 
            "class" : "public class Description implements Serializable", 
            "method" : "public boolean isEmpty()", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunNotifier.java", 
    "filehash" : 3486371428, 
    "comments" : [
        {
            "id" : 637, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* If you write custom runners, you may need to notify JUnit of your progress running tests.\n* Do this by invoking the <code>RunNotifier</code> passed to your implementation of\n* @link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to\n* move @link #fireTestRunStarted(Description)} and @link #fireTestRunFinished(Result)}\n* to a separate class since they should only be called once per run.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 648, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Ask that the tests run stop before starting the next test. Phrased politely because\n* the test currently running will not be interrupted. It seems a little odd to put this\n* functionality here, but the <code>RunNotifier</code> is the only object guaranteed\n* to be shared amongst the many runners involved.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 649, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Internal use only. The Result's listener must be first.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/JUnitCommandLineParseResult.java", 
    "filehash" : 3009038395, 
    "comments" : [
        {
            "id" : 587, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Exception used if there's a problem parsing the command line.*/", 
            "class" : "class JUnitCommandLineParseResult", 
            "method" : "private Request applyFilterSpecs(Request request)", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/Timeout.java", 
    "filehash" : 2837671573, 
    "comments" : [
        {
            "id" : 529, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.14, 
            "comment" : "/**\n* The Timeout Rule applies the same timeout to all test methods in a class:\n* <pre>\n* public static class HasGlobalLongTimeout\n*\n* &amp;#064;Rule\n* public Timeout globalTimeout = Timeout.millis(20);\n*\n* &amp;#064;Test\n* public void run1() throws InterruptedException\n* Thread.sleep(100);\n* }\n*\n* &amp;#064;Test\n* public void infiniteLoop()\n* while (true) }\n* }\n* }\n* </pre>\n* <p>\n* Each test is run in a new thread. If the specified timeout elapses before\n* the test completes, its execution is interrupted via @link Thread#interrupt()}.\n* This happens in interruptable I/O and locks, and methods in @link Object}\n* and @link Thread} throwing @link InterruptedException}.\n* <p>\n* A specified timeout of 0 will be interpreted as not set, however tests will\n* still launch from separate threads. This can be useful for disabling timeouts\n* in environments where they are dynamically set based on some property.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 530, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a @code Timeout} instance with the timeout specified\n* in milliseconds.\n* <p>\n* This constructor is deprecated.\n* <p>\n* Instead use @link #Timeout(long, java.util.concurrent.TimeUnit)},\n* @link Timeout#millis(long)}, or @link Timeout#seconds(long)}.\n*\n* @param millis the maximum time in milliseconds to allow the\n* test to run before it should timeout*/", 
            "class" : "public class Timeout implements TestRule", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 537, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Creates a @link Statement} that will run the given\n* @code statement}, and timeout the operation based\n* on the values configured in this rule. Subclasses\n* can override this method for different behavior.\n*\n* @since 4.12*/", 
            "class" : "public class Timeout implements TestRule", 
            "method" : "protected final boolean getLookingForStuckThread()", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 539, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Specifies the time to wait before timing out the test.\n*\n* <p>If this is not called, or is called with a\n* @code timeout} of @code 0}, the returned @code Timeout}\n* rule instance will cause the tests to wait forever to\n* complete, however the tests will still launch from a\n* separate thread. This can be useful for disabling timeouts\n* in environments where they are dynamically set based on\n* some property.\n*\n* @param timeout the maximum time to wait\n* @param unit the time unit of the @code timeout} argument\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "@Override public void evaluate()", 
            "patterns" : [
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 540, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Specifies whether to look for a stuck thread. If a timeout occurs and this\n* feature is enabled, the rule will look for a thread that appears to be stuck\n* and dump its backtrace. This feature is experimental. Behavior may change\n* after the 4.12 release in response to feedback.\n*\n* @param enable @code true} to enable the feature\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "protected TimeUnit getTimeUnit()", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/manipulation/Sortable.java", 
    "filehash" : 931719456, 
    "comments" : [
        {
            "id" : 611, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Interface for runners that allow sorting of tests. By sorting tests based on when they last failed, most recently\n* failed first, you can reduce the average time to the first test failing. Test sorting should not be used to\n* cope with order dependencies between tests. Tests that are isolated from each other are less\n* expensive to maintain and can be run individually.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/notification/RunListener.java", 
    "filehash" : 2291135688, 
    "comments" : [
        {
            "id" : 626, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.5, 
            "comment" : "/**\n* Register an instance of this class with @link RunNotifier} to be notified\n* of events that occur during a test run. All of the methods in this class\n* are abstract and have no implementation; override one or more methods to\n* receive events.\n* <p>\n* For example, suppose you have a <code>Cowbell</code>\n* class that you want to make a noise whenever a test fails. You could write:\n* <pre>\n* public class RingingListener extends RunListener\n* public void testFailure(Failure failure)\n* Cowbell.ring();\n* }\n* }\n* </pre>\n* <p>\n* To invoke your listener, you need to run your tests through <code>JUnitCore</code>.\n* <pre>\n* public void main(String... args)\n* JUnitCore core= new JUnitCore();\n* core.addListener(new RingingListener());\n* core.run(MyTestClass.class);\n* }\n* </pre>\n* <p>\n* If a listener throws an exception for a test event, the other listeners will\n* have their @link RunListener#testFailure(Failure)} called with a @code Description}\n* of @link Description#TEST_MECHANISM} to indicate the failure.\n* <p>\n* By default, JUnit will synchronize calls to your listener. If your listener\n* is thread-safe and you want to allow JUnit to call your listener from\n* multiple threads when tests are run in parallel, you can annotate your\n* test class with @link RunListener.ThreadSafe}.\n* <p>\n* Listener methods will be called from the same thread as is running\n* the test, unless otherwise indicated by the method Javadoc\n*\n* @see org.junit.runner.JUnitCore\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 627, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called before any tests have been run. This may be called on an\n* arbitrary thread.\n*\n* @param description describes the tests to be run*/", 
            "class" : "public class RunListener", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 628, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when all tests have finished. This may be called on an\n* arbitrary thread.\n*\n* @param result the summary of the test run, including all the tests that failed*/", 
            "class" : "public class RunListener", 
            "method" : "public void testRunStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 630, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Called when a test suite has finished, whether the test suite succeeds or fails.\n* This method will not be called for a given @link Description} unless\n* @link #testSuiteStarted(Description)} was called for the same @code Description}.\n*\n* @param description the description of the test suite that just ran\n* @since 4.13*/", 
            "class" : "public class RunListener", 
            "method" : "public void testSuiteStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 632, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Called when an atomic test has finished, whether the test succeeds or fails.\n*\n* @param description the description of the test that just ran*/", 
            "class" : "public class RunListener", 
            "method" : "public void testStarted(Description description)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 633, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Called when an atomic test fails, or when a listener throws an exception.\n*\n* <p>In the case of a failure of an atomic test, this method will be called\n* with the same @code Description} passed to\n* @link #testStarted(Description)}, from the same thread that called\n* @link #testStarted(Description)}.\n*\n* <p>In the case of a listener throwing an exception, this will be called with\n* a @code Description} of @link Description#TEST_MECHANISM}, and may be called\n* on an arbitrary thread.\n*\n* @param failure describes the test that failed and the exception that was thrown*/", 
            "class" : "public class RunListener", 
            "method" : "public void testFinished(Description description)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 635, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Called when a test will not be run, generally because a test method is annotated\n* with @link org.junit.Ignore}.\n*\n* @param description describes the test that will not be run*/", 
            "class" : "public class RunListener", 
            "method" : "public void testAssumptionFailure(Failure failure)", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca1f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java", 
    "filehash" : 754926488, 
    "comments" : [
        {
            "id" : 1010, 
            "total_pattern" : 2.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.6, 
            "comment" : "// Have to explicitly set run here because the runner might independently run OneTest above", 
            "class" : "@RunWith(AllTests.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca20", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/ErrorCollector.java", 
    "filehash" : 3671316294, 
    "comments" : [
        {
            "id" : 462, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* The ErrorCollector rule allows execution of a test to continue after the\n* first problem is found (for example, to collect _all_ the incorrect rows in a\n* table, and report them all at once):\n*\n* <pre>\n* public static class UsesErrorCollectorTwice\n* &amp;#064;Rule\n* public ErrorCollector collector= new ErrorCollector();\n*\n* &amp;#064;Test\n* public void example()\n* collector.addError(new Throwable(&amp;quot;first thing went wrong&amp;quot;));\n* collector.addError(new Throwable(&amp;quot;second thing went wrong&amp;quot;));\n* collector.checkThat(getResult(, not(containsString(&amp;quot;ERROR!&amp;quot;)));\n* // all lines will run, and then a combined failure logged at the end.\n* }\n* }\n* </pre>\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "incorrect", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 463, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a Throwable to the table. Execution continues, but the test will fail at the end.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 464, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds a failure to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.\n*\n* @deprecated use @code org.hamcrest.junit.ErrorCollector.checkThat()}*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public void addError(Throwable error)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 465, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Adds a failure with the given @code reason}\n* to the table if @code matcher} does not match @code value}.\n* Execution continues, but the test will fail at the end if the match fails.\n*\n* @deprecated use @code org.hamcrest.junit.ErrorCollector.checkThat()}*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 466, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to the table the exception, if any, thrown from @code callable}.\n* Execution continues, but the test will fail at the end if\n* @code callable} threw an exception.*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public Object call()", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 467, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds a failure to the table if @code runnable} does not throw an\n* exception of type @code expectedThrowable} when executed.\n* Execution continues, but the test will fail at the end if the runnable\n* does not throw an exception, or if it throws a different exception.\n*\n* @param expectedThrowable the expected type of the exception\n* @param runnable a function that is expected to throw an exception when executed\n* @since 4.13*/", 
            "class" : "public class ErrorCollector extends Verifier", 
            "method" : "public <T> T checkSucceeds(Callable<T> callable)", 
            "patterns" : [
                {
                    "name" : "test will fail", 
                    "score" : 3.5, 
                    "class" : "modal + AV", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca21", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/framework/SuiteTest.java", 
    "filehash" : 2570130496, 
    "comments" : [
        {
            "id" : 903, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// 1 public test case + 1 warning for the non-public test case", 
            "class" : "public class SuiteTest extends TestCase", 
            "method" : "public void testNotPublicTestCase()", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca22", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Test.java", 
    "filehash" : 3205957044, 
    "comments" : [
        {
            "id" : 824, 
            "total_pattern" : 21.0, 
            "total_heuristic" : 2.56, 
            "total_score" : 23.56, 
            "comment" : "/**\n* The <code>Test</code> annotation tells JUnit that the <code>public void</code> method\n* to which it is attached can be run as a test case. To run the method,\n* JUnit first constructs a fresh instance of the class then invokes the\n* annotated method. Any exceptions thrown by the test will be reported\n* by JUnit as a failure. If no exceptions are thrown, the test is assumed\n* to have succeeded.\n* <p>\n* A simple test looks like this:\n* <pre>\n* public class Example\n* <b>&amp;#064;Test</b>\n* public void method()\n* org.junit.Assert.assertTrue( new ArrayList().isEmpty() );\n* }\n* }\n* </pre>\n* <p>\n* The <code>Test</code> annotation supports two optional parameters.\n* The first, <code>expected</code>, declares that a test method should throw\n* an exception. If it doesn't throw an exception or if it throws a different exception\n* than the one declared, the test fails. For example, the following test succeeds:\n* <pre>\n* &amp;#064;Test(<b>expected=IndexOutOfBoundsException.class</b>) public void outOfBounds()\n* new ArrayList&amp;lt;Object&amp;gt;().get(1);\n* }\n* </pre>\n* If the exception's message or one of its properties should be verified, the\n* @link org.junit.rules.ExpectedException ExpectedException} rule can be used. Further\n* information about exception testing can be found at the\n* <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit Wiki</a>.\n* <p>\n* The second optional parameter, <code>timeout</code>, causes a test to fail if it takes\n* longer than a specified amount of clock time (measured in milliseconds). The following test fails:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void infinity()\n* while(true);\n* }\n* </pre>\n* <b>Warning</b>: while <code>timeout</code> is useful to catch and terminate\n* infinite loops, it should <em>not</em> be considered deterministic. The\n* following test may or may not fail depending on how the operating system\n* schedules threads:\n* <pre>\n* &amp;#064;Test(<b>timeout=100</b>) public void sleep100()\n* Thread.sleep(100);\n* }\n* </pre>\n* <b>THREAD SAFETY WARNING:</b> Test methods with a timeout parameter are run in a thread other than the\n* thread which runs the fixture's @Before and @After methods. This may yield different behavior for\n* code that is not thread safe when compared to the same test method without a timeout parameter.\n* <b>Consider using the @link org.junit.rules.Timeout} rule instead</b>, which ensures a test method is run on the\n* same thread as the fixture's @Before and @After methods.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 826, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.14, 
            "comment" : "/**\n* Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed if\n* and only if an exception of the specified class is thrown by the method. If the Throwable's\n* message or one of its properties should be verified, the\n* @link org.junit.rules.ExpectedException ExpectedException} rule can be used instead.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be used instead", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 827, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Optionally specify <code>timeout</code> in milliseconds to cause a test method to fail if it\n* takes longer than that number of milliseconds.\n* <p>\n* <b>THREAD SAFETY WARNING:</b> Test methods with a timeout parameter are run in a thread other than the\n* thread which runs the fixture's @Before and @After methods. This may yield different behavior for\n* code that is not thread safe when compared to the same test method without a timeout parameter.\n* <b>Consider using the @link org.junit.rules.Timeout} rule instead</b>, which ensures a test method is run on the\n* same thread as the fixture's @Before and @After methods.\n* </p>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca23", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/After.java", 
    "filehash" : 179746494, 
    "comments" : [
        {
            "id" : 166, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* If you allocate external resources in a @link org.junit.Before} method you need to release them\n* after the test runs. Annotating a <code>public void</code> method\n* with <code>&amp;#064;After</code> causes that method to be run after the @link org.junit.Test} method. All <code>&amp;#064;After</code>\n* methods are guaranteed to run even if a @link org.junit.Before} or @link org.junit.Test} method throws an\n* exception. The <code>&amp;#064;After</code> methods declared in superclasses will be run after those of the current\n* class, unless they are overridden in the current class.\n* <p>\n* Here is a simple example:\n* <pre>\n* public class Example\n* File output;\n* &amp;#064;Before public void createOutputFile()\n* output= new File(...);\n* }\n* &amp;#064;Test public void something()\n* ...\n* }\n* &amp;#064;After public void deleteOutputFile()\n* output.delete();\n* }\n* }\n* </pre>\n*\n* @see org.junit.Before\n* @see org.junit.Test\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca24", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Request.java", 
    "filehash" : 4153050157, 
    "comments" : [
        {
            "id" : 657, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. The odd name is necessary because <code>class</code> is a reserved word.\n*\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request method(Class<?> clazz, String methodName)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 658, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Create a <code>Request</code> that, when processed, will run all the tests\n* in a class. If the class has a suite() method, it will be ignored.\n*\n* @param clazz the class containing the tests\n* @return a <code>Request</code> that will cause all tests in the class to be run*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request aClass(Class<?> clazz)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 661, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Creates a @link Request} that, when processed, will report an error for the given\n* test class with the given cause.*/", 
            "class" : "public abstract class Request", 
            "method" : "public static Request classes(Class<?>... classes)", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 666, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a Request whose Tests can be run in a certain order, defined by\n* <code>comparator</code>\n* <p>\n* For example, here is code to run a test suite in alphabetical order:\n* <pre>\n* private static Comparator&amp;lt;Description&amp;gt; forward()\n* return new Comparator&amp;lt;Description&amp;gt;()\n* public int compare(Description o1, Description o2)\n* return o1.getDisplayName().compareTo(o2.getDisplayName());\n* }\n* };\n* }\n*\n* public static main()\n* new JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));\n* }\n* </pre>\n*\n* @param comparator definition of the order of the tests in this Request\n* @return a Request with ordered Tests*/", 
            "class" : "public abstract class Request", 
            "method" : "public Request filterWith(Description desiredDescription)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca25", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/TestDecorator.java", 
    "filehash" : 2651573748, 
    "comments" : [
        {
            "id" : 5, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A Decorator for Tests. Use TestDecorator as the base class for defining new\n* test decorators. Test decorator subclasses can be introduced to add behaviour\n* before or after a test is run.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca26", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java", 
    "filehash" : 2624118312, 
    "comments" : [
        {
            "id" : 375, 
            "total_pattern" : 6.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.5, 
            "comment" : "/**\n* Convenient base class for Matchers that require a non-null value of a specific type.\n* This simply implements the null check, checks the type and then casts.\n*\n* @author Joe Walnes\n* @deprecated Please use @link org.hamcrest.TypeSafeMatcher}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 376, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 4.2, 
            "comment" : "/**\n* Subclasses should implement this. The item will already have been checked for\n* the specific type and will never be null.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will never be", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 377, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Method made final to prevent accidental override.\n* If you need to override this, there's no point on extending TypeSafeMatcher.\n* Instead, extend the @link BaseMatcher}.*/", 
            "class" : "@Deprecated", 
            "method" : "private static boolean isMatchesSafelyMethod(Method method)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca27", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/extensions/ActiveTestSuite.java", 
    "filehash" : 3766799168, 
    "comments" : [
        {
            "id" : 2, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// inlined due to limitation in VA/JavaActiveTestSuite.super.runTest(test, result);", 
            "class" : "public class ActiveTestSuite extends TestSuite", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "limitation", 
                    "score" : 2.0, 
                    "class" : "Noun", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca28", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/internal/Assignments.java", 
    "filehash" : 1287251004, 
    "comments" : [
        {
            "id" : 317, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 3.63, 
            "comment" : "/**\n* A potentially incomplete list of value assignments for a method's formal\n* parameters*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "list", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "incomplete", 
                    "score" : 2.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca29", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", 
    "filehash" : 819242240, 
    "comments" : [
        {
            "id" : 414, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Creates an instance wrapping the given statement with the given timeout in milliseconds.\n*\n* @param statement the statement to wrap\n* @param timeoutMillis the timeout in milliseconds\n* @deprecated use @link #builder()} instead.*/", 
            "class" : "public class FailOnTimeout extends Statement", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 416, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Specifies the time to wait before timing out the test.\n*\n* <p>If this is not called, or is called with a @code timeout} of\n* @code 0}, the returned @code Statement} will wait forever for the\n* test to complete, however the test will still launch from a separate\n* thread. This can be useful for disabling timeouts in environments\n* where they are dynamically set based on some property.\n*\n* @param timeout the maximum time to wait\n* @param unit the time unit of the @code timeout} argument\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "public static Builder builder()", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 417, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Specifies whether to look for a stuck thread. If a timeout occurs and this\n* feature is enabled, the test will look for a thread that appears to be stuck\n* and dump its backtrace. This feature is experimental. Behavior may change\n* after the 4.12 release in response to feedback.\n*\n* @param enable @code true} to enable the feature\n* @return @code this} for method chaining.*/", 
            "class" : "public static class Builder", 
            "method" : "public Builder withTimeout(long timeout, TimeUnit unit)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 420, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// caller will re-throw; no need to call Thread.interrupt()", 
            "class" : "public static class Builder", 
            "method" : "private Throwable getResult(FutureTask<Throwable> task, Thread thread)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 423, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 2.7, 
            "comment" : "/**\n* Determines whether the test appears to be stuck in some thread other than\n* the \"main thread\" (the one created to run the test). This feature is experimental.\n* Behavior may change after the 4.12 release in response to feedback.\n* @param mainThread The main thread created by @code evaluate()}\n* @return The thread which appears to be causing the problem, if different from\n* @code mainThread}, or @code null} if the main thread appears to be the\n* problem or if the thread cannot be determined. The return value is never equal\n* to @code mainThread}.*/", 
            "class" : "public static class Builder", 
            "method" : "private StackTraceElement[] getStackTrace(Thread thread)", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", 
    "filehash" : 3628591064, 
    "comments" : [
        {
            "id" : 1005, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Simple class that SHOULD fail because no parameters are met.*/", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should fail", 
                    "score" : 3.0, 
                    "class" : "Modal + Verb", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/rules/RuleMemberValidator.java", 
    "filehash" : 1145648460, 
    "comments" : [
        {
            "id" : 404, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the validated member to be non-static*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 406, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member to be static*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 407, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member's declaring class to be public*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 408, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member to be public*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 409, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member is a field implementing @link org.junit.rules.MethodRule} or @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 410, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Require the member to return an implementation of @link org.junit.rules.MethodRule} or\n* @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 411, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Require the member to return an implementation of @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 412, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Requires the member is a field implementing @link org.junit.rules.TestRule}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", 
    "filehash" : 3963443487, 
    "comments" : [
        {
            "id" : 342, 
            "total_pattern" : 6.25, 
            "total_heuristic" : 1.2, 
            "total_score" : 7.45, 
            "comment" : "/**\n* The @code AnnotatedBuilder} is a strategy for constructing runners for test class that have been annotated with the\n* @code @RunWith} annotation. All tests within this class will be executed using the runner that was specified within\n* the annotation.\n* <p>\n* If a runner supports inner member classes, the member classes will inherit the runner from the enclosing class, e.g.:\n* <pre>\n* &amp;#064;RunWith(MyRunner.class)\n* public class MyTest\n* // some tests might go here\n*\n* public class MyMemberClass\n* &amp;#064;Test\n* public void thisTestRunsWith_MyRunner()\n* // some test logic\n* }\n*\n* // some more tests might go here\n* }\n*\n* &amp;#064;RunWith(AnotherRunner.class)\n* public class AnotherMemberClass\n* // some tests might go here\n*\n* public class DeepInnerClass\n* &amp;#064;Test\n* public void thisTestRunsWith_AnotherRunner()\n* // some test logic\n* }\n* }\n*\n* public class DeepInheritedClass extends SuperTest\n* &amp;#064;Test\n* public void thisTestRunsWith_SuperRunner()\n* // some test logic\n* }\n* }\n* }\n* }\n*\n* &amp;#064;RunWith(SuperRunner.class)\n* public class SuperTest\n* // some tests might go here\n* }\n* </pre>\n* The key points to note here are:\n* <ul>\n* <li>If there is no RunWith annotation, no runner will be created.</li>\n* <li>The resolve step is inside-out, e.g. the closest RunWith annotation wins</li>\n* <li>RunWith annotations are inherited and work as if the class was annotated itself.</li>\n* <li>The default JUnit runner does not support inner member classes,\n* so this is only valid for custom runners that support inner member classes.</li>\n* <li>Custom runners with support for inner classes may or may not support RunWith annotations for member\n* classes. Please refer to the custom runner documentation.</li>\n* </ul>\n*\n* @see org.junit.runners.model.RunnerBuilder\n* @see org.junit.runner.RunWith\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "note", 
                    "score" : 1.25, 
                    "class" : "Tag", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/DisableOnDebug.java", 
    "filehash" : 1384888686, 
    "comments" : [
        {
            "id" : 456, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 5.2, 
            "comment" : "/**\n* The @code DisableOnDebug} Rule allows you to label certain rules to be\n* disabled when debugging.\n* <p>\n* The most illustrative use case is for tests that make use of the\n* @link Timeout} rule, when ran in debug mode the test may terminate on\n* timeout abruptly during debugging. Developers may disable the timeout, or\n* increase the timeout by making a code change on tests that need debugging and\n* remember revert the change afterwards or rules such as @link Timeout} that\n* may be disabled during debugging may be wrapped in a @code DisableOnDebug}.\n* <p>\n* The important benefit of this feature is that you can disable such rules\n* without any making any modifications to your test class to remove them during\n* debugging.\n* <p>\n* This does nothing to tackle timeouts or time sensitive code under test when\n* debugging and may make this less useful in such circumstances.\n* <p>\n* Example usage:\n*\n* <pre>\n* public static class DisableTimeoutOnDebugSampleTest\n*\n* &amp;#064;Rule\n* public TestRule timeout = new DisableOnDebug(new Timeout(20));\n*\n* &amp;#064;Test\n* public void myTest()\n* int i = 0;\n* assertEquals(0, i); // suppose you had a break point here to inspect i\n* }\n* }\n* </pre>\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 460, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Parses arguments passed to the runtime environment for debug flags\n* <p>\n* Options specified in:\n* <ul>\n* <li>\n* <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-6</a></li>\n* <li><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-7</a></li>\n* <li><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/jpda/conninv.html#Invocation\"\n* >javase-8</a></li>\n*\n*\n* @param arguments\n* the arguments passed to the runtime environment, usually this\n* will be @link RuntimeMXBean#getInputArguments()}\n* @return true if the current JVM was started in debug mode, false\n* otherwise.*/", 
            "class" : "public class DisableOnDebug implements TestRule", 
            "method" : "public Statement apply(Statement base, Description description)", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 461, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 5.64, 
            "comment" : "/**\n* Returns @code true} if the JVM is in debug mode. This method may be used\n* by test classes to take additional action to disable code paths that\n* interfere with debugging if required.\n*\n* @return @code true} if the current JVM is in debug mode, @code false}\n* otherwise*/", 
            "class" : "public class DisableOnDebug implements TestRule", 
            "method" : "private static boolean isDebugging(List<String> arguments)", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/Money.java", 
    "filehash" : 3569798623, 
    "comments" : [
        {
            "id" : 857, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*this makes no sense*/ void appendTo(MoneyBag m)", 
            "class" : "public class Money implements IMoney", 
            "method" : "public /*this makes no sense*/ void appendTo(MoneyBag m)", 
            "patterns" : [
                {
                    "name" : "makes no sense", 
                    "score" : 3.0, 
                    "class" : "expression", 
                    "theme" : "not according", 
                    "tdtype" : "requirement debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca2f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/MethodRulesTest.java", 
    "filehash" : 844815932, 
    "comments" : [
        {
            "id" : 951, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If there are multiple public methods annotated with @Rule returning a @link MethodRule}\n* then all the rules returned should be run.\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit4/issues/589\">Issue #589</a> -\n* Support @Rule for methods works only for TestRule but not for MethodRule*/", 
            "class" : "public static class HasMultipleMethodsReturningMethodRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 952, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If there are any public methods annotated with @Rule returning a @link MethodRule}\n* then method should be called only once.\n*\n* <p>This case has been added with\n* <a href=\"https://github.com/junit-team/junit4/issues/589\">Issue #589</a> -\n* Support @Rule for methods works only for TestRule but not for MethodRule*/", 
            "class" : "private static class Dummy implements MethodRule", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca30", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/BeforeClass.java", 
    "filehash" : 578144537, 
    "comments" : [
        {
            "id" : 244, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Sometimes several tests need to share computationally expensive setup\n* (like logging into a database). While this can compromise the independence of\n* tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method\n* with <code>@BeforeClass</code> causes it to be run once before any of\n* the test methods in the class. The <code>@BeforeClass</code> methods of superclasses\n* will be run before those of the current class, unless they are shadowed in the current class.\n* <p>\n* For example:\n* <pre>\n* public class Example\n* &amp;#064;BeforeClass public static void onlyOnce()\n* ...\n* }\n* &amp;#064;Test public void one()\n* ...\n* }\n* &amp;#064;Test public void two()\n* ...\n* }\n* }\n* </pre>\n*\n* @see org.junit.AfterClass\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "optimization", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca31", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/running/core/SystemExitTest.java", 
    "filehash" : 1021943836, 
    "comments" : [
        {
            "id" : 1022, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "// Make sure System.exit works as expected. We've had problems with this on some platforms.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca32", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxCore.java", 
    "filehash" : 2543490525, 
    "comments" : [
        {
            "id" : 279, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Create a new MaxCore from a serialized file stored at storedResults\n*\n* @deprecated use storedLocally()*/", 
            "class" : "public class MaxCore", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 283, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Run all the tests contained in <code>request</code>.\n*\n* This variant should be used if @code core} has attached listeners that this\n* run should notify.\n*\n* @param request the request describing tests\n* @param core a JUnitCore to delegate to.\n* @return a @link Result} describing the details of the test run and the failed tests.*/", 
            "class" : "public class MaxCore", 
            "method" : "public Result run(Request request)", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 286, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "// This is cheating, because it runs the whole class to get the warning for this method, but we can't do better, because JUnit 3.8's thrown away which method the warning is for.", 
            "class" : "public class MaxCore", 
            "method" : "private Runner buildRunner(Description each)", 
            "patterns" : [
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca33", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/runners/Enclosed.java", 
    "filehash" : 1590838382, 
    "comments" : [
        {
            "id" : 310, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* If you put tests in inner classes, Ant, for example, won't find them. By running the outer class\n* with Enclosed, the tests in the inner classes will be run. You might put tests in inner classes\n* to group them for convenience or to share constants. Abstract inner classes are ignored.\n* <p>\n* So, for example:\n* <pre>\n* &amp;#064;RunWith(Enclosed.class)\n* public class ListTests\n* ...useful shared stuff...\n* public static class OneKindOfListTest ...}\n* public static class AnotherKind ...}\n* abstract public static class Ignored ...}\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca34", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestCase.java", 
    "filehash" : 2795910776, 
    "comments" : [
        {
            "id" : 63, 
            "total_pattern" : 4.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.0, 
            "comment" : "/**\n* A test case defines the fixture to run multiple tests. To define a test case<br/>\n* <ol>\n* <li>implement a subclass of <code>TestCase</code></li>\n* <li>define instance variables that store the state of the fixture</li>\n* <li>initialize the fixture state by overriding @link #setUp()}</li>\n* <li>clean-up after a test by overriding @link #tearDown()}.</li>\n* </ol>\n* Each test runs in its own fixture so there\n* can be no side effects among test runs.\n* Here is an example:\n* <pre>\n* public class MathTest extends TestCase\n* protected double fValue1;\n* protected double fValue2;\n*\n* protected void setUp()\n* fValue1= 2.0;\n* fValue2= 3.0;\n* }\n* }\n* </pre>\n*\n* For each test implement a method which interacts\n* with the fixture. Verify the expected results with assertions specified\n* by calling @link junit.framework.Assert#assertTrue(String, boolean)} with a boolean.\n* <pre>\n* public void testAdd()\n* double result= fValue1 + fValue2;\n* assertTrue(result == 5.0);\n* }\n* </pre>\n*\n* Once the methods are defined you can run them. The framework supports\n* both a static type safe and more dynamic way to run a test.\n* In the static way you override the runTest method and define the method to\n* be invoked. A convenient way to do so is with an anonymous inner class.\n* <pre>\n* TestCase test= new MathTest(\"add\")\n* public void runTest()\n* testAdd();\n* }\n* };\n* test.run();\n* </pre>\n* The dynamic way uses reflection to implement @link #runTest()}. It dynamically finds\n* and invokes a method.\n* In this case the name of the test case has to correspond to the test method\n* to be run.\n* <pre>\n* TestCase test= new MathTest(\"testAdd\");\n* test.run();\n* </pre>\n*\n* The tests to be run can be collected into a TestSuite. JUnit provides\n* different <i>test runners</i> which can run a test suite and collect the results.\n* A test runner either expects a static method <code>suite</code> as the entry\n* point to get a test to run or it will extract the suite automatically.\n* <pre>\n* public static Test suite()\n* suite.addTest(new MathTest(\"testAdd\"));\n* suite.addTest(new MathTest(\"testDivideByZero\"));\n* return suite;\n* }\n* </pre>\n*\n* @see TestResult\n* @see TestSuite*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca35", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/textui/TestRunner.java", 
    "filehash" : 4757378, 
    "comments" : [
        {
            "id" : 157, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A command line based tool to run tests.\n* <pre>\n* java junit.textui.TestRunner [-wait] TestCaseClass\n* </pre>\n* <p>\n* TestRunner expects the name of a TestCase class as argument.\n* If this class defines a static <code>suite</code> method it\n* will be invoked and the returned test is run. Otherwise all\n* the methods starting with \"test\" having no arguments are run.\n* <p>\n* When the wait command line argument is given TestRunner\n* waits until the users types RETURN.\n* <p>\n* TestRunner prints a trace as the tests are executed followed by a\n* summary at the end.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 162, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runs a single test and collects its results.\n* This method can be used to start a test run\n* from your program.\n* <pre>\n* public static void main (String[] args)\n* test.textui.TestRunner.run(suite());\n* }\n* </pre>*/", 
            "class" : "public class TestRunner extends BaseTestRunner", 
            "method" : "static public void run(Class<? extends TestCase> testClass)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca36", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/CategoryValidator.java", 
    "filehash" : 3616995367, 
    "comments" : [
        {
            "id" : 271, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Validates that there are no errors in the use of the @code Category}\n* annotation. If there is, a @code Throwable} object will be added to the list\n* of errors.\n*\n* @since 4.12*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 272, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 1.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem detected. Looks for\n* @code BeforeClass}, @code AfterClass}, @code Before} and @code After}\n* annotations.\n*\n* @param method the method that is being validated\n* @return A list of exceptions detected\n*\n* @since 4.12*/", 
            "class" : "public final class CategoryValidator extends AnnotationValidator", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca37", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/TestCouldNotBeSkippedException.java", 
    "filehash" : 1377950650, 
    "comments" : [
        {
            "id" : 828, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 7.0, 
            "comment" : "/**\n* Indicates that a test that indicated that it should be skipped could not be skipped.\n* This can be thrown if a test uses the methods in @link Assume} to indicate that\n* it should be skipped, but before processing of the test was completed, other failures\n* occured.\n*\n* @see org.junit.Assume\n* @since 4.13*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca38", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/TestListener.java", 
    "filehash" : 2994706833, 
    "comments" : [
        {
            "id" : 89, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* An error occurred.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca39", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java", 
    "filehash" : 2451694346, 
    "comments" : [
        {
            "id" : 1009, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// Likewise, the TestClass must be passed into AllMembersSupplier, or the annotation parsing is again costly.", 
            "class" : "@RunWith(Theories.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/ParentRunner.java", 
    "filehash" : 2073584050, 
    "comments" : [
        {
            "id" : 792, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Provides most of the functionality specific to a Runner that implements a\n* \"parent node\" in the test tree, with children defined by objects of some data\n* type @code T}. (For @link BlockJUnit4ClassRunner}, @code T} is\n* @link Method} . For @link Suite}, @code T} is @link Class}.) Subclasses\n* must implement finding the children of the node, describing each child, and\n* running each child. ParentRunner will filter and sort children, handle\n* @code @BeforeClass} and @code @AfterClass} methods,\n* handle annotated @link ClassRule}s, create a composite\n* @link Description}, and run children sequentially.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 795, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Please use @link #ParentRunner(org.junit.runners.model.TestClass)}.\n* @since 4.12*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public void finished()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 797, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a @link Description} for @code child}, which can be assumed to\n* be an element of the list returned by @link ParentRunner#getChildren()}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 798, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runs the test corresponding to @code child}, which can be assumed to be\n* an element of the list returned by @link ParentRunner#getChildren()}.\n* Subclasses are responsible for making sure that relevant test events are\n* reported through @code notifier}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 799, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* Adds to @code errors} a throwable for each problem noted with the test class (available from @link #getTestClass()}).\n* Default implementation adds an error for each method annotated with\n* @code @BeforeClass} or @code @AfterClass} that is not\n* @code public static void} with no arguments.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "problem", 
                    "score" : 1.5, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 801, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Constructs a @code Statement} to run all of the tests in the test class.\n* Override to add pre-/post-processing. Here is an outline of the\n* implementation:\n* <ol>\n* <li>Determine the children to be run using @link #getChildren()}\n* (subject to any imposed filter and sort).</li>\n* <li>If there are any children remaining after filtering and ignoring,\n* construct a statement that will:\n* <ol>\n* <li>Apply all @code ClassRule}s on the test-class and superclasses.</li>\n* <li>Run all non-overridden @code @BeforeClass} methods on the test-class\n* and superclasses; if any throws an Exception, stop execution and pass the\n* exception on.</li>\n* <li>Run all remaining tests on the test-class.</li>\n* <li>Run all non-overridden @code @AfterClass} methods on the test-class\n* and superclasses: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link org.junit.runners.model.MultipleFailureException}.</li>\n* </ol>\n* </li>\n* </ol>\n*\n* @return @code Statement}*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "private void validateClassRules(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 803, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @AfterClass} methods on this class\n* and superclasses after executing @code statement}; all AfterClass methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from AfterClass methods into a\n* @link org.junit.runners.model.MultipleFailureException}.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "protected Statement withBeforeClasses(Statement statement)", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 812, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// if subclass overrides `getName()` then we should use it to maintain backwards compatibility with JUnit 4.12", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 814, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Sets a scheduler that determines the order and parallelization\n* of children. Highly experimental feature that may change.*/", 
            "class" : "public abstract class ParentRunner&lt;T&gt; extends Runner implements Filterable,", 
            "method" : "public int compare(T o1, T o2)", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Assert.java", 
    "filehash" : 2853163617, 
    "comments" : [
        {
            "id" : 168, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* A set of assertion methods useful for writing tests. Only failed assertions\n* are recorded. These methods can be used directly:\n* <code>Assert.assertEquals(...)</code>, however, they read better if they\n* are referenced through static import:\n*\n* <pre>\n* import static org.junit.Assert.*;\n* ...\n* assertEquals(...);\n* </pre>\n*\n* @see AssertionError\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 173, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Fails a test with the given message.\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @see AssertionError*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertFalse(boolean condition)", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 180, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two doubles are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown with the given\n* message. If the unexpected value is infinity then the delta value is\n* ignored. NaNs are considered equal:\n* <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertNotEquals(long unexpected, long actual)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 181, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two doubles are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown. If the unexpected\n* value is infinity then the delta value is ignored.NaNs are considered\n* equal: <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails\n*\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 182, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two floats are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown. If the unexpected\n* value is infinity then the delta value is ignored.NaNs are considered\n* equal: <code>assertNotEquals(Float.NaN, Float.NaN, *)</code> fails\n*\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertNotEquals(double unexpected, double actual, double delta)", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 196, 
            "total_pattern" : 1.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 2.63, 
            "comment" : "/**\n* Asserts that two long arrays are equal. If they are not, an\n* @link AssertionError} is thrown.\n*\n* @param expecteds long array with expected values.\n* @param actuals long array with actual values*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "array", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun code", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "long", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 204, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Asserts that two floats are <b>not</b> equal to within a positive delta.\n* If they are, an @link AssertionError} is thrown with the given\n* message. If the unexpected value is infinity then the delta value is\n* ignored. NaNs are considered equal:\n* <code>assertNotEquals(Float.NaN, Float.NaN, *)</code> fails\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param unexpected unexpected value\n* @param actual the value to check against <code>unexpected</code>\n* @param delta the maximum delta between <code>unexpected</code> and\n* <code>actual</code> for which both numbers are still\n* considered equal.*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 207, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "public static void assertEquals(String message, long expected, long actual)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 208, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Use\n* <code>assertEquals(String message, double expected, double actual, double delta)</code>\n* instead*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 219, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown with the given message. If\n* <code>expecteds</code> and <code>actuals</code> are <code>null</code>,\n* they are considered equal.\n*\n* @param message the identifying message for the @link AssertionError} (<code>null</code>\n* okay)\n* @param expecteds Object array or array of arrays (multi-dimensional array) with\n* expected values.\n* @param actuals Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "private static String formatClassAndValue(Object value, String valueString)", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 220, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Asserts that two object arrays are equal. If they are not, an\n* @link AssertionError} is thrown. If <code>expected</code> and\n* <code>actual</code> are <code>null</code>, they are considered\n* equal.\n*\n* @param expecteds Object array or array of arrays (multi-dimensional array) with\n* expected values\n* @param actuals Object array or array of arrays (multi-dimensional array) with\n* actual values\n* @deprecated use assertArrayEquals*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 221, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(0, is(1)); // fails:\n* // failure message:\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(0, is(not(1))) // passes\n* </pre>\n*\n* <code>org.hamcrest.Matcher</code> does not currently document the meaning\n* of its type parameter <code>T</code>. This method assumes that a matcher\n* typed as <code>Matcher&amp;lt;T&amp;gt;</code> can be meaningfully applied only\n* to values that could be assigned to a variable of type <code>T</code>.\n*\n* @param <T> the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed\n* values\n* @see org.hamcrest.CoreMatchers\n* @see org.hamcrest.MatcherAssert\n* @deprecated use @code org.hamcrest.junit.MatcherAssert.assertThat()}*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 222, 
            "total_pattern" : 9.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.5, 
            "comment" : "/**\n* Asserts that <code>actual</code> satisfies the condition specified by\n* <code>matcher</code>. If not, an @link AssertionError} is thrown with\n* the reason and information about the matcher and failing value. Example:\n*\n* <pre>\n* assertThat(&amp;quot;Help! Integers don't work&amp;quot;, 0, is(1)); // fails:\n* // failure message:\n* // Help! Integers don't work\n* // expected: is &amp;lt;1&amp;gt;\n* // got value: &amp;lt;0&amp;gt;\n* assertThat(&amp;quot;Zero is one&amp;quot;, 0, is(not(1))) // passes\n* </pre>\n*\n* <code>org.hamcrest.Matcher</code> does not currently document the meaning\n* of its type parameter <code>T</code>. This method assumes that a matcher\n* typed as <code>Matcher&amp;lt;T&amp;gt;</code> can be meaningfully applied only\n* to values that could be assigned to a variable of type <code>T</code>.\n*\n* @param reason additional information about the error\n* @param <T> the static type accepted by the matcher (this can flag obvious\n* compile-time problems such as @code assertThat(1, is(\"a\"))}\n* @param actual the computed value being compared\n* @param matcher an expression, built of @link Matcher}s, specifying allowed\n* values\n* @see org.hamcrest.CoreMatchers\n* @see org.hamcrest.MatcherAssert\n* @deprecated use @code org.hamcrest.junit.MatcherAssert.assertThat()}*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "could be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 223, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Asserts that @code runnable} throws an exception of type @code expectedThrowable} when\n* executed. If it does not throw an exception, an @link AssertionError} is thrown. If it\n* throws the wrong type of exception, an @code AssertionError} is thrown describing the\n* mismatch; the exception that was actually thrown can be obtained by calling @link\n* AssertionError#getCause}.\n*\n* @param expectedThrowable the expected type of the exception\n* @param runnable a function that is expected to throw an exception when executed\n* @since 4.13*/", 
            "class" : "public class Assert", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 225, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "// There must be multiple class loaders. Add the identity hash code so the message doesn't say \"expected: java.lang.String<my.package.MyException> ...\"", 
            "class" : "public class Assert", 
            "method" : "public static <T extends Throwable> T expectThrows(Class<T> expectedThrowable, ThrowingRunnable runnable)", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/Parameterized.java", 
    "filehash" : 2644483391, 
    "comments" : [
        {
            "id" : 783, 
            "total_pattern" : 24.2, 
            "total_heuristic" : 0.64, 
            "total_score" : 24.84, 
            "comment" : "/**\n* The custom runner <code>Parameterized</code> implements parameterized tests.\n* When running a parameterized test class, instances are created for the\n* cross-product of the test methods and the test data elements.\n* <p>\n* For example, to test the <code>+</code> operator, write:\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class AdditionTest\n* &amp;#064;Parameters(name = &amp;quot;index}: 0} + 1} = 2}&amp;quot;)\n* public static Iterable&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]   0, 0, 0 },  1, 1, 2 },\n*  3, 2, 5 },  4, 3, 7 } });\n* }\n*\n* private int firstSummand;\n*\n* private int secondSummand;\n*\n* private int sum;\n*\n* public AdditionTest(int firstSummand, int secondSummand, int sum)\n* this.firstSummand = firstSummand;\n* this.secondSummand = secondSummand;\n* this.sum = sum;\n* }\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(sum, firstSummand + secondSummand);\n* }\n* }\n* </pre>\n* <p>\n* Each instance of <code>AdditionTest</code> will be constructed using the\n* three-argument constructor and the data values in the\n* <code>&amp;#064;Parameters</code> method.\n* <p>\n* In order that you can easily identify the individual tests, you may provide a\n* name for the <code>&amp;#064;Parameters</code> annotation. This name is allowed\n* to contain placeholders, which are replaced at runtime. The placeholders are\n* <dl>\n* <dt>index}</dt>\n* <dd>the current parameter index</dd>\n* <dt>0}</dt>\n* <dd>the first parameter value</dd>\n* <dt>1}</dt>\n* <dd>the second parameter value</dd>\n* <dt>...</dt>\n* <dd>...</dd>\n* </dl>\n* <p>\n* In the example given above, the <code>Parameterized</code> runner creates\n* names like <code>[2: 3 + 2 = 5]</code>. If you don't use the name parameter,\n* then the current parameter index is used as name.\n* <p>\n* You can also write:\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* public class AdditionTest\n* &amp;#064;Parameters(name = &amp;quot;index}: 0} + 1} = 2}&amp;quot;)\n* public static Iterable&amp;lt;Object[]&amp;gt; data()\n* return Arrays.asList(new Object[][]   0, 0, 0 },  1, 1, 2 },\n*  3, 2, 5 },  4, 3, 7 } });\n* }\n*\n* &amp;#064;Parameter(0)\n* public int firstSummand;\n*\n* &amp;#064;Parameter(1)\n* public int secondSummand;\n*\n* &amp;#064;Parameter(2)\n* public int sum;\n*\n* &amp;#064;Test\n* public void test()\n* assertEquals(sum, firstSummand + secondSummand);\n* }\n* }\n* </pre>\n* <p>\n* Each instance of <code>AdditionTest</code> will be constructed with the default constructor\n* and fields annotated by <code>&amp;#064;Parameter</code> will be initialized\n* with the data values in the <code>&amp;#064;Parameters</code> method.\n*\n* <p>\n* The parameters can be provided as an array, too:\n*\n* <pre>\n* &amp;#064;Parameters\n* public static Object[][] data()\n* return new Object[][]   0, 0, 0 },  1, 1, 2 },  3, 2, 5 },  4, 3, 7 } } };\n* }\n* </pre>\n*\n* <h3>Tests with single parameter</h3>\n* <p>\n* If your test needs a single parameter only, you don't have to wrap it with an\n* array. Instead you can provide an <code>Iterable</code> or an array of\n* objects.\n* <pre>\n* &amp;#064;Parameters\n* public static Iterable&amp;lt;? extends Object&amp;gt; data()\n* return Arrays.asList(&amp;quot;first test&amp;quot;, &amp;quot;second test&amp;quot;);\n* }\n* </pre>\n* <p>\n* or\n* <pre>\n* &amp;#064;Parameters\n* public static Object[] data()\n* return new Object[]  &amp;quot;first test&amp;quot;, &amp;quot;second test&amp;quot; };\n* }\n* </pre>\n*\n* <h3>Executing code before/after executing tests for specific parameters</h3>\n* <p>\n* If your test needs to perform some preparation or cleanup based on the\n* parameters, this can be done by adding public static methods annotated with\n* @code @BeforeParam}/@code @AfterParam}. Such methods should either have no\n* parameters or the same parameters as the test.\n* <pre>\n* &amp;#064;BeforeParam\n* public static void beforeTestsForParameter(String onlyParameter)\n* System.out.println(\"Testing \" + onlyParameter);\n* }\n* </pre>\n*\n* <h3>Create different runners</h3>\n* <p>\n* By default the @code Parameterized} runner creates a slightly modified\n* @link BlockJUnit4ClassRunner} for each set of parameters. You can build an\n* own @code Parameterized} runner that creates another runner for each set of\n* parameters. Therefore you have to build a @link ParametersRunnerFactory}\n* that creates a runner for each @link TestWithParameters}. (\n* @code TestWithParameters} are bundling the parameters and the test name.)\n* The factory must have a public zero-arg constructor.\n*\n* <pre>\n* public class YourRunnerFactory implements ParametersRunnerFactory\n* public Runner createRunnerForTestWithParameters(TestWithParameters test)\n* throws InitializationError\n* return YourRunner(test);\n* }\n* }\n* </pre>\n* <p>\n* Use the @link UseParametersRunnerFactory} to tell the @code Parameterized}\n* runner that it should use your factory.\n*\n* <pre>\n* &amp;#064;RunWith(Parameterized.class)\n* &amp;#064;UseParametersRunnerFactory(YourRunnerFactory.class)\n* public class YourTest\n* ...\n* }\n* </pre>\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "dont use", 
                    "score" : 2.0, 
                    "class" : "expression", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must have", 
                    "score" : 1.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 786, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Annotation for fields of the test class which will be initialized by the\n* method annotated by <code>Parameters</code>.\n* By using directly this annotation, the test class constructor isn't needed.\n* Index range must start at 0.\n* Default value is 0.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 788, 
            "total_pattern" : 3.6, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.6, 
            "comment" : "/**\n* Add this annotation to your test class if you want to generate a special\n* runner. You have to specify a @link ParametersRunnerFactory} class that\n* creates such runners. The factory must have a public zero-arg\n* constructor.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to", 
                    "score" : 2.6, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must have", 
                    "score" : 1.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 790, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Annotation for @code public static void} methods which should be executed before\n* evaluating tests with particular parameters.\n*\n* @see org.junit.BeforeClass\n* @see org.junit.Before\n* @since 4.13*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 791, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Annotation for @code public static void} methods which should be executed after\n* evaluating tests with particular parameters.\n*\n* @see org.junit.AfterClass\n* @see org.junit.After\n* @since 4.13*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkMethod.java", 
    "filehash" : 321338782, 
    "comments" : [
        {
            "id" : 735, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/*\n* We need to return the previously-encountered bridge method\n* because JUnit won't be able to call the parent method,\n* because the parent class isn't public.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 737, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// No shadow or bridge method found. The caller should add *this* member.", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }, 
        {
            "id" : 738, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Returns true if this is a no-arg method that returns a value assignable\n* to @code type}\n*\n* @deprecated This is used only by the Theories runner, and does not\n* use all the generic type info that it ought to. It will be replaced\n* with a forthcoming ParameterSignature#canAcceptResultOf(FrameworkMethod)\n* once Theories moves to junit-contrib.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be replaced", 
                    "score" : 2.0, 
                    "class" : "OTV + AV", 
                    "theme" : "to do better improvements", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/RuleChain.java", 
    "filehash" : 252398067, 
    "comments" : [
        {
            "id" : 482, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* The RuleChain rule allows ordering of TestRules. You create a\n* @code RuleChain} with @link #outerRule(TestRule)} and subsequent calls of\n* @link #around(TestRule)}:\n*\n* <pre>\n* public class UseRuleChain\n* &amp;#064;Rule\n* public RuleChain chain= RuleChain\n* .outerRule(new LoggingRule(\"outer rule\"))\n* .around(new LoggingRule(\"middle rule\"))\n* .around(new LoggingRule(\"inner rule\"));\n*\n* &amp;#064;Test\n* public void example()\n* assertTrue(true);\n* }\n* }\n* </pre>\n*\n* writes the log\n*\n* <pre>\n* starting outer rule\n* starting middle rule\n* starting inner rule\n* finished inner rule\n* finished middle rule\n* finished outer rule\n* </pre>\n*\n* @code RuleChain} cannot be used to define the order of existing rules.\n* For example in the below snippet the LoggingRule @code middle} would be\n* executed outside as well as inside the @code RuleChain}:\n*\n* <pre>\n* &amp;#064;Rule\n* public LoggingRule middle = new LoggingRule(\"middle rule\");\n*\n* &amp;#064;Rule\n* public RuleChain chain = RuleChain\n* .outerRule(new LoggingRule(\"outer rule\"))\n* .around(middle)\n* .around(new LoggingRule(\"inner rule\"));\n* </pre>\n*\n* @since 4.10*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "would be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca3f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/management/ReflectiveRuntimeMXBean.java", 
    "filehash" : 561717481, 
    "comments" : [
        {
            "id" : 362, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, input arguments will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 363, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, input arguments will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 364, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, input arguments will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca40", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/rules/MethodRule.java", 
    "filehash" : 4101342411, 
    "comments" : [
        {
            "id" : 480, 
            "total_pattern" : 7.0, 
            "total_heuristic" : 1.28, 
            "total_score" : 8.28, 
            "comment" : "/**\n* A MethodRule is an alteration in how a test method is run and reported.\n* Multiple @link MethodRule}s can be applied to a test method. The\n* @link Statement} that executes the method is passed to each annotated\n* @link Rule} in turn, and each may return a substitute or modified\n* @link Statement}, which is passed to the next @link Rule}, if any. For\n* an example of how this can be useful, see @link TestWatchman}.\n*\n* <p>Note that @link MethodRule} has been replaced by @link TestRule},\n* which has the added benefit of supporting class rules.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca41", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/TestClass.java", 
    "filehash" : 3112513163, 
    "comments" : [
        {
            "id" : 760, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 1.13, 
            "total_score" : 8.63, 
            "comment" : "/**\n* Creates a @code TestClass} wrapping @code clazz}. Each time this\n* constructor executes, the class is scanned for annotations, which can be\n* an expensive process (we hope in future JDK's it will not be.) Therefore,\n* try to share instances of @code TestClass} where possible.*/", 
            "class" : "public class TestClass implements Annotatable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "in the future", 
                    "score" : 2.0, 
                    "class" : "Adv", 
                    "theme" : "status of the work", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "process", 
                    "score" : 0.0, 
                    "class" : "SE Noun", 
                    "theme" : "theme noun process", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "expensive", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 770, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/*\n* A method annotated with @Rule may return a @TestRule or a @MethodRule,\n* we cannot call the method to check whether the return type matches our\n* expectation i.e. subclass of valueClass. If we do that then the method\n* will be invoked twice and we do not want to do that. So we first check\n* whether return type matches our expectation and only then call the method\n* to fetch the MethodRule*/", 
            "class" : "public class TestClass implements Annotatable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "may return", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca42", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/junit/framework/Protectable.java", 
    "filehash" : 396035815, 
    "comments" : [
        {
            "id" : 58, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A <em>Protectable</em> can be run and can throw a Throwable.\n*\n* @see TestResult*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca43", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/internal/runners/statements/ExpectExceptionTest.java", 
    "filehash" : 2855017971, 
    "comments" : [
        {
            "id" : 926, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Integration tests can be found in @link org.junit.tests.running.methods.ExpectedTest}.\n* See e.g. @link org.junit.tests.running.methods.ExpectedTest#expectsAssumptionViolatedException()}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 927, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "// then AssumptionViolatedException should not be thrown", 
            "class" : "public class ExpectExceptionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 928, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "// need to explicitly catch and re-throw as an AssertionError or it might be skipped", 
            "class" : "public class ExpectExceptionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "might be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 929, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// then no exception should be thrown", 
            "class" : "public class ExpectExceptionTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca44", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/requests/ClassRequest.java", 
    "filehash" : 1184784129, 
    "comments" : [
        {
            "id" : 381, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/*\n* We have to use the f prefix, because IntelliJ's JUnit4IdeaTestRunner uses\n* reflection to access this field. See\n* https://github.com/junit-team/junit4/issues/960*/", 
            "class" : "public class ClassRequest extends Request", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "have to use", 
                    "score" : 3.0, 
                    "class" : "OTV + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca45", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java", 
    "filehash" : 2096509089, 
    "comments" : [
        {
            "id" : 778, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A @link BlockJUnit4ClassRunner} with parameters support. Parameters can be\n* injected via constructor or into annotated fields.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca46", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java", 
    "filehash" : 4207281406, 
    "comments" : [
        {
            "id" : 999, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works.\n* Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca47", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/results/ResultMatchers.java", 
    "filehash" : 377443688, 
    "comments" : [
        {
            "id" : 304, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 6.0, 
            "comment" : "/**\n* Do not instantiate.\n* @deprecated will be private soon.*/", 
            "class" : "public class ResultMatchers", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca48", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/AssumptionViolatedException.java", 
    "filehash" : 4067814187, 
    "comments" : [
        {
            "id" : 333, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* An exception class used to implement <i>assumptions</i> (state in which a given test\n* is meaningful and should or should not be executed). A test for which an assumption\n* fails should not generate a test case failure.\n*\n* @see org.junit.Assume*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 334, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 335, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given <i>value</i> (String or\n* Throwable) and an additional failing @link Matcher}.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 336, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given <i>value</i> (String or\n* Throwable) and an additional failing @link Matcher}.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 337, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given message only.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 338, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* An assumption exception with the given message and a cause.\n*\n* @deprecated Please use @link org.junit.AssumptionViolatedException} instead.*/", 
            "class" : "public class AssumptionViolatedException extends RuntimeException implements SelfDescribing", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca49", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerScheduler.java", 
    "filehash" : 3475992101, 
    "comments" : [
        {
            "id" : 754, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Represents a strategy for scheduling when individual test methods\n* should be run (in serial or parallel)\n*\n* WARNING: still experimental, may go away.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "warning", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "reporting issues or problems", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/samples/money/IMoney.java", 
    "filehash" : 2550307247, 
    "comments" : [
        {
            "id" : 853, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.14, 
            "comment" : "/**\n* Append this to a MoneyBag m.\n* appendTo() needs to be public because it is used\n* polymorphically, but it should not be used by clients\n* because it modifies the argument m.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should not be", 
                    "score" : 3.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "needs to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/JUnitSystem.java", 
    "filehash" : 3538034753, 
    "comments" : [
        {
            "id" : 353, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 3.14, 
            "comment" : "/**\n* Will be removed in the next major release*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/DataPoints.java", 
    "filehash" : 2343184586, 
    "comments" : [
        {
            "id" : 313, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 10.0, 
            "comment" : "/**\n* Annotating an array or iterable-typed field or method with &amp;#064;DataPoints\n* will cause the values in the array or iterable given to be used as potential\n* parameters for theories in that class when run with the\n* @link org.junit.experimental.theories.Theories Theories} runner.\n* <p>\n* DataPoints will only be considered as potential values for parameters for\n* which their types are assignable. When multiple sets of DataPoints exist with\n* overlapping types more control can be obtained by naming the DataPoints using\n* the value of this annotation, e.g. with\n* <code>&amp;#064;DataPoints(\"dataset1\", \"dataset2\"})</code>, and then specifying\n* which named set to consider as potential values for each parameter using the\n* @link org.junit.experimental.theories.FromDataPoints &amp;#064;FromDataPoints}\n* annotation.\n* <p>\n* Parameters with no specified source (i.e. without &amp;#064;FromDataPoints or\n* other @link org.junit.experimental.theories.ParametersSuppliedBy\n* &amp;#064;ParameterSuppliedBy} annotations) will use all DataPoints that are\n* assignable to the parameter type as potential values, including named sets of\n* DataPoints.\n* <p>\n* DataPoints methods whose array types aren't assignable from the target\n* parameter type (and so can't possibly return relevant values) will not be\n* called when generating values for that parameter. Iterable-typed datapoints\n* methods must always be called though, as this information is not available\n* here after generic type erasure, so expensive methods returning iterable\n* datapoints are a bad idea.\n*\n* <pre>\n* &amp;#064;DataPoints\n* public static String[] dataPoints = new String[]  ... };\n*\n* &amp;#064;DataPoints\n* public static String[] generatedDataPoints()\n* return new String[]  ... };\n* }\n*\n* &amp;#064;Theory\n* public void theoryMethod(String param)\n* ...\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theories\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.FromDataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "bad idea", 
                    "score" : 3.0, 
                    "class" : "Adj + Noun", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "will cause", 
                    "score" : 3.0, 
                    "class" : "Modal + AV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/ArrayComparisonFailure.java", 
    "filehash" : 340947952, 
    "comments" : [
        {
            "id" : 332, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Construct a new <code>ArrayComparisonFailure</code> with an error text and the array's\n* dimension that was not equal\n*\n* @param cause the exception that caused the array's content to fail the assertion test\n* @param index the array position of the objects that are not equal.\n* @see Assert#assertArrayEquals(String, Object[], Object[])*/", 
            "class" : "public class ArrayComparisonFailure extends AssertionError", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/DisableOnDebugTest.java", 
    "filehash" : 2158225611, 
    "comments" : [
        {
            "id" : 949, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Nasty rule that always fails*/", 
            "class" : "public class DisableOnDebugTest", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca4f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Ignore.java", 
    "filehash" : 978090598, 
    "comments" : [
        {
            "id" : 329, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 1.28, 
            "total_score" : 5.78, 
            "comment" : "/**\n* Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with\n* @link org.junit.Test} that are also annotated with <code>&amp;#064;Ignore</code> will not be executed as tests.\n* Also, you can annotate a class containing test methods with <code>&amp;#064;Ignore</code> and none of the containing\n* tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the\n* number of tests that ran and the number of tests that failed.\n*\n* <p>For example:\n* <pre>\n* &amp;#064;Ignore &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore takes an optional default parameter if you want to record why a test is being ignored:\n* <pre>\n* &amp;#064;Ignore(\"not ready yet\") &amp;#064;Test public void something()  ...\n* </pre>\n* &amp;#064;Ignore can also be applied to the test class:\n* <pre>\n* &amp;#064;Ignore public class IgnoreMe\n* &amp;#064;Test public void test1()  ... }\n* &amp;#064;Test public void test2()  ... }\n* }\n* </pre>\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca50", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/matchers/JUnitMatchers.java", 
    "filehash" : 3330285023, 
    "comments" : [
        {
            "id" : 442, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Convenience import class: these are useful matchers for use with the assertThat method, but they are\n* not currently included in the basic CoreMatchers class from hamcrest.\n*\n* @since 4.4\n* @deprecated use @code org.hamcrest.junit.JUnitMatchers}*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 443, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing element\n* @deprecated Please use @link CoreMatchers#hasItem(Object)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 444, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing an element matching elementMatcher\n* @deprecated Please use @link CoreMatchers#hasItem(Matcher)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 445, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing every element in elements\n* @deprecated Please use @link CoreMatchers#hasItems(Object...)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 446, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* @return A matcher matching any collection containing at least one element that matches\n* each matcher in elementMatcher (this may be one element matching all matchers,\n* or different elements matching each matcher)\n* @deprecated Please use @link CoreMatchers#hasItems(Matcher...)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "may be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 447, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return A matcher matching any collection in which every element matches elementMatcher\n* @deprecated Please use @link CoreMatchers#everyItem(Matcher)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 448, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @return a matcher matching any string that contains substring\n* @deprecated Please use @link CoreMatchers#containsString(String)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 449, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* This is useful for fluently combining matchers that must both pass. For example:\n* <pre>\n* assertThat(string, both(containsString(\"a\")).and(containsString(\"b\")));\n* </pre>\n*\n* @deprecated Please use @link CoreMatchers#both(Matcher)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 450, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* This is useful for fluently combining matchers where either may pass, for example:\n* <pre>\n* assertThat(string, either(containsString(\"a\")).or(containsString(\"b\")));\n* </pre>\n*\n* @deprecated Please use @link CoreMatchers#either(Matcher)} instead.*/", 
            "class" : "@Deprecated", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca51", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/management/ReflectiveThreadMXBean.java", 
    "filehash" : 1098616122, 
    "comments" : [
        {
            "id" : 367, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, the methods will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 368, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, the methods will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 369, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// do nothing, the methods will be null on failure", 
            "class" : "private static final class Holder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca52", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Runner.java", 
    "filehash" : 3040019699, 
    "comments" : [
        {
            "id" : 678, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* A <code>Runner</code> runs tests and notifies a @link org.junit.runner.notification.RunNotifier}\n* of significant events as it does so. You will need to subclass <code>Runner</code>\n* when using @link org.junit.runner.RunWith} to invoke a custom runner. When creating\n* a custom runner, in addition to implementing the abstract methods here you must\n* also provide a constructor that takes as an argument the @link Class} containing\n* the tests.\n*\n* <p>The default runner implementation guarantees that the instances of the test case\n* class will be constructed immediately before running the test and that the runner\n* will retain no reference to the test case instances, generally making them\n* available for garbage collection.\n*\n* @see org.junit.runner.Description\n* @see org.junit.runner.RunWith\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca53", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/experimental/categories/MultiCategoryTest.java", 
    "filehash" : 1802358176, 
    "comments" : [
        {
            "id" : 919, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* This test is mentioned in @code Categories} and any changes\n* must be reflected.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca54", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/rules/BlockJUnit4ClassRunnerOverrideTest.java", 
    "filehash" : 3178205500, 
    "comments" : [
        {
            "id" : 945, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Runner for testing override of @link org.junit.runners.BlockJUnit4ClassRunner#createTest(org.junit.runners.model.FrameworkMethod)}\n* by setting the @link org.junit.runners.model.FrameworkMethod} in a field\n* of the test class so it can be compared with the test method that is being\n* executed.*/", 
            "class" : "@RunWith(OverrideTestRulesRunner.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 946, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 2.64, 
            "comment" : "/**\n* Runner for testing override of @link org.junit.runners.BlockJUnit4ClassRunner#createTest()}\n* is still called by default if no other @code createTest} method override\n* is in place. This is tested by setting a boolean flag in a field of the\n* test class so it can be checked to confirm that the createTest method was\n* called.*/", 
            "class" : "@RunWith(OverrideCreateTestRunner.class)", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca55", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/model/EachTestNotifier.java", 
    "filehash" : 2309526337, 
    "comments" : [
        {
            "id" : 392, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Calls @link RunNotifier#fireTestSuiteStarted(Description)}, passing the\n* @link Description} that was passed to the @code EachTestNotifier} constructor.\n* This should be called when a test suite is about to be started.\n* @see RunNotifier#fireTestSuiteStarted(Description)\n* @since 4.13*/", 
            "class" : "public class EachTestNotifier", 
            "method" : "public void fireTestIgnored()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 393, 
            "total_pattern" : 5.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.0, 
            "comment" : "/**\n* Calls @link RunNotifier#fireTestSuiteFinished(Description)}, passing the\n* @link Description} that was passed to the @code EachTestNotifier} constructor.\n* This should be called when a test suite has finished, whether the test suite succeeds\n* or fails.\n* @see RunNotifier#fireTestSuiteFinished(Description)\n* @since 4.13*/", 
            "class" : "public class EachTestNotifier", 
            "method" : "public void fireTestSuiteStarted()", 
            "patterns" : [
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca56", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java", 
    "filehash" : 1246075201, 
    "comments" : [
        {
            "id" : 935, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// Must show up in stack trace", 
            "class" : "private static final class StuckStatement extends Statement", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca57", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", 
    "filehash" : 2975981735, 
    "comments" : [
        {
            "id" : 685, 
            "total_pattern" : 10.0, 
            "total_heuristic" : 1.13, 
            "total_score" : 11.13, 
            "comment" : "/**\n* Implements the JUnit 4 standard test case class model, as defined by the\n* annotations in the org.junit package. Many users will never notice this\n* class: it is now the default test class runner, but it should have exactly\n* the same behavior as the old test class runner (@code JUnit4ClassRunner}).\n* <p>\n* BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners\n* that are slight changes to the default behavior, however:\n*\n* <ul>\n* <li>It has a much simpler implementation based on @link Statement}s,\n* allowing new operations to be inserted into the appropriate point in the\n* execution flow.\n*\n* <li>It is published, and extension and reuse are encouraged, whereas @code\n* JUnit4ClassRunner} was in an internal package, and is now deprecated.\n* </ul>\n* <p>\n* In turn, in 2009 we introduced @link Rule}s. In many cases where extending\n* BlockJUnit4ClassRunner was necessary to add new behavior, @link Rule}s can\n* be used, which makes the extension more reusable and composable.\n*\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }, 
                {
                    "name" : "old", 
                    "score" : 1.5, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "ADJ+NOUN", 
                    "status" : 1, 
                    "score" : 1.13
                }
            ]
        }, 
        {
            "id" : 690, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Adds to @code errors} if the test class has more than one constructor,\n* or if the constructor takes parameters. Override if a subclass requires\n* different validation rules.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateNoNonStaticInnerClass(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "required", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 693, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Adds to @code errors} for each method annotated with @code @Test},\n* @code @Before}, or @code @After} that is not a public, void instance\n* method with no arguments.\n* @deprecated*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "private boolean hasOneConstructor()", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 695, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Returns a new fixture for running a test. Default implementation executes\n* the test class's no-argument constructor (validation should have ensured\n* one exists).*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected void validateTestMethods(List<Throwable> errors)", 
            "patterns" : [
                {
                    "name" : "should have", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 698, 
            "total_pattern" : 7.5, 
            "total_heuristic" : 0.64, 
            "total_score" : 8.14, 
            "comment" : "/**\n* Returns a Statement that, when executed, either returns normally if\n* @code method} passes, or throws an exception if @code method} fails.\n*\n* Here is an outline of the default implementation:\n*\n* <ul>\n* <li>Invoke @code method} on the result of @link #createTest(org.junit.runners.model.FrameworkMethod)}, and\n* throw any exceptions thrown by either operation.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @link Test#expected()}\n* attribute, return normally only if the previous step threw an\n* exception of the correct type, and throw an exception otherwise.\n* <li>HOWEVER, if @code method}'s @code @Test} annotation has the @code\n* timeout} attribute, throw an exception if the previous step takes more\n* than the specified number of milliseconds.\n* <li>ALWAYS run all non-overridden @code @Before} methods on this class\n* and superclasses before any of the previous steps; if any throws an\n* Exception, stop execution and pass the exception on.\n* <li>ALWAYS run all non-overridden @code @After} methods on this class\n* and superclasses after any of the previous steps; all After methods are\n* always executed: exceptions thrown by previous steps are combined, if\n* necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.\n* <li>ALWAYS allow @code @Rule} fields to modify the execution of the\n* above steps. A @code Rule} may prevent all execution of the above steps,\n* or add additional behavior before and after, or modify thrown exceptions.\n* For more information, see @link TestRule}\n* </ul>\n*\n* This can be overridden in subclasses, either by overriding this method,\n* or the implementations creating each sub-statement.*/", 
            "class" : "public class BlockJUnit4ClassRunner extends ParentRunner&lt;FrameworkMethod&gt;", 
            "method" : "protected String testName(FrameworkMethod method)", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }, 
        {
            "id" : 701, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* Returns a @link Statement}: if @code method}'s @code @Test} annotation\n* has the @code timeout} attribute, throw an exception if @code next}\n* takes more than the specified number of milliseconds.\n* @deprecated*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 703, 
            "total_pattern" : 3.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.0, 
            "comment" : "/**\n* Returns a @link Statement}: run all non-overridden @code @After}\n* methods on this class and superclasses before running @code next}; all\n* After methods are always executed: exceptions thrown by previous steps\n* are combined, if necessary, with exceptions from After methods into a\n* @link MultipleFailureException}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "necessary", 
                    "score" : 3.0, 
                    "class" : "Adj", 
                    "theme" : "undefined or unsettled", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca58", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java", 
    "filehash" : 1837688230, 
    "comments" : [
        {
            "id" : 341, 
            "total_pattern" : 3.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 3.5, 
            "comment" : "/**\n* @deprecated used @link #AllDefaultPossibilitiesBuilder()}.*/", 
            "class" : "public class AllDefaultPossibilitiesBuilder extends RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca59", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/internal/runners/ClassRoadie.java", 
    "filehash" : 2981437387, 
    "comments" : [
        {
            "id" : 386, 
            "total_pattern" : 6.0, 
            "total_heuristic" : 0.64, 
            "total_score" : 6.64, 
            "comment" : "/**\n* @deprecated Included for backwards compatibility with JUnit 4.4. Will be\n* removed in the next major release. Please use\n* @link BlockJUnit4ClassRunner} in place of @link JUnit4ClassRunner}.*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "deprecated", 
                    "score" : 3.5, 
                    "class" : "Adj", 
                    "theme" : "deprecated code", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5a", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/max/MaxHistory.java", 
    "filehash" : 545690924, 
    "comments" : [
        {
            "id" : 289, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* Loads a @link MaxHistory} from @code file}, or generates a new one that\n* will be saved to @code file}.*/", 
            "class" : "public class MaxHistory implements Serializable", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5b", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/FromDataPoints.java", 
    "filehash" : 3313684027, 
    "comments" : [
        {
            "id" : 314, 
            "total_pattern" : 9.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 9.0, 
            "comment" : "/**\n* Annotating a parameter of a @link org.junit.experimental.theories.Theory\n* &amp;#064;Theory} method with <code>&amp;#064;FromDataPoints</code> will limit the\n* datapoints considered as potential values for that parameter to just the\n* @link org.junit.experimental.theories.DataPoints DataPoints} with the given\n* name. DataPoint names can be given as the value parameter of the\n* &amp;#064;DataPoints annotation.\n* <p>\n* DataPoints without names will not be considered as values for any parameters\n* annotated with &amp;#064;FromDataPoints.\n* <pre>\n* &amp;#064;DataPoints\n* public static String[] unnamed = new String[]  ... };\n*\n* &amp;#064;DataPoints(\"regexes\")\n* public static String[] regexStrings = new String[]  ... };\n*\n* &amp;#064;DataPoints(\"forMatching\", \"alphanumeric\"})\n* public static String[] testStrings = new String[]  ... };\n*\n* &amp;#064;Theory\n* public void stringTheory(String param)\n* // This will be called with every value in 'regexStrings',\n* // 'testStrings' and 'unnamed'.\n* }\n*\n* &amp;#064;Theory\n* public void regexTheory(&amp;#064;FromDataPoints(\"regexes\") String regex,\n* &amp;#064;FromDataPoints(\"forMatching\") String value)\n* // This will be called with only the values in 'regexStrings' as\n* // regex, only the values in 'testStrings' as value, and none\n* // of the values in 'unnamed'.\n* }\n* </pre>\n*\n* @see org.junit.experimental.theories.Theory\n* @see org.junit.experimental.theories.DataPoint\n* @see org.junit.experimental.theories.DataPoints*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will not be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5c", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/test/java/junit/tests/runner/ResultTest.java", 
    "filehash" : 3966759999, 
    "comments" : [
        {
            "id" : 910, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* A version of @code Result} that returns a hard-coded runtime.\n* This makes values returned by the methods deterministic.*/", 
            "class" : "public class ResultTest extends TestCase", 
            "method" : "private void assertResultSerializable(Result result)", 
            "patterns" : [
                {
                    "name" : "hardcoded", 
                    "score" : 2.0, 
                    "class" : "Acronym", 
                    "theme" : "difficult to be maintained in the future", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 911, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "// Exceptions don't implement equals() so we need to compare field by field", 
            "class" : "private static class ResultWithFixedRunTime extends Result", 
            "method" : "private void assertSerializedCorrectly(Result result, Result fromStream)", 
            "patterns" : [
                {
                    "name" : "need to", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5d", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runner/Result.java", 
    "filehash" : 2902633358, 
    "comments" : [
        {
            "id" : 667, 
            "total_pattern" : 2.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.5, 
            "comment" : "/**\n* A <code>Result</code> collects and summarizes information from running multiple tests.\n* All tests are counted -- additional information is collected from tests that fail.\n*\n* @since 4.0*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 675, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "// do nothing: same as passing (for 4.5; may change in 4.6)", 
            "class" : "@RunListener.ThreadSafe", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5e", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/Rule.java", 
    "filehash" : 3920261132, 
    "comments" : [
        {
            "id" : 455, 
            "total_pattern" : 15.5, 
            "total_heuristic" : 1.2, 
            "total_score" : 16.7, 
            "comment" : "/**\n* Annotates fields that reference rules or methods that return a rule. A field must be public, not\n* static, and a subtype of @link org.junit.rules.TestRule} (preferred) or\n* @link org.junit.rules.MethodRule}. A method must be public, not static,\n* and must return a subtype of @link org.junit.rules.TestRule} (preferred) or\n* @link org.junit.rules.MethodRule}.\n* <p>\n* The @link org.junit.runners.model.Statement} passed\n* to the @link org.junit.rules.TestRule} will run any @link Before} methods,\n* then the @link Test} method, and finally any @link After} methods,\n* throwing an exception if any of these fail. If there are multiple\n* annotated @link Rule}s on a class, they will be applied in order of methods first, then fields.\n* However, if there are multiple fields (or methods) they will be applied in an order\n* that depends on your JVM's implementation of the reflection API, which is\n* undefined, in general. Rules defined by fields will always be applied\n* after Rules defined by methods, i.e. the Statements returned by the former will\n* be executed around those returned by the latter. You can use a @link org.junit.rules.RuleChain}\n* if you want to have control over the order in which the Rules are applied.\n*\n* <p>\n* For example, here is a test class that creates a temporary folder before\n* each test method, and deletes it after each:\n* <pre>\n* public static class HasTempFolder\n* &amp;#064;Rule\n* public TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n* <p>\n* And the same using a method.\n* <pre>\n* public static class HasTempFolder\n* private TemporaryFolder folder= new TemporaryFolder();\n*\n* &amp;#064;Rule\n* public TemporaryFolder getFolder()\n* return folder;\n* }\n*\n* &amp;#064;Test\n* public void testUsingTempFolder() throws IOException\n* File createdFile= folder.newFile(&amp;quot;myfile.txt&amp;quot;);\n* File createdFolder= folder.newFolder(&amp;quot;subfolder&amp;quot;);\n* // ...\n* }\n* }\n* </pre>\n* <p>\n* For more information and more examples, see\n* @link org.junit.rules.TestRule}.\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "design debt"
                }, 
                {
                    "name" : "temporary", 
                    "score" : 4.0, 
                    "class" : "Adj", 
                    "theme" : "temporary solution or workarounds", 
                    "tdtype" : "code debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca5f", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/Theories.java", 
    "filehash" : 2080580026, 
    "comments" : [
        {
            "id" : 323, 
            "total_pattern" : 14.5, 
            "total_heuristic" : 2.48, 
            "total_score" : 16.98, 
            "comment" : "/**\n* The Theories runner allows to test a certain functionality against a subset of an infinite set of data points.\n* <p>\n* A Theory is a piece of functionality (a method) that is executed against several data inputs called data points.\n* To make a test method a theory you mark it with <b>&amp;#064;Theory</b>. To create a data point you create a public\n* field in your test class and mark it with <b>&amp;#064;DataPoint</b>. The Theories runner then executes your test\n* method as many times as the number of data points declared, providing a different data point as\n* the input argument on each invocation.\n* </p>\n* <p>\n* A Theory differs from standard test method in that it captures some aspect of the intended behavior in possibly\n* infinite numbers of scenarios which corresponds to the number of data points declared. Using assumptions and\n* assertions properly together with covering multiple scenarios with different data points can make your tests more\n* flexible and bring them closer to scientific theories (hence the name).\n* </p>\n* <p>\n* For example:\n* <pre>\n*\n* &amp;#064;RunWith(<b>Theories.class</b>)\n* public class UserTest\n* <b>&amp;#064;DataPoint</b>\n* public static String GOOD_USERNAME = \"optimus\";\n* <b>&amp;#064;DataPoint</b>\n* public static String USERNAME_WITH_SLASH = \"optimus/prime\";\n*\n* <b>&amp;#064;Theory</b>\n* public void filenameIncludesUsername(String username)\n* assumeThat(username, not(containsString(\"/\")));\n* assertThat(new User(username).configFileName(, containsString(username));\n* }\n* }\n* </pre>\n* This makes it clear that the username should be included in the config file name,\n* only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n* a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n* point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n* assumptions pass, but an assertion fails, the test fails. If no parameters can be found that satisfy all assumptions, the test fails.\n* <p>\n* Defining general statements as theories allows data point reuse across a bunch of functionality tests and also\n* allows automated tools to search for new, unexpected data points that expose bugs.\n* </p>\n* <p>\n* The support for Theories has been absorbed from the Popper project, and more complete documentation can be found\n* from that projects archived documentation.\n* </p>\n*\n* @see <a href=\"http://web.archive.org/web/20071012143326/popper.tigris.org/tutorial.html\">Archived Popper project documentation</a>\n* @see <a href=\"http://web.archive.org/web/20110608210825/http://shareandenjoy.saff.net/tdd-specifications.pdf\">Paper on Theories</a>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "fails the test", 
                    "score" : 3.0, 
                    "class" : "Verb + Noun", 
                    "theme" : "deficiencies in testing activities", 
                    "tdtype" : "test debt"
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }, 
                {
                    "name" : "fail", 
                    "score" : 2.5, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }, 
                {
                    "description" : "OTV+AV", 
                    "status" : 1, 
                    "score" : 0.64
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca60", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/FrameworkField.java", 
    "filehash" : 4172428523, 
    "comments" : [
        {
            "id" : 716, 
            "total_pattern" : 0.0, 
            "total_heuristic" : 1.2, 
            "total_score" : 1.2, 
            "comment" : "/**\n* Represents a field on a test class (currently used only for Rules in\n* @link BlockJUnit4ClassRunner}, but custom runners can make other uses)\n*\n* @since 4.7*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [

            ], 
            "heuristics" : [
                {
                    "description" : "MODAL+AV", 
                    "status" : 1, 
                    "score" : 1.2
                }
            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca61", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/categories/Categories.java", 
    "filehash" : 1709308397, 
    "comments" : [
        {
            "id" : 255, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* From a given set of test classes, runs only the classes and methods that are\n* annotated with either the category given with the @IncludeCategory\n* annotation, or a subtype of that category.\n* <p>\n* Note that, for now, annotating suites with @code @Category} has no effect.\n* Categories must be annotated on the direct method or class.\n* <p>\n* Example:\n* <pre>\n* public interface FastTests\n* }\n*\n* public interface SlowTests\n* }\n*\n* public interface SmokeTests\n* }\n*\n* public static class A\n* &amp;#064;Test\n* public void a()\n* fail();\n* }\n*\n* &amp;#064;Category(SlowTests.class)\n* &amp;#064;Test\n* public void b()\n* }\n*\n* &amp;#064;Category(FastTests.class, SmokeTests.class})\n* &amp;#064;Test\n* public void c()\n* }\n* }\n*\n* &amp;#064;Category(SlowTests.class, FastTests.class})\n* public static class B\n* &amp;#064;Test\n* public void d()\n* }\n* }\n*\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(SlowTests.class)\n* &amp;#064;SuiteClasses(A.class, B.class})\n* // Note that Categories is a kind of Suite\n* public static class SlowTestSuite\n* // Will run A.b and B.d, but not A.a and A.c\n* }\n* </pre>\n* <p>\n* Example to run multiple categories:\n* <pre>\n* &amp;#064;RunWith(Categories.class)\n* &amp;#064;IncludeCategory(FastTests.class, SmokeTests.class})\n* &amp;#064;SuiteClasses(A.class, B.class})\n* public static class FastOrSmokeTestSuite\n* // Will run A.c and B.d, but not A.b because it is not any of FastTests or SmokeTests\n* }\n* </pre>\n*\n* @version 4.12\n* @see <a href=\"https://github.com/junit-team/junit4/wiki/Categories\">Categories at JUnit wiki</a>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "must be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca62", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/runners/model/RunnerBuilder.java", 
    "filehash" : 3401038594, 
    "comments" : [
        {
            "id" : 750, 
            "total_pattern" : 4.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 4.5, 
            "comment" : "/**\n* A RunnerBuilder is a strategy for constructing runners for classes.\n*\n* Only writers of custom runners should use <code>RunnerBuilder</code>s. A custom runner class with a constructor taking\n* a <code>RunnerBuilder</code> parameter will be passed the instance of <code>RunnerBuilder</code> used to build that runner itself.\n* For example,\n* imagine a custom runner that builds suites based on a list of classes in a text file:\n*\n* <pre>\n* /@RunWith(TextFileSuite.class)\n* /@SuiteSpecFile(\"mysuite.txt\")\n* class MySuite }\n* </pre>\n*\n* The implementation of TextFileSuite might include:\n*\n* <pre>\n* public TextFileSuite(Class testClass, RunnerBuilder builder)\n* // ...\n* for (String className : readClassNames())\n* addRunner(builder.runnerForClass(Class.forName(className)));\n* // ...\n* }\n* </pre>\n*\n* @see org.junit.runners.Suite\n* @since 4.5*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "should use", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }, 
        {
            "id" : 752, 
            "total_pattern" : 5.5, 
            "total_heuristic" : 0.0, 
            "total_score" : 5.5, 
            "comment" : "/**\n* Always returns a runner for the given test class.\n*\n* <p>In case of an exception a runner will be returned that prints an error instead of running\n* tests.\n*\n* <p>Note that some of the internal JUnit implementations of RunnerBuilder will return\n* @code null} from this method, but no RunnerBuilder passed to a Runner constructor will\n* return @code null} from this method.\n*\n* @param testClass class to be run\n* @return a Runner*/", 
            "class" : "public abstract class RunnerBuilder", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "will be", 
                    "score" : 2.5, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }, 
                {
                    "name" : "error", 
                    "score" : 3.0, 
                    "class" : "Noun", 
                    "theme" : "defects or bugs", 
                    "tdtype" : "defect debt"
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
},
{ 
    "_id" : "5a941facb8a9f92136b6ca63", 
    "reference" : "master", 
    "commit" : "660a37320badfd6749f453201aeef8f5b15da890", 
    "commit_date" : "2018-02-21T19:14:56.000+0000", 
    "repository" : "5a932d02b8a9f956ba503603", 
    "filename" : "src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java", 
    "filehash" : 543004780, 
    "comments" : [
        {
            "id" : 319, 
            "total_pattern" : 2.0, 
            "total_heuristic" : 0.0, 
            "total_score" : 2.0, 
            "comment" : "/**\n* Annotating a @link org.junit.experimental.theories.Theory Theory} method\n* parameter with &amp;#064;ParametersSuppliedBy causes it to be supplied with\n* values from the named\n* @link org.junit.experimental.theories.ParameterSupplier ParameterSupplier}\n* when run as a theory by the @link org.junit.experimental.theories.Theories\n* Theories} runner.\n*\n* In addition, annotations themselves can be annotated with\n* &amp;#064;ParametersSuppliedBy, and then used similarly. ParameterSuppliedBy\n* annotations on parameters are detected by searching up this heirarchy such\n* that these act as syntactic sugar, making:\n*\n* <pre>\n* &amp;#064;ParametersSuppliedBy(Supplier.class)\n* public &amp;#064;interface SpecialParameter  }\n*\n* &amp;#064;Theory\n* public void theoryMethod(&amp;#064;SpecialParameter String param)\n* ...\n* }\n* </pre>\n*\n* equivalent to:\n*\n* <pre>\n* &amp;#064;Theory\n* public void theoryMethod(&amp;#064;ParametersSuppliedBy(Supplier.class) String param)\n* ...\n* }\n* </pre>*/", 
            "class" : "", 
            "method" : "", 
            "patterns" : [
                {
                    "name" : "can be", 
                    "score" : 2.0, 
                    "class" : "OTV", 
                    "theme" : "open task", 
                    "tdtype" : ""
                }
            ], 
            "heuristics" : [

            ]
        }
    ]
}]