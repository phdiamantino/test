id,reference,date,repository,filename,comment,score,value,comment_cleaned,sentiment
5a933925b8a9f9639f176cd6,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,4.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933925b8a9f9639f176cd7,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933925b8a9f9639f176cd8,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,swingui/TestRunner.java, fails the first time,2.5,1,fails first time fails the first time,0
5a933925b8a9f9639f176cd9,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,4.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933925b8a9f9639f176cda,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/TestSuite.java, Returns a test which will fail and log a warning message.,5.5,1,Returns test fail log warning message Returns a test which will fail and log a warning message,-1
5a933925b8a9f9639f176cdb,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,tests/framework/AssertTest.java, We have to throw the exception manually .,5.2,1,We throw exception manually We have to throw the exception manually,0
5a933925b8a9f9639f176cdc,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,swingui/TestTreeModel.java, Tests whether a test was an error,3.0,1,Tests whether test error Tests whether a test wa an error,0
5a933925b8a9f9639f176cdd,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,runner/TestSuiteLoader.java, An interface to define how a test suite should be loaded.,5.0,1,An interface define test suite loaded An interface to define how a test suite should be loaded,0
5a933925b8a9f9639f176cde,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,textui/TestRunner.java, Runs a single test and collects its results. This method can be used to start a test run from your program. <pre> public static void main (String[] args test.textui.TestRunner.run(suite( } <pre>,4.0,1,Runs single test collects results This method used start test run program public static void main String args testtextuiTestRunnerrun suite Runs a single test and collect it result This method can be used to start a test run from your program public static void main String args testtextuiTestRunnerrun suite,0
5a933925b8a9f9639f176cdf,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> 1 implement a subclass of TestCase<br> 2 define instance variables that store the state of the fixture<br> 3 initialize the fixture state by overriding <code>setUp<code><br> 4 cleanup after a test by overriding <code>tearDown<code>.<br> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling <code>assertTrue<code> with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement <code>runTest<code>. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,8.0,1,test case defines fixture run multiple tests To define test case 1 implement subclass TestCase 2 define instance variables store state fixture 3 initialize fixture state overriding setUp 4 cleanup test overriding tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling assertTrue boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case 1 implement a subclass of TestCase 2 define instance variable that store the state of the fixture 3 initialize the fixture state by overriding setUp 4 cleanup after a test by overriding tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling assertTrue with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933925b8a9f9639f176ce0,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/Test.java, Counts the number of test cases that will be run by this test.,5.0,1,Counts number test cases run test Counts the number of test case that will be run by this test,0
5a933925b8a9f9639f176ce1,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,extensions/ExceptionTestCase.java, Execute the test method expecting that an Exception of class fExpected or one of its subclasses will be thrown,5.0,1,Execute test method expecting Exception class fExpected one subclasses thrown Execute the test method expecting that an Exception of class fExpected or one of it subclass will be thrown,0
5a933925b8a9f9639f176ce2,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,6.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933925b8a9f9639f176ce3,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,runner/TestCaseClassLoader.java, A custom class loader which enables the reloading of classes for each test run. The class loader can be configured with a list of package paths that should be excluded from loading. The loading of these packages is delegated to the system class loader. They will be shared across test runs. <p> The list of excluded package paths is specified in a properties file excluded.properties that is located in the same place as the TestCaseClassLoader class. <p> <b>Known limitation<b> the TestCaseClassLoader cannot load classes from jar files.,14.0,1,custom class loader enables reloading classes test run The class loader configured list package paths excluded loading The loading packages delegated system class loader They shared across test runs The list excluded package paths specified properties file excludedproperties located place TestCaseClassLoader class <b>Known limitation<b> TestCaseClassLoader cannot load classes jar files custom class loader which enables the reloading of class for each test run The class loader can be configured with a list of package path that should be excluded from loading The loading of these package is delegated to the system class loader They will be shared across test run The list of excluded package path is specified in a property file excludedproperties that is located in the same place a the TestCaseClassLoader class <b>Known limitation<b> the TestCaseClassLoader cannot load class from jar file,0
5a933925b8a9f9639f176ce4,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/TestResult.java, A <code>TestResult<code> collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between <i>failures<i> and <i>errors<i>. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an <code>ArrayIndexOutOfBoundsException<code>. see Test,1.5,1,TestResult collects results executing test case It instance Collecting Parameter pattern The test framework distinguishes failures errors failure anticipated checked assertions Errors unanticipated problems like ArrayIndexOutOfBoundsException see Test TestResult collect the result of executing a test case It is an instance of the Collecting Parameter pattern The test framework distinguishes between failure and error failure is anticipated and checked for with assertion Errors are unanticipated problem like an ArrayIndexOutOfBoundsException see Test,-1
5a933925b8a9f9639f176ce5,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,5.2,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933925b8a9f9639f176ce6,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933925b8a9f9639f176ce7,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,3.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a933925b8a9f9639f176ce8,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,framework/Assert.java, A set of assert methods. Messages are only displayed when an assert fails.,6.0,1,set assert methods Messages displayed assert fails set of assert method Messages are only displayed when an assert fails,-1
5a933925b8a9f9639f176ce9,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,runner/BaseTestRunner.java, calling of the deprecated save method to enable compiling under 1.1.7,3.5,1,calling deprecated save method enable compiling 117 calling of the deprecated save method to enable compiling under 117,0
5a933925b8a9f9639f176cea,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,swingui/TestRunContext.java, The interface for accessing the Test run context. Test run views should use this interface rather than accessing the TestRunner directly.,4.0,1,The interface accessing Test run context Test run views use interface rather accessing TestRunner directly The interface for accessing the Test run context Test run view should use this interface rather than accessing the TestRunner directly,0
5a933925b8a9f9639f176ceb,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933925b8a9f9639f176cec,r3.8.2,2004-12-28,5a932d02b8a9f956ba503603,samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176ced,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Returns a Request whose Tests can be run in a certain order defined by <code>comparator<code> For example here is code to run a test suite in alphabetical order <pre>private static Comparator<Description> forward(return new Comparator<Description>(public int compare(Description o1 Description o2return o1.getDisplayName(.compareTo(o2.getDisplayName(}}}public static main(new JUnitCore(.run(Request.aClass(AllTests.class.sortWith(forward(} <pre> param comparator definition of the order of the tests in this Request return a Request with ordered Tests,4.0,1,Returns Request whose Tests run certain order defined comparator For example code run test suite alphabetical order private static Comparator<Description> forward return new Comparator<Description> public int compare Description o1 Description o2return o1getDisplayName compareTo o2getDisplayName public static main new JUnitCore run RequestaClass AllTestsclasssortWith forward param comparator definition order tests Request return Request ordered Tests Returns a Request whose Tests can be run in a certain order defined by comparator For example here is code to run a test suite in alphabetical order private static Comparator<Description> forward return new Comparator<Description> public int compare Description o1 Description o2return o1getDisplayName compareTo o2getDisplayName public static main new JUnitCore run RequestaClass AllTestsclasssortWith forward param comparator definition of the order of the test in this Request return a Request with ordered Tests,0
5a933926b8a9f9639f176cee,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Subclasses should implement this. The item will already have been checked for the specific type and will never be null.,6.0,1,Subclasses implement The item already checked specific type never null Subclasses should implement this The item will already have been checked for the specific type and will never be null,0
5a933926b8a9f9639f176cef,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,4.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176cf0,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176cf1,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176cf2,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,5.2,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176cf3,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/JUnitCore.java, TODO (Feb 23 2009 102440 PM V,3.759,1,TODO Feb 23 2009 102440 PM V TODO Feb 23 2009 102440 PM V,0
5a933926b8a9f9639f176cf4,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, However you need to add the ea VM argument when running.,5.0,1,However need add ea VM argument running However you need to add the ea VM argument when running,0
5a933926b8a9f9639f176cf5,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,8.5,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176cf6,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,5.0,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176cf7,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,17.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176cf8,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176cf9,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, TODO (Feb 23 2009 104023 PM V,3.759,1,TODO Feb 23 2009 104023 PM V TODO Feb 23 2009 104023 PM V,0
5a933926b8a9f9639f176cfa,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,5.0,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176cfb,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,5.0,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176cfc,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,8.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176cfd,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java, TODO (Nov 18 2008 20306 PM flaky?,3.759,1,TODO Nov 18 2008 20306 PM flaky? TODO Nov 18 2008 20306 PM flaky?,0
5a933926b8a9f9639f176cfe,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, Informs the result that a test will be started.,5.0,1,Informs result test started Informs the result that a test will be started,0
5a933926b8a9f9639f176cff,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java, TODO (Feb 23 2009 105714 PM V,3.759,1,TODO Feb 23 2009 105714 PM V TODO Feb 23 2009 105714 PM V,0
5a933926b8a9f9639f176d00,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/max/MaxComputerTest.java, TODO (Mar 2 2009 105915 PM this grows without bound.,3.759,1,TODO Mar 2 2009 105915 PM grows without bound TODO Mar 2 2009 105915 PM this grows without bound,0
5a933926b8a9f9639f176d01,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. Inspired by a patch from Alex Chaffee (alexpurpletech.com,2.5,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom,1
5a933926b8a9f9639f176d02,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176d03,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Returns one or more Throwables that led to this initialization error.,3.0,1,Returns one Throwables led initialization error Returns one or more Throwables that led to this initialization error,0
5a933926b8a9f9639f176d04,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,4.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176d05,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Returns a link Statement} run all nonoverridden code AfterClass} methods on this class and superclasses before executing code statement} all AfterClass methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from AfterClass methods into a link MultipleFailureException}.,6.0,1,Returns link Statement run nonoverridden code AfterClass methods class superclasses executing code statement AfterClass methods always executed exceptions thrown previous steps combined necessary exceptions AfterClass methods link MultipleFailureException Returns a link Statement run all nonoverridden code AfterClass method on this class and superclass before executing code statement all AfterClass method are always executed exception thrown by previous step are combined if necessary with exception from AfterClass method into a link MultipleFailureException,0
5a933926b8a9f9639f176d06,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static Collection&ampltObject[]&ampgt data( return Arrays.asList(new Object[][] Fibonacci   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test(HeresHowYouGetValue Type value assertAnswerKey(new Object[][] Fibonacci   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,5.0,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static Collection&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test HeresHowYouGetValue Type value assertAnswerKey new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static Collection&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test HeresHowYouGetValue Type value assertAnswerKey new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176d07,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, Fails a test with the given message. param message the identifying message for the link AssertionError} (<code>null<code> okay see AssertionError,6.0,1,Fails test given message param message identifying message link AssertionError null okay see AssertionError Fails a test with the given message param message the identifying message for the link AssertionError null okay see AssertionError,-1
5a933926b8a9f9639f176d08,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,4.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176d09,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,5.0,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176d0a,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,3.759,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176d0b,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,13.5,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176d0c,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Suite.java, TODO (Nov 18 2008 21913 PM extract,3.759,1,TODO Nov 18 2008 21913 PM extract TODO Nov 18 2008 21913 PM extract,0
5a933926b8a9f9639f176d0d,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, TODO(parallel we need to push parallel execution down through suites (i.e. run a Suite with a parallel executioner and you get parallel execution,5.0,1,TODO parallel need push parallel execution suites ie run Suite parallel executioner get parallel execution TODO parallel we need to push parallel execution down through suite ie run a Suite with a parallel executioner and you get parallel execution,0
5a933926b8a9f9639f176d0e,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,4.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176d0f,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,4.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176d10,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,5.0,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176d11,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,7.0,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176d12,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, Also we are testing fail so we can't rely on fail( working.,5.0,1,Also testing fail can't rely fail working Also we are testing fail so we can't rely on fail working,-1
5a933926b8a9f9639f176d13,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, Fails a test with no message.,6.0,1,Fails test message Fails a test with no message,-1
5a933926b8a9f9639f176d14,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176d15,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,5.0,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176d16,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,15.0,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176d17,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,10.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176d18,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/InexactComparisonCriteria.java, TODO DUP above TODO (Sep 8 2008 43250 PM Test that this fails sometimes TODO (Sep 8 2008 43304 PM Update javadoc,13.777000000000001,1,TODO DUP TODO Sep 8 2008 43250 PM Test fails sometimes TODO Sep 8 2008 43304 PM Update javadoc TODO DUP above TODO Sep 8 2008 43250 PM Test that this fails sometimes TODO Sep 8 2008 43304 PM Update javadoc,0
5a933926b8a9f9639f176d19,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,13.0,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176d1a,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176d1b,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,4.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176d1c,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,9.0,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176d1d,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,10.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176d1e,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, Call to assume that <code>actual<code> satisfies the condition specified by <code>matcher<code>. If not the test halts and is ignored. Example <pre> assumeThat(1 is(1  passes foo(  will execute assumeThat(0 is(1  assumption failure! test halts int x = 1  0  will never execute <pre> param <T> the static type accepted by the matcher (this can flag obvious compiletime problems such as code assumeThat(1 is(a} param actual the computed value being compared param matcher an expression built of link Matcher}s specifying allowed values see org.hamcrest.CoreMatchers see org.junit.matchers.JUnitMatchers,0.0,1,Call assume actual satisfies condition specified matcher If test halts ignored Example assumeThat 1 1 passes foo execute assumeThat 0 1 assumption failure! test halts int x = 1 0 never execute param <T> static type accepted matcher flag obvious compiletime problems code assumeThat 1 param actual computed value compared param matcher expression built link Matcher specifying allowed values see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers Call to assume that actual satisfies the condition specified by matcher If not the test halt and is ignored Example assumeThat 1 is 1 pass foo will execute assumeThat 0 is 1 assumption failure! test halt int x = 1 0 will never execute param <T> the static type accepted by the matcher this can flag obvious compiletime problem such a code assumeThat 1 is a param actual the computed value being compared param matcher an expression built of link Matcher s specifying allowed value see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers,0
5a933926b8a9f9639f176d1f,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,12.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176d20,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,9.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176d21,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Returns a link Statement} run all nonoverridden code After} methods on this class and superclasses before running code next} all After methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from After methods into a link MultipleFailureException}.,6.0,1,Returns link Statement run nonoverridden code After methods class superclasses running code next After methods always executed exceptions thrown previous steps combined necessary exceptions After methods link MultipleFailureException Returns a link Statement run all nonoverridden code After method on this class and superclass before running code next all After method are always executed exception thrown by previous step are combined if necessary with exception from After method into a link MultipleFailureException,0
5a933926b8a9f9639f176d22,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176d23,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,6.5,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176d24,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,12.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176d25,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, TODO (Feb 23 2009 104136 PM V,3.759,1,TODO Feb 23 2009 104136 PM V TODO Feb 23 2009 104136 PM V,0
5a933926b8a9f9639f176d26,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, <p>A <code>Description<code> describes a test which is to be run or has been run. <code>Descriptions<code> can be atomic (a single test or compound (containing children tests. <code>Descriptions<code> are used to provide feedback about the tests that are about to run (for example the tree view visible in many IDEs or tests that have been run (for example the failures view.<p> <p><code>Descriptions<code> are implemented as a single class rather than a Composite because they are entirely informational. They contain no logic aside from counting their tests.<p> <p>In the past we used the raw link junit.framework.TestCase}s and link junit.framework.TestSuite}s to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have a superclass below link Object}. We needed a way to pass a class and name together. Description emerged from this.<p> see org.junit.runner.Request see org.junit.runner.Runner,4.0,1,Description describes test run run Descriptions atomic single test compound containing children tests Descriptions used provide feedback tests run example tree view visible many IDEs tests run example failures view Descriptions implemented single class rather Composite entirely informational They contain logic aside counting tests In past used raw link junitframeworkTestCase link junitframeworkTestSuite display tree tests This longer viable JUnit 4 atomic tests longer superclass link Object We needed way pass class name together Description emerged see orgjunitrunnerRequest see orgjunitrunnerRunner Description describes a test which is to be run or ha been run Descriptions can be atomic a single test or compound containing child test Descriptions are used to provide feedback about the test that are about to run for example the tree view visible in many IDEs or test that have been run for example the failure view Descriptions are implemented a a single class rather than a Composite because they are entirely informational They contain no logic aside from counting their test In the past we used the raw link junitframeworkTestCase s and link junitframeworkTestSuite s to display the tree of test This wa no longer viable in JUnit 4 because atomic test no longer have a superclass below link Object We needed a way to pas a class and name together Description emerged from this see orgjunitrunnerRequest see orgjunitrunnerRunner,0
5a933926b8a9f9639f176d27,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, If you write custom runners you may need to notify JUnit of your progress running tests. Do this by invoking the <code>RunNotifier<code> passed to your implementation of link org.junit.runner.Runnerrun(RunNotifier}. Future evolution of this class is likely to move link fireTestRunStarted(Description} and link fireTestRunFinished(Result} to a separate class since they should only be called once per run.,9.0,1,If write custom runners may need notify JUnit progress running tests Do invoking RunNotifier passed implementation link orgjunitrunnerRunnerrun RunNotifier Future evolution class likely move link fireTestRunStarted Description link fireTestRunFinished Result separate class since called per run If you write custom runner you may need to notify JUnit of your progress running test Do this by invoking the RunNotifier passed to your implementation of link orgjunitrunnerRunnerrun RunNotifier Future evolution of this class is likely to move link fireTestRunStarted Description and link fireTestRunFinished Result to a separate class since they should only be called once per run,0
5a933926b8a9f9639f176d28,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176d29,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,14.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176d2a,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Called when an atomic test has finished whether the test succeeds or fails. param description the description of the test that just ran,2.5,1,Called atomic test finished whether test succeeds fails param description description test ran Called when an atomic test ha finished whether the test succeeds or fails param description the description of the test that just ran,0
5a933926b8a9f9639f176d2b,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,5.2,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176d2c,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, Always returns a runner even if it is just one that prints an error instead of running tests. param testClass class to be run return a Runner,3.0,1,Always returns runner even one prints error instead running tests param testClass class run return Runner Always return a runner even if it is just one that print an error instead of running test param testClass class to be run return a Runner,0
5a933926b8a9f9639f176d2d,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, This test case is obsolete since the compiler will catch this error in 1.5 public void testNoTestCaseClass( Test t= new TestSuite(NoTestCaseClass.class t.run(fResult assertEquals(1 fResult.runCount(  warning test assertTrue(! fResult.wasSuccessful( },11.0,1,This test case obsolete since compiler catch error 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful This test case is obsolete since the compiler will catch this error in 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful,0
5a933926b8a9f9639f176d2e,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, Optionally specify <code>timeout<code> in milliseconds to cause a test method to fail if it takes longer than that number of milliseconds.,2.5,1,Optionally specify timeout milliseconds cause test method fail takes longer number milliseconds Optionally specify timeout in millisecond to cause a test method to fail if it take longer than that number of millisecond,0
5a933926b8a9f9639f176d2f,r4.6,2009-04-14,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,10.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176d30,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. If the class has a suite( method it will be ignored. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,2.5,1,Create Request processed run tests class If class suite method ignored param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class If the class ha a suite method it will be ignored param clazz the class containing the test return a Request that will cause all test in the class to be run,0
5a933926b8a9f9639f176d31,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Convenient base class for Matchers that require a nonnull value of a specific type. This simply implements the null check checks the type and then casts. author Joe Walnes,3.0,1,Convenient base class Matchers require nonnull value specific type This simply implements null check checks type casts author Joe Walnes Convenient base class for Matchers that require a nonnull value of a specific type This simply implement the null check check the type and then cast author Joe Walnes,0
5a933926b8a9f9639f176d32,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176d33,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176d34,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176d35,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, The TemporaryFolder Rule allows creation of files and folders that are guaranteed to be deleted when the test method finishes (whether it passes or fails <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre>,2.5,1,The TemporaryFolder Rule allows creation files folders guaranteed deleted test method finishes whether passes fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot The TemporaryFolder Rule allows creation of file and folder that are guaranteed to be deleted when the test method finish whether it pass or fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot,0
5a933926b8a9f9639f176d36,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176d37,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176d38,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,2.5,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a933926b8a9f9639f176d39,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176d3a,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176d3b,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176d3c,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176d3d,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, This is cheating because it runs the whole class to get the warning for this method but we can't do better because JUnit 3.8's thrown away which method the warning is for.,6.0,1,This cheating runs whole class get warning method can't better JUnit 38's thrown away method warning This is cheating because it run the whole class to get the warning for this method but we can't do better because JUnit 38's thrown away which method the warning is for,-1
5a933926b8a9f9639f176d3e,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176d3f,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176d40,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176d41,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, Informs the result that a test will be started.,2.5,1,Informs result test started Informs the result that a test will be started,0
5a933926b8a9f9639f176d42,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, The maximum length for fExpected and fActual. If it is exceeded the strings should be shortened. see ComparisonCompactor,2.5,1,The maximum length fExpected fActual If exceeded strings shortened see ComparisonCompactor The maximum length for fExpected and fActual If it is exceeded the string should be shortened see ComparisonCompactor,0
5a933926b8a9f9639f176d43,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176d44,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner,1.5,1,Represents one problems encountered initializing Runner Represents one or more problem encountered while initializing a Runner,0
5a933926b8a9f9639f176d45,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176d46,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Runs the test corresponding to code child} which can be assumed to be an element of the list returned by link ParentRunnergetChildren(}. Subclasses are responsible for making sure that relevant test events are reported through code notifier},2.0,1,Runs test corresponding code child assumed element list returned link ParentRunnergetChildren Subclasses responsible making sure relevant test events reported code notifier Runs the test corresponding to code child which can be assumed to be an element of the list returned by link ParentRunnergetChildren Subclasses are responsible for making sure that relevant test event are reported through code notifier,0
5a933926b8a9f9639f176d47,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, Fails a test with the given message. param message the identifying message for the link AssertionError} (<code>null<code> okay see AssertionError,3.0,1,Fails test given message param message identifying message link AssertionError null okay see AssertionError Fails a test with the given message param message the identifying message for the link AssertionError null okay see AssertionError,-1
5a933926b8a9f9639f176d48,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static List&ampltObject[]&ampgt data( return Arrays.asList(new Object[][] Fibonacci   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,2.5,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176d49,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176d4a,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176d4b,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, Invoked when a test method fails param e param method,2.5,1,Invoked test method fails param e param method Invoked when a test method fails param e param method,0
5a933926b8a9f9639f176d4c,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,1.88,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176d4d,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond.,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond,0
5a933926b8a9f9639f176d4e,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,12.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,0
5a933926b8a9f9639f176d4f,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176d50,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, Overhead could be less than half a millisecond,2.0,1,Overhead could less half millisecond Overhead could be le than half a millisecond,0
5a933926b8a9f9639f176d51,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176d52,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176d53,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176d54,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176d55,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176d56,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, Also we are testing fail so we can't rely on fail( working.,5.0,1,Also testing fail can't rely fail working Also we are testing fail so we can't rely on fail working,-1
5a933926b8a9f9639f176d57,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ComparisonCriteria.java, TODO (Sep 8 2008 43612 PM check structure,1.88,1,TODO Sep 8 2008 43612 PM check structure TODO Sep 8 2008 43612 PM check structure,0
5a933926b8a9f9639f176d58,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, Fails a test with no message.,3.0,1,Fails test message Fails a test with no message,-1
5a933926b8a9f9639f176d59,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away.,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away,0
5a933926b8a9f9639f176d5a,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176d5b,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176d5c,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176d5d,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176d5e,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/InexactComparisonCriteria.java, TODO (Apr 29 2009 44346 PM Look for missing JavaDoc,1.88,1,TODO Apr 29 2009 44346 PM Look missing JavaDoc TODO Apr 29 2009 44346 PM Look for missing JavaDoc,0
5a933926b8a9f9639f176d5f,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176d60,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176d61,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176d62,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,2.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176d63,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176d64,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, Call to assume that <code>actual<code> satisfies the condition specified by <code>matcher<code>. If not the test halts and is ignored. Example <pre> assumeThat(1 is(1  passes foo(  will execute assumeThat(0 is(1  assumption failure! test halts int x = 1  0  will never execute <pre> param <T> the static type accepted by the matcher (this can flag obvious compiletime problems such as code assumeThat(1 is(a} param actual the computed value being compared param matcher an expression built of link Matcher}s specifying allowed values see org.hamcrest.CoreMatchers see org.junit.matchers.JUnitMatchers,0.0,1,Call assume actual satisfies condition specified matcher If test halts ignored Example assumeThat 1 1 passes foo execute assumeThat 0 1 assumption failure! test halts int x = 1 0 never execute param <T> static type accepted matcher flag obvious compiletime problems code assumeThat 1 param actual computed value compared param matcher expression built link Matcher specifying allowed values see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers Call to assume that actual satisfies the condition specified by matcher If not the test halt and is ignored Example assumeThat 1 is 1 pass foo will execute assumeThat 0 is 1 assumption failure! test halt int x = 1 0 will never execute param <T> the static type accepted by the matcher this can flag obvious compiletime problem such a code assumeThat 1 is a param actual the computed value being compared param matcher an expression built of link Matcher s specifying allowed value see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers,0
5a933926b8a9f9639f176d65,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, Should be able to remove this suppression in some brave new hamcrest world.,2.5,1,Should able remove suppression brave new hamcrest world Should be able to remove this suppression in some brave new hamcrest world,0
5a933926b8a9f9639f176d66,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176d67,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,3.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176d68,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Returns a link Statement} run all nonoverridden code After} methods on this class and superclasses before running code next} all After methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from After methods into a link MultipleFailureException}. deprecated Will be private soon use Rules instead,9.0,1,Returns link Statement run nonoverridden code After methods class superclasses running code next After methods always executed exceptions thrown previous steps combined necessary exceptions After methods link MultipleFailureException deprecated Will private soon use Rules instead Returns a link Statement run all nonoverridden code After method on this class and superclass before running code next all After method are always executed exception thrown by previous step are combined if necessary with exception from After method into a link MultipleFailureException deprecated Will be private soon use Rules instead,0
5a933926b8a9f9639f176d69,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176d6a,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176d6b,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176d6c,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, Create a <code>Description<code> named <code>name<code>. Generally you will add children to this <code>Description<code>. param name the name of the <code>Description<code> param annotations return a <code>Description<code> named <code>name<code>,0.0,1,Create Description named name Generally add children Description param name name Description param annotations return Description named name Create a Description named name Generally you will add child to this Description param name the name of the Description param annotation return a Description named name,0
5a933926b8a9f9639f176d6d,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, Internal use only. The Result's listener must be first.,2.0,1,Internal use The Result's listener must first Internal use only The Result's listener must be first,0
5a933926b8a9f9639f176d6e,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176d6f,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176d70,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that contain rules. Such a field must be public not static and a subtype of link MethodRule}. For more information see link MethodRule},2.0,1,Annotates fields contain rules Such field must public static subtype link MethodRule For information see link MethodRule Annotates field that contain rule Such a field must be public not static and a subtype of link MethodRule For more information see link MethodRule,0
5a933926b8a9f9639f176d71,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176d72,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Called when a test will not be run generally because a test method is annotated with link org.junit.Ignore}. param description describes the test that will not be run,2.0,1,Called test run generally test method annotated link orgjunitIgnore param description describes test run Called when a test will not be run generally because a test method is annotated with link orgjunitIgnore param description describes the test that will not be run,0
5a933926b8a9f9639f176d73,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176d74,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us,0
5a933926b8a9f9639f176d75,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite,0
5a933926b8a9f9639f176d76,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, This test case is obsolete since the compiler will catch this error in 1.5 public void testNoTestCaseClass( Test t= new TestSuite(NoTestCaseClass.class t.run(fResult assertEquals(1 fResult.runCount(  warning test assertTrue(! fResult.wasSuccessful( },8.5,1,This test case obsolete since compiler catch error 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful This test case is obsolete since the compiler will catch this error in 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful,0
5a933926b8a9f9639f176d77,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, Adds a Throwable to the table. Execution continues but the test will fail at the end.,3.5,1,Adds Throwable table Execution continues test fail end Adds a Throwable to the table Execution continues but the test will fail at the end,0
5a933926b8a9f9639f176d78,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, Optionally specify <code>timeout<code> in milliseconds to cause a test method to fail if it takes longer than that number of milliseconds.,2.5,1,Optionally specify timeout milliseconds cause test method fail takes longer number milliseconds Optionally specify timeout in millisecond to cause a test method to fail if it take longer than that number of millisecond,0
5a933926b8a9f9639f176d79,r4.7,2009-07-28,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176d7a,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. If the class has a suite( method it will be ignored. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,2.5,1,Create Request processed run tests class If class suite method ignored param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class If the class ha a suite method it will be ignored param clazz the class containing the test return a Request that will cause all test in the class to be run,0
5a933926b8a9f9639f176d7b,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Convenient base class for Matchers that require a nonnull value of a specific type. This simply implements the null check checks the type and then casts. author Joe Walnes,3.0,1,Convenient base class Matchers require nonnull value specific type This simply implements null check checks type casts author Joe Walnes Convenient base class for Matchers that require a nonnull value of a specific type This simply implement the null check check the type and then cast author Joe Walnes,0
5a933926b8a9f9639f176d7c,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176d7d,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176d7e,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176d7f,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, The TemporaryFolder Rule allows creation of files and folders that are guaranteed to be deleted when the test method finishes (whether it passes or fails <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre>,2.5,1,The TemporaryFolder Rule allows creation files folders guaranteed deleted test method finishes whether passes fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot The TemporaryFolder Rule allows creation of file and folder that are guaranteed to be deleted when the test method finish whether it pass or fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot,0
5a933926b8a9f9639f176d80,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176d81,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176d82,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,2.5,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a933926b8a9f9639f176d83,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176d84,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176d85,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176d86,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176d87,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, This is cheating because it runs the whole class to get the warning for this method but we can't do better because JUnit 3.8's thrown away which method the warning is for.,6.0,1,This cheating runs whole class get warning method can't better JUnit 38's thrown away method warning This is cheating because it run the whole class to get the warning for this method but we can't do better because JUnit 38's thrown away which method the warning is for,-1
5a933926b8a9f9639f176d88,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176d89,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176d8a,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176d8b,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, Informs the result that a test will be started.,2.5,1,Informs result test started Informs the result that a test will be started,0
5a933926b8a9f9639f176d8c,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, The maximum length for fExpected and fActual. If it is exceeded the strings should be shortened. see ComparisonCompactor,2.5,1,The maximum length fExpected fActual If exceeded strings shortened see ComparisonCompactor The maximum length for fExpected and fActual If it is exceeded the string should be shortened see ComparisonCompactor,0
5a933926b8a9f9639f176d8d,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176d8e,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner,1.5,1,Represents one problems encountered initializing Runner Represents one or more problem encountered while initializing a Runner,0
5a933926b8a9f9639f176d8f,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176d90,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Runs the test corresponding to code child} which can be assumed to be an element of the list returned by link ParentRunnergetChildren(}. Subclasses are responsible for making sure that relevant test events are reported through code notifier},2.0,1,Runs test corresponding code child assumed element list returned link ParentRunnergetChildren Subclasses responsible making sure relevant test events reported code notifier Runs the test corresponding to code child which can be assumed to be an element of the list returned by link ParentRunnergetChildren Subclasses are responsible for making sure that relevant test event are reported through code notifier,0
5a933926b8a9f9639f176d91,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, Fails a test with the given message. param message the identifying message for the link AssertionError} (<code>null<code> okay see AssertionError,3.0,1,Fails test given message param message identifying message link AssertionError null okay see AssertionError Fails a test with the given message param message the identifying message for the link AssertionError null okay see AssertionError,-1
5a933926b8a9f9639f176d92,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static List&ampltObject[]&ampgt data( return Arrays.asList(new Object[][] Fibonacci   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,2.5,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object Fibonacci 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176d93,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176d94,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176d95,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, Invoked when a test method fails param e param method,2.5,1,Invoked test method fails param e param method Invoked when a test method fails param e param method,0
5a933926b8a9f9639f176d96,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,1.88,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176d97,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond.,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond,0
5a933926b8a9f9639f176d98,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,12.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,0
5a933926b8a9f9639f176d99,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176d9a,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, Overhead could be less than half a millisecond,2.0,1,Overhead could less half millisecond Overhead could be le than half a millisecond,0
5a933926b8a9f9639f176d9b,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176d9c,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176d9d,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176d9e,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176d9f,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176da0,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, Also we are testing fail so we can't rely on fail( working.,5.0,1,Also testing fail can't rely fail working Also we are testing fail so we can't rely on fail working,-1
5a933926b8a9f9639f176da1,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, Fails a test with no message.,3.0,1,Fails test message Fails a test with no message,-1
5a933926b8a9f9639f176da2,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away.,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away,0
5a933926b8a9f9639f176da3,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176da4,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176da5,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176da6,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176da7,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176da8,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176da9,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,2.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176daa,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176dab,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176dac,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, Call to assume that <code>actual<code> satisfies the condition specified by <code>matcher<code>. If not the test halts and is ignored. Example <pre> assumeThat(1 is(1  passes foo(  will execute assumeThat(0 is(1  assumption failure! test halts int x = 1  0  will never execute <pre> param <T> the static type accepted by the matcher (this can flag obvious compiletime problems such as code assumeThat(1 is(a} param actual the computed value being compared param matcher an expression built of link Matcher}s specifying allowed values see org.hamcrest.CoreMatchers see org.junit.matchers.JUnitMatchers,0.0,1,Call assume actual satisfies condition specified matcher If test halts ignored Example assumeThat 1 1 passes foo execute assumeThat 0 1 assumption failure! test halts int x = 1 0 never execute param <T> static type accepted matcher flag obvious compiletime problems code assumeThat 1 param actual computed value compared param matcher expression built link Matcher specifying allowed values see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers Call to assume that actual satisfies the condition specified by matcher If not the test halt and is ignored Example assumeThat 1 is 1 pass foo will execute assumeThat 0 is 1 assumption failure! test halt int x = 1 0 will never execute param <T> the static type accepted by the matcher this can flag obvious compiletime problem such a code assumeThat 1 is a param actual the computed value being compared param matcher an expression built of link Matcher s specifying allowed value see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers,0
5a933926b8a9f9639f176dad,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, Should be able to remove this suppression in some brave new hamcrest world.,2.5,1,Should able remove suppression brave new hamcrest world Should be able to remove this suppression in some brave new hamcrest world,0
5a933926b8a9f9639f176dae,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176daf,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,3.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176db0,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Returns a link Statement} run all nonoverridden code After} methods on this class and superclasses before running code next} all After methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from After methods into a link MultipleFailureException}. deprecated Will be private soon use Rules instead,9.0,1,Returns link Statement run nonoverridden code After methods class superclasses running code next After methods always executed exceptions thrown previous steps combined necessary exceptions After methods link MultipleFailureException deprecated Will private soon use Rules instead Returns a link Statement run all nonoverridden code After method on this class and superclass before running code next all After method are always executed exception thrown by previous step are combined if necessary with exception from After method into a link MultipleFailureException deprecated Will be private soon use Rules instead,0
5a933926b8a9f9639f176db1,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176db2,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176db3,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176db4,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, Create a <code>Description<code> named <code>name<code>. Generally you will add children to this <code>Description<code>. param name the name of the <code>Description<code> param annotations return a <code>Description<code> named <code>name<code>,0.0,1,Create Description named name Generally add children Description param name name Description param annotations return Description named name Create a Description named name Generally you will add child to this Description param name the name of the Description param annotation return a Description named name,0
5a933926b8a9f9639f176db5,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, Internal use only. The Result's listener must be first.,2.0,1,Internal use The Result's listener must first Internal use only The Result's listener must be first,0
5a933926b8a9f9639f176db6,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176db7,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176db8,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that contain rules. Such a field must be public not static and a subtype of link MethodRule}. For more information see link MethodRule},2.0,1,Annotates fields contain rules Such field must public static subtype link MethodRule For information see link MethodRule Annotates field that contain rule Such a field must be public not static and a subtype of link MethodRule For more information see link MethodRule,0
5a933926b8a9f9639f176db9,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176dba,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Called when a test will not be run generally because a test method is annotated with link org.junit.Ignore}. param description describes the test that will not be run,2.0,1,Called test run generally test method annotated link orgjunitIgnore param description describes test run Called when a test will not be run generally because a test method is annotated with link orgjunitIgnore param description describes the test that will not be run,0
5a933926b8a9f9639f176dbb,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176dbc,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us,0
5a933926b8a9f9639f176dbd,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite,0
5a933926b8a9f9639f176dbe,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, This test case is obsolete since the compiler will catch this error in 1.5 public void testNoTestCaseClass( Test t= new TestSuite(NoTestCaseClass.class t.run(fResult assertEquals(1 fResult.runCount(  warning test assertTrue(! fResult.wasSuccessful( },8.5,1,This test case obsolete since compiler catch error 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful This test case is obsolete since the compiler will catch this error in 15 testNoTestCaseClass Test t= new TestSuite NoTestCaseClassclass trun fResult assertEquals 1 fResultrunCount warning test assertTrue ! fResultwasSuccessful,0
5a933926b8a9f9639f176dbf,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, Adds a Throwable to the table. Execution continues but the test will fail at the end.,3.5,1,Adds Throwable table Execution continues test fail end Adds a Throwable to the table Execution continues but the test will fail at the end,0
5a933926b8a9f9639f176dc0,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, Optionally specify <code>timeout<code> in milliseconds to cause a test method to fail if it takes longer than that number of milliseconds.,2.5,1,Optionally specify timeout milliseconds cause test method fail takes longer number milliseconds Optionally specify timeout in millisecond to cause a test method to fail if it take longer than that number of millisecond,0
5a933926b8a9f9639f176dc1,r4.8,2009-12-01,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176dc2,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Returns a Request whose Tests can be run in a certain order defined by <code>comparator<code> For example here is code to run a test suite in alphabetical order <pre>private static Comparator<Description> forward(return new Comparator<Description>(public int compare(Description o1 Description o2return o1.getDisplayName(.compareTo(o2.getDisplayName(}}}public static main(new JUnitCore(.run(Request.aClass(AllTests.class.sortWith(forward(} <pre> param comparator definition of the order of the tests in this Request return a Request with ordered Tests,2.0,1,Returns Request whose Tests run certain order defined comparator For example code run test suite alphabetical order private static Comparator<Description> forward return new Comparator<Description> public int compare Description o1 Description o2return o1getDisplayName compareTo o2getDisplayName public static main new JUnitCore run RequestaClass AllTestsclasssortWith forward param comparator definition order tests Request return Request ordered Tests Returns a Request whose Tests can be run in a certain order defined by comparator For example here is code to run a test suite in alphabetical order private static Comparator<Description> forward return new Comparator<Description> public int compare Description o1 Description o2return o1getDisplayName compareTo o2getDisplayName public static main new JUnitCore run RequestaClass AllTestsclasssortWith forward param comparator definition of the order of the test in this Request return a Request with ordered Tests,0
5a933926b8a9f9639f176dc3,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Subclasses should implement this. The item will already have been checked for the specific type and will never be null.,3.0,1,Subclasses implement The item already checked specific type never null Subclasses should implement this The item will already have been checked for the specific type and will never be null,0
5a933926b8a9f9639f176dc4,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176dc5,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176dc6,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176dc7,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, Delete all files and folders under the temporary folder. Usually not called directly since it is automatically applied by the link Rule},4.0,1,Delete files folders temporary folder Usually called directly since automatically applied link Rule Delete all file and folder under the temporary folder Usually not called directly since it is automatically applied by the link Rule,0
5a933926b8a9f9639f176dc8,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176dc9,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176dca,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/ClassRule.java, Annotates static fields that contain rules. Such a field must be public static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link BeforeClass} methods then the entire body of the test class (all contained methods if it is a standard JUnit test class or all contained classes if it is a link org.junit.runners.Suite} and finally any link AfterClass} methods. The statement passed to the link org.junit.rules.TestRule} will never throw an exception and throwing an exception from the link org.junit.rules.TestRule} will result in undefined behavior. This means that some link org.junit.rules.TestRule}s such as link org.junit.rules.ErrorCollector} link org.junit.rules.ExpectedException} and link org.junit.rules.Timeout} have undefined behavior when used as link ClassRule}s. If there are multiple annotated link ClassRule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test suite that connects to a server once before all the test classes run and disconnects after they are finished <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource resource= new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } <pre> For more information and more examples see link org.junit.rules.TestRule}.,4.5,1,Annotates static fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link BeforeClass methods entire body test class contained methods standard JUnit test class contained classes link orgjunitrunnersSuite finally link AfterClass methods The statement passed link orgjunitrulesTestRule never throw exception throwing exception link orgjunitrulesTestRule result undefined behavior This means link orgjunitrulesTestRule link orgjunitrulesErrorCollector link orgjunitrulesExpectedException link orgjunitrulesTimeout undefined behavior used link ClassRule If multiple annotated link ClassRule class applied order depends JVM's implementation reflection API undefined general For example test suite connects server test classes run disconnects finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect For information examples see link orgjunitrulesTestRule Annotates static field that contain rule Such a field must be public static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link BeforeClass method then the entire body of the test class all contained method if it is a standard JUnit test class or all contained class if it is a link orgjunitrunnersSuite and finally any link AfterClass method The statement passed to the link orgjunitrulesTestRule will never throw an exception and throwing an exception from the link orgjunitrulesTestRule will result in undefined behavior This mean that some link orgjunitrulesTestRule s such a link orgjunitrulesErrorCollector link orgjunitrulesExpectedException and link orgjunitrulesTimeout have undefined behavior when used a link ClassRule s If there are multiple annotated link ClassRule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test suite that connects to a server once before all the test class run and disconnect after they are finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect For more information and more example see link orgjunitrulesTestRule,0
5a933926b8a9f9639f176dcb,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,2.5,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a933926b8a9f9639f176dcc,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176dcd,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176dce,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176dcf,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176dd0,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, Run all the tests contained in <code>request<code>. This variant should be used if code core} has attached listeners that this run should notify. param request the request describing tests param core a JUnitCore to delegate to. return a link Result} describing the details of the test run and the failed tests.,2.5,1,Run tests contained request This variant used code core attached listeners run notify param request request describing tests param core JUnitCore delegate return link Result describing details test run failed tests Run all the test contained in request This variant should be used if code core ha attached listener that this run should notify param request the request describing test param core a JUnitCore to delegate to return a link Result describing the detail of the test run and the failed test,0
5a933926b8a9f9639f176dd1,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176dd2,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176dd3,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176dd4,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestRule.java, A TestRule is an alteration in how a test method or set of test methods is run and reported. A link TestRule} may add additional checks that cause a test that would otherwise fail to pass or it may perform necessary setup or cleanup for tests or it may observe test execution to report it elsewhere. link TestRule}s can do everything that could be done previously with methods annotated with link org.junit.Before} link org.junit.After} link org.junit.BeforeClass} or link org.junit.AfterClass} but they are more powerful and more easily shared between projects and classes. The default JUnit test runners for suites and individual test cases recognize link TestRule}s introduced in two different ways. link org.junit.Rule} annotates methodlevel link TestRule}s and link org.junit.ClassRule} annotates classlevel link TestRule}s. See Javadoc for those annotations for more information. Multiple link TestRule}s can be applied to a test or suite execution. The link Statement} that executes the method or suite is passed to each annotated link org.junit.Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link org.junit.Rule} if any. For examples of how this can be useful see these provided TestRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatcher} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,19.5,1,TestRule alteration test method set test methods run reported link TestRule may add additional checks cause test would otherwise fail pass may perform necessary setup cleanup tests may observe test execution report elsewhere link TestRule everything could done previously methods annotated link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass link orgjunitAfterClass powerful easily shared projects classes The default JUnit test runners suites individual test cases recognize link TestRule introduced two different ways link orgjunitRule annotates methodlevel link TestRule link orgjunitClassRule annotates classlevel link TestRule See Javadoc annotations information Multiple link TestRule applied test suite execution The link Statement executes method suite passed annotated link orgjunitRule turn may return substitute modified link Statement passed next link orgjunitRule For examples useful see provided TestRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatcher add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> TestRule is an alteration in how a test method or set of test method is run and reported link TestRule may add additional check that cause a test that would otherwise fail to pas or it may perform necessary setup or cleanup for test or it may observe test execution to report it elsewhere link TestRule s can do everything that could be done previously with method annotated with link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass or link orgjunitAfterClass but they are more powerful and more easily shared between project and class The default JUnit test runner for suite and individual test case recognize link TestRule s introduced in two different way link orgjunitRule annotates methodlevel link TestRule s and link orgjunitClassRule annotates classlevel link TestRule s See Javadoc for those annotation for more information Multiple link TestRule s can be applied to a test or suite execution The link Statement that executes the method or suite is passed to each annotated link orgjunitRule in turn and each may return a substitute or modified link Statement which is passed to the next link orgjunitRule if any For example of how this can be useful see these provided TestRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatcher add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,1
5a933926b8a9f9639f176dd5,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, Informs the result that a test will be started.,2.5,1,Informs result test started Informs the result that a test will be started,0
5a933926b8a9f9639f176dd6,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. Inspired by a patch from Alex Chaffee (alexpurpletech.com,2.5,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom,1
5a933926b8a9f9639f176dd7,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner,1.5,1,Represents one problems encountered initializing Runner Represents one or more problem encountered while initializing a Runner,0
5a933926b8a9f9639f176dd8,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176dd9,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176dda,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Returns a link Statement} run all nonoverridden code AfterClass} methods on this class and superclasses before executing code statement} all AfterClass methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from AfterClass methods into a link MultipleFailureException}.,3.0,1,Returns link Statement run nonoverridden code AfterClass methods class superclasses executing code statement AfterClass methods always executed exceptions thrown previous steps combined necessary exceptions AfterClass methods link MultipleFailureException Returns a link Statement run all nonoverridden code AfterClass method on this class and superclass before executing code statement all AfterClass method are always executed exception thrown by previous step are combined if necessary with exception from AfterClass method into a link MultipleFailureException,0
5a933926b8a9f9639f176ddb,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatcher.java, TestWatcher is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatcher( &amp064Override protected void failed(Description d watchedLog+= d + &ampquotn&ampquot } &amp064Override protected void succeeded(Description d watchedLog+= d + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre>,3.75,1,TestWatcher base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatcher Override protected void failed Description watchedLog+= + &ampquotn&ampquot Override protected void succeeded Description watchedLog+= + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds TestWatcher is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatcher Override protected void failed Description d watchedLog+= d + &ampquotn&ampquot Override protected void succeeded Description d watchedLog+= d + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds,0
5a933926b8a9f9639f176ddc,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, Fails a test with the given message. param message the identifying message for the link AssertionError} (<code>null<code> okay see AssertionError,3.0,1,Fails test given message param message identifying message link AssertionError null okay see AssertionError Fails a test with the given message param message the identifying message for the link AssertionError null okay see AssertionError,-1
5a933926b8a9f9639f176ddd,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static List&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,2.5,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176dde,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176ddf,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176de0,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, TestWatchman is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatchman( &amp064Override public void failed(Throwable e FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + e.getClass(.getSimpleName( + &ampquotn&ampquot } &amp064Override public void succeeded(FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> deprecated link MethodRule} is deprecated. Use link TestWatcher} implements link TestRule} instead.,10.75,1,TestWatchman base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule deprecated Use link TestWatcher implements link TestRule instead TestWatchman is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule is deprecated Use link TestWatcher implement link TestRule instead,0
5a933926b8a9f9639f176de1,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,1.88,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176de2,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond.,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond,0
5a933926b8a9f9639f176de3,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,12.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,0
5a933926b8a9f9639f176de4,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176de5,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, Overhead could be less than half a millisecond,2.0,1,Overhead could less half millisecond Overhead could be le than half a millisecond,0
5a933926b8a9f9639f176de6,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176de7,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176de8,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176de9,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176dea,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176deb,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, We have to throw the exception manually.,2.6,1,We throw exception manually We have to throw the exception manually,0
5a933926b8a9f9639f176dec,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, Fails a test with no message.,3.0,1,Fails test message Fails a test with no message,-1
5a933926b8a9f9639f176ded,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away.,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away,0
5a933926b8a9f9639f176dee,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176def,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176df0,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176df1,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176df2,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176df3,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176df4,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176df5,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,2.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176df6,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176df7,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, Call to assume that <code>actual<code> satisfies the condition specified by <code>matcher<code>. If not the test halts and is ignored. Example <pre> assumeThat(1 is(1  passes foo(  will execute assumeThat(0 is(1  assumption failure! test halts int x = 1  0  will never execute <pre> param <T> the static type accepted by the matcher (this can flag obvious compiletime problems such as code assumeThat(1 is(a} param actual the computed value being compared param matcher an expression built of link Matcher}s specifying allowed values see org.hamcrest.CoreMatchers see org.junit.matchers.JUnitMatchers,0.0,1,Call assume actual satisfies condition specified matcher If test halts ignored Example assumeThat 1 1 passes foo execute assumeThat 0 1 assumption failure! test halts int x = 1 0 never execute param <T> static type accepted matcher flag obvious compiletime problems code assumeThat 1 param actual computed value compared param matcher expression built link Matcher specifying allowed values see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers Call to assume that actual satisfies the condition specified by matcher If not the test halt and is ignored Example assumeThat 1 is 1 pass foo will execute assumeThat 0 is 1 assumption failure! test halt int x = 1 0 will never execute param <T> the static type accepted by the matcher this can flag obvious compiletime problem such a code assumeThat 1 is a param actual the computed value being compared param matcher an expression built of link Matcher s specifying allowed value see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers,0
5a933926b8a9f9639f176df8,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, Adds to the list of requirements for any thrown exception that it should be an instance of code type},2.5,1,Adds list requirements thrown exception instance code type Adds to the list of requirement for any thrown exception that it should be an instance of code type,0
5a933926b8a9f9639f176df9,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176dfa,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,3.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176dfb,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Returns a link Statement} if code method}'s code Test} annotation has the code expecting} attribute return normally only if code next} throws an exception of the correct type and throw an exception otherwise. deprecated Will be private soon use Rules instead,6.0,1,Returns link Statement code method 's code Test annotation code expecting attribute return normally code next throws exception correct type throw exception otherwise deprecated Will private soon use Rules instead Returns a link Statement if code method 's code Test annotation ha the code expecting attribute return normally only if code next throw an exception of the correct type and throw an exception otherwise deprecated Will be private soon use Rules instead,0
5a933926b8a9f9639f176dfc,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176dfd,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176dfe,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176dff,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, Ask that the tests run stop before starting the next test. Phrased politely because the test currently running will not be interrupted. It seems a little odd to put this functionality here but the <code>RunNotifier<code> is the only object guaranteed to be shared amongst the many runners involved.,2.0,1,Ask tests run stop starting next test Phrased politely test currently running interrupted It seems little odd put functionality RunNotifier object guaranteed shared amongst many runners involved Ask that the test run stop before starting the next test Phrased politely because the test currently running will not be interrupted It seems a little odd to put this functionality here but the RunNotifier is the only object guaranteed to be shared amongst the many runner involved,0
5a933926b8a9f9639f176e00,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, Create a <code>Description<code> of a single test named <code>name<code> in the class <code>clazz<code>. Generally this will be a leaf <code>Description<code>. (This remains for binary compatibility with clients of JUnit 4.3 param clazz the class of the test param name the name of the test (a method name for test annotated with link org.junit.Test} return a <code>Description<code> named <code>name<code>,2.5,1,Create Description single test named name class clazz Generally leaf Description This remains binary compatibility clients JUnit 43 param clazz class test param name name test method name test annotated link orgjunitTest return Description named name Create a Description of a single test named name in the class clazz Generally this will be a leaf Description This remains for binary compatibility with client of JUnit 43 param clazz the class of the test param name the name of the test a method name for test annotated with link orgjunitTest return a Description named name,0
5a933926b8a9f9639f176e01,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176e02,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176e03,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that contain rules. Such a field must be public not static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link Before} methods then the link Test} method and finally any link After} methods throwing an exception if any of these fail. If there are multiple annotated link Rule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test class that creates a temporary folder before each test method and deletes it after each <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> For more information and more examples see link org.junit.rules.TestRule}. Note for backwards compatibility this annotation may also mark fields of type link org.junit.rules.MethodRule} which will be honored. However this is a deprecated interface and feature.,18.25,1,Annotates fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link Before methods link Test method finally link After methods throwing exception fail If multiple annotated link Rule class applied order depends JVM's implementation reflection API undefined general For example test class creates temporary folder test method deletes public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For information examples see link orgjunitrulesTestRule Note backwards compatibility annotation may also mark fields type link orgjunitrulesMethodRule honored However deprecated interface feature Annotates field that contain rule Such a field must be public not static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link Before method then the link Test method and finally any link After method throwing an exception if any of these fail If there are multiple annotated link Rule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test class that creates a temporary folder before each test method and deletes it after each public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For more information and more example see link orgjunitrulesTestRule Note for backwards compatibility this annotation may also mark field of type link orgjunitrulesMethodRule which will be honored However this is a deprecated interface and feature,0
5a933926b8a9f9639f176e04,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176e05,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Called when an atomic test fails. param failure describes the test that failed and the exception that was thrown,2.5,1,Called atomic test fails param failure describes test failed exception thrown Called when an atomic test fails param failure describes the test that failed and the exception that wa thrown,0
5a933926b8a9f9639f176e06,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176e07,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us,0
5a933926b8a9f9639f176e08,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/Categories.java, the way filters are implemented makes this unnecessarily complicated buggy and difficult to specify. A new way of handling filters could someday enable a better new implementation.,3.0,1,way filters implemented makes unnecessarily complicated buggy difficult specify new way handling filters could someday enable better new implementation the way filter are implemented make this unnecessarily complicated buggy and difficult to specify new way of handling filter could someday enable a better new implementation,0
5a933926b8a9f9639f176e09,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite,0
5a933926b8a9f9639f176e0a,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, Adds a failure to the table if code matcher} does not match code value}. Execution continues but the test will fail at the end if the match fails.,3.5,1,Adds failure table code matcher match code value Execution continues test fail end match fails Adds a failure to the table if code matcher doe not match code value Execution continues but the test will fail at the end if the match fails,0
5a933926b8a9f9639f176e0b,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,3.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a933926b8a9f9639f176e0c,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, Optionally specify <code>timeout<code> in milliseconds to cause a test method to fail if it takes longer than that number of milliseconds.,2.5,1,Optionally specify timeout milliseconds cause test method fail takes longer number milliseconds Optionally specify timeout in millisecond to cause a test method to fail if it take longer than that number of millisecond,0
5a933926b8a9f9639f176e0d,r4.9,2011-08-22,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176e0e,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. The odd name is necessary because <code>class<code> is a reserved word. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,3.0,1,Create Request processed run tests class The odd name necessary class reserved word param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class The odd name is necessary because class is a reserved word param clazz the class containing the test return a Request that will cause all test in the class to be run,-1
5a933926b8a9f9639f176e0f,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Subclasses should implement this. The item will already have been checked for the specific type and will never be null.,3.0,1,Subclasses implement The item already checked specific type never null Subclasses should implement this The item will already have been checked for the specific type and will never be null,0
5a933926b8a9f9639f176e10,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176e11,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176e12,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176e13,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, Returns a new fresh folder with a random name under the temporary folder.,4.0,1,Returns new fresh folder random name temporary folder Returns a new fresh folder with a random name under the temporary folder,0
5a933926b8a9f9639f176e14,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176e15,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176e16,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/ClassRule.java, Annotates static fields that contain rules. Such a field must be public static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link BeforeClass} methods then the entire body of the test class (all contained methods if it is a standard JUnit test class or all contained classes if it is a link org.junit.runners.Suite} and finally any link AfterClass} methods. The statement passed to the link org.junit.rules.TestRule} will never throw an exception and throwing an exception from the link org.junit.rules.TestRule} will result in undefined behavior. This means that some link org.junit.rules.TestRule}s such as link org.junit.rules.ErrorCollector} link org.junit.rules.ExpectedException} and link org.junit.rules.Timeout} have undefined behavior when used as link ClassRule}s. If there are multiple annotated link ClassRule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test suite that connects to a server once before all the test classes run and disconnects after they are finished <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource resource= new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } <pre> For more information and more examples see link org.junit.rules.TestRule}.,4.5,1,Annotates static fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link BeforeClass methods entire body test class contained methods standard JUnit test class contained classes link orgjunitrunnersSuite finally link AfterClass methods The statement passed link orgjunitrulesTestRule never throw exception throwing exception link orgjunitrulesTestRule result undefined behavior This means link orgjunitrulesTestRule link orgjunitrulesErrorCollector link orgjunitrulesExpectedException link orgjunitrulesTimeout undefined behavior used link ClassRule If multiple annotated link ClassRule class applied order depends JVM's implementation reflection API undefined general For example test suite connects server test classes run disconnects finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect For information examples see link orgjunitrulesTestRule Annotates static field that contain rule Such a field must be public static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link BeforeClass method then the entire body of the test class all contained method if it is a standard JUnit test class or all contained class if it is a link orgjunitrunnersSuite and finally any link AfterClass method The statement passed to the link orgjunitrulesTestRule will never throw an exception and throwing an exception from the link orgjunitrulesTestRule will result in undefined behavior This mean that some link orgjunitrulesTestRule s such a link orgjunitrulesErrorCollector link orgjunitrulesExpectedException and link orgjunitrulesTimeout have undefined behavior when used a link ClassRule s If there are multiple annotated link ClassRule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test suite that connects to a server once before all the test class run and disconnect after they are finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect For more information and more example see link orgjunitrulesTestRule,0
5a933926b8a9f9639f176e17,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, However you need to add the ea VM argument when running.,2.5,1,However need add ea VM argument running However you need to add the ea VM argument when running,0
5a933926b8a9f9639f176e18,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176e19,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176e1a,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176e1b,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176e1c,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, Run all the tests contained in <code>request<code>. This variant should be used if code core} has attached listeners that this run should notify. param request the request describing tests param core a JUnitCore to delegate to. return a link Result} describing the details of the test run and the failed tests.,2.5,1,Run tests contained request This variant used code core attached listeners run notify param request request describing tests param core JUnitCore delegate return link Result describing details test run failed tests Run all the test contained in request This variant should be used if code core ha attached listener that this run should notify param request the request describing test param core a JUnitCore to delegate to return a link Result describing the detail of the test run and the failed test,0
5a933926b8a9f9639f176e1d,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176e1e,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176e1f,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176e20,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestRule.java, A TestRule is an alteration in how a test method or set of test methods is run and reported. A link TestRule} may add additional checks that cause a test that would otherwise fail to pass or it may perform necessary setup or cleanup for tests or it may observe test execution to report it elsewhere. link TestRule}s can do everything that could be done previously with methods annotated with link org.junit.Before} link org.junit.After} link org.junit.BeforeClass} or link org.junit.AfterClass} but they are more powerful and more easily shared between projects and classes. The default JUnit test runners for suites and individual test cases recognize link TestRule}s introduced in two different ways. link org.junit.Rule} annotates methodlevel link TestRule}s and link org.junit.ClassRule} annotates classlevel link TestRule}s. See Javadoc for those annotations for more information. Multiple link TestRule}s can be applied to a test or suite execution. The link Statement} that executes the method or suite is passed to each annotated link org.junit.Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link org.junit.Rule} if any. For examples of how this can be useful see these provided TestRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatcher} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,19.5,1,TestRule alteration test method set test methods run reported link TestRule may add additional checks cause test would otherwise fail pass may perform necessary setup cleanup tests may observe test execution report elsewhere link TestRule everything could done previously methods annotated link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass link orgjunitAfterClass powerful easily shared projects classes The default JUnit test runners suites individual test cases recognize link TestRule introduced two different ways link orgjunitRule annotates methodlevel link TestRule link orgjunitClassRule annotates classlevel link TestRule See Javadoc annotations information Multiple link TestRule applied test suite execution The link Statement executes method suite passed annotated link orgjunitRule turn may return substitute modified link Statement passed next link orgjunitRule For examples useful see provided TestRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatcher add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> TestRule is an alteration in how a test method or set of test method is run and reported link TestRule may add additional check that cause a test that would otherwise fail to pas or it may perform necessary setup or cleanup for test or it may observe test execution to report it elsewhere link TestRule s can do everything that could be done previously with method annotated with link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass or link orgjunitAfterClass but they are more powerful and more easily shared between project and class The default JUnit test runner for suite and individual test case recognize link TestRule s introduced in two different way link orgjunitRule annotates methodlevel link TestRule s and link orgjunitClassRule annotates classlevel link TestRule s See Javadoc for those annotation for more information Multiple link TestRule s can be applied to a test or suite execution The link Statement that executes the method or suite is passed to each annotated link orgjunitRule in turn and each may return a substitute or modified link Statement which is passed to the next link orgjunitRule if any For example of how this can be useful see these provided TestRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatcher add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,1
5a933926b8a9f9639f176e21,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, Informs the result that a test will be started.,2.5,1,Informs result test started Informs the result that a test will be started,0
5a933926b8a9f9639f176e22,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. Inspired by a patch from Alex Chaffee (alexpurpletech.com,2.5,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom,1
5a933926b8a9f9639f176e23,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner,1.5,1,Represents one problems encountered initializing Runner Represents one or more problem encountered while initializing a Runner,0
5a933926b8a9f9639f176e24,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176e25,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176e26,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Provides most of the functionality specific to a Runner that implements a parent node in the test tree with children defined by objects of some data type code T}. (For link BlockJUnit4ClassRunner} code T} is link Method} . For link Suite} code T} is link Class}. Subclasses must implement finding the children of the node describing each child and running each child. ParentRunner will filter and sort children handle code BeforeClass} and code AfterClass} methods handle annotated link ClassRule}s create a composite link Description} and run children sequentially.,0.0,1,Provides functionality specific Runner implements parent node test tree children defined objects data type code T For link BlockJUnit4ClassRunner code T link Method For link Suite code T link Class Subclasses must implement finding children node describing child running child ParentRunner filter sort children handle code BeforeClass code AfterClass methods handle annotated link ClassRule create composite link Description run children sequentially Provides most of the functionality specific to a Runner that implement a parent node in the test tree with child defined by object of some data type code T For link BlockJUnit4ClassRunner code T is link Method For link Suite code T is link Class Subclasses must implement finding the child of the node describing each child and running each child ParentRunner will filter and sort child handle code BeforeClass and code AfterClass method handle annotated link ClassRule s create a composite link Description and run child sequentially,0
5a933926b8a9f9639f176e27,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatcher.java, Invoked when a test fails param e param description,2.5,1,Invoked test fails param e param description Invoked when a test fails param e param description,0
5a933926b8a9f9639f176e28,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, Fails a test with the given message. param message the identifying message for the link AssertionError} (<code>null<code> okay see AssertionError,3.0,1,Fails test given message param message identifying message link AssertionError null okay see AssertionError Fails a test with the given message param message the identifying message for the link AssertionError null okay see AssertionError,-1
5a933926b8a9f9639f176e29,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static List&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]  0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,2.5,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176e2a,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176e2b,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176e2c,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkMethod.java, Returns true iff this is a noarg method that returns a value assignable to code type} deprecated This is used only by the Theories runner and does not use all the generic type info that it ought to. It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf(FrameworkMethod once Theories moves to junitcontrib.,5.5,1,Returns true iff noarg method returns value assignable code type deprecated This used Theories runner use generic type info ought It replaced forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod Theories moves junitcontrib Returns true iff this is a noarg method that return a value assignable to code type deprecated This is used only by the Theories runner and doe not use all the generic type info that it ought to It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod once Theories move to junitcontrib,0
5a933926b8a9f9639f176e2d,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, TestWatchman is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatchman( &amp064Override public void failed(Throwable e FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + e.getClass(.getSimpleName( + &ampquotn&ampquot } &amp064Override public void succeeded(FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> deprecated link MethodRule} is deprecated. Use link TestWatcher} implements link TestRule} instead.,10.75,1,TestWatchman base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule deprecated Use link TestWatcher implements link TestRule instead TestWatchman is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule is deprecated Use link TestWatcher implement link TestRule instead,0
5a933926b8a9f9639f176e2e,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,1.88,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176e2f,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond.,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond,0
5a933926b8a9f9639f176e30,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,12.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,0
5a933926b8a9f9639f176e31,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176e32,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, Overhead could be less than half a millisecond,2.0,1,Overhead could less half millisecond Overhead could be le than half a millisecond,0
5a933926b8a9f9639f176e33,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176e34,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176e35,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176e36,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176e37,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176e38,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, Also we are testing fail so we can't rely on fail( working.,5.0,1,Also testing fail can't rely fail working Also we are testing fail so we can't rely on fail working,-1
5a933926b8a9f9639f176e39,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, Fails a test with no message.,3.0,1,Fails test message Fails a test with no message,-1
5a933926b8a9f9639f176e3a,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away.,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away,0
5a933926b8a9f9639f176e3b,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176e3c,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176e3d,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176e3e,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176e3f,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176e40,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176e41,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176e42,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,2.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176e43,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176e44,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, Call to assume that <code>actual<code> satisfies the condition specified by <code>matcher<code>. If not the test halts and is ignored. Example <pre> assumeThat(1 is(1  passes foo(  will execute assumeThat(0 is(1  assumption failure! test halts int x = 1  0  will never execute <pre> param <T> the static type accepted by the matcher (this can flag obvious compiletime problems such as code assumeThat(1 is(a} param actual the computed value being compared param matcher an expression built of link Matcher}s specifying allowed values see org.hamcrest.CoreMatchers see org.junit.matchers.JUnitMatchers,0.0,1,Call assume actual satisfies condition specified matcher If test halts ignored Example assumeThat 1 1 passes foo execute assumeThat 0 1 assumption failure! test halts int x = 1 0 never execute param <T> static type accepted matcher flag obvious compiletime problems code assumeThat 1 param actual computed value compared param matcher expression built link Matcher specifying allowed values see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers Call to assume that actual satisfies the condition specified by matcher If not the test halt and is ignored Example assumeThat 1 is 1 pass foo will execute assumeThat 0 is 1 assumption failure! test halt int x = 1 0 will never execute param <T> the static type accepted by the matcher this can flag obvious compiletime problem such a code assumeThat 1 is a param actual the computed value being compared param matcher an expression built of link Matcher s specifying allowed value see orghamcrestCoreMatchers see orgjunitmatchersJUnitMatchers,0
5a933926b8a9f9639f176e45,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, Should be able to remove this suppression in some brave new hamcrest world.,2.5,1,Should able remove suppression brave new hamcrest world Should be able to remove this suppression in some brave new hamcrest world,0
5a933926b8a9f9639f176e46,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,3.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176e47,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176e48,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Returns a Statement that when executed either returns normally if code method} passes or throws an exception if code method} fails. Here is an outline of the default implementation <ul> <li>Invoke code method} on the result of code createTest(} and throw any exceptions thrown by either operation. <li>HOWEVER if code method}'s code Test} annotation has the code expecting} attribute return normally only if the previous step threw an exception of the correct type and throw an exception otherwise. <li>HOWEVER if code method}'s code Test} annotation has the code timeout} attribute throw an exception if the previous step takes more than the specified number of milliseconds. <li>ALWAYS run all nonoverridden code Before} methods on this class and superclasses before any of the previous steps if any throws an Exception stop execution and pass the exception on. <li>ALWAYS run all nonoverridden code After} methods on this class and superclasses after any of the previous steps all After methods are always executed exceptions thrown by previous steps are combined if necessary with exceptions from After methods into a link MultipleFailureException}. <li>ALWAYS allow code Rule} fields to modify the execution of the above steps. A code Rule} may prevent all execution of the above steps or add additional behavior before and after or modify thrown exceptions. For more information see link TestRule} <ul> This can be overridden in subclasses either by overriding this method or the implementations creating each substatement.,7.5,1,Returns Statement executed either returns normally code method passes throws exception code method fails Here outline default implementation <ul> Invoke code method result code createTest throw exceptions thrown either operation HOWEVER code method 's code Test annotation code expecting attribute return normally previous step threw exception correct type throw exception otherwise HOWEVER code method 's code Test annotation code timeout attribute throw exception previous step takes specified number milliseconds ALWAYS run nonoverridden code Before methods class superclasses previous steps throws Exception stop execution pass exception ALWAYS run nonoverridden code After methods class superclasses previous steps After methods always executed exceptions thrown previous steps combined necessary exceptions After methods link MultipleFailureException ALWAYS allow code Rule fields modify execution steps code Rule may prevent execution steps add additional behavior modify thrown exceptions For information see link TestRule <ul> This overridden subclasses either overriding method implementations creating substatement Returns a Statement that when executed either return normally if code method pass or throw an exception if code method fails Here is an outline of the default implementation <ul> Invoke code method on the result of code createTest and throw any exception thrown by either operation HOWEVER if code method 's code Test annotation ha the code expecting attribute return normally only if the previous step threw an exception of the correct type and throw an exception otherwise HOWEVER if code method 's code Test annotation ha the code timeout attribute throw an exception if the previous step take more than the specified number of millisecond ALWAYS run all nonoverridden code Before method on this class and superclass before any of the previous step if any throw an Exception stop execution and pas the exception on ALWAYS run all nonoverridden code After method on this class and superclass after any of the previous step all After method are always executed exception thrown by previous step are combined if necessary with exception from After method into a link MultipleFailureException ALWAYS allow code Rule field to modify the execution of the above step code Rule may prevent all execution of the above step or add additional behavior before and after or modify thrown exception For more information see link TestRule <ul> This can be overridden in subclass either by overriding this method or the implementation creating each substatement,0
5a933926b8a9f9639f176e49,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176e4a,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176e4b,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176e4c,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, Create a <code>Description<code> of a single test named <code>name<code> in the class <code>clazz<code>. Generally this will be a leaf <code>Description<code>. param clazz the class of the test param name the name of the test (a method name for test annotated with link org.junit.Test} param annotations metadata about the test for downstream interpreters return a <code>Description<code> named <code>name<code>,2.5,1,Create Description single test named name class clazz Generally leaf Description param clazz class test param name name test method name test annotated link orgjunitTest param annotations metadata test downstream interpreters return Description named name Create a Description of a single test named name in the class clazz Generally this will be a leaf Description param clazz the class of the test param name the name of the test a method name for test annotated with link orgjunitTest param annotation metadata about the test for downstream interpreter return a Description named name,0
5a933926b8a9f9639f176e4d,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, If you write custom runners you may need to notify JUnit of your progress running tests. Do this by invoking the <code>RunNotifier<code> passed to your implementation of link org.junit.runner.Runnerrun(RunNotifier}. Future evolution of this class is likely to move link fireTestRunStarted(Description} and link fireTestRunFinished(Result} to a separate class since they should only be called once per run.,4.5,1,If write custom runners may need notify JUnit progress running tests Do invoking RunNotifier passed implementation link orgjunitrunnerRunnerrun RunNotifier Future evolution class likely move link fireTestRunStarted Description link fireTestRunFinished Result separate class since called per run If you write custom runner you may need to notify JUnit of your progress running test Do this by invoking the RunNotifier passed to your implementation of link orgjunitrunnerRunnerrun RunNotifier Future evolution of this class is likely to move link fireTestRunStarted Description and link fireTestRunFinished Result to a separate class since they should only be called once per run,0
5a933926b8a9f9639f176e4e,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176e4f,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176e50,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that contain rules. Such a field must be public not static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link Before} methods then the link Test} method and finally any link After} methods throwing an exception if any of these fail. If there are multiple annotated link Rule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test class that creates a temporary folder before each test method and deletes it after each <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> For more information and more examples see link org.junit.rules.TestRule}. Note for backwards compatibility this annotation may also mark fields of type link org.junit.rules.MethodRule} which will be honored. However this is a deprecated interface and feature.,18.25,1,Annotates fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link Before methods link Test method finally link After methods throwing exception fail If multiple annotated link Rule class applied order depends JVM's implementation reflection API undefined general For example test class creates temporary folder test method deletes public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For information examples see link orgjunitrulesTestRule Note backwards compatibility annotation may also mark fields type link orgjunitrulesMethodRule honored However deprecated interface feature Annotates field that contain rule Such a field must be public not static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link Before method then the link Test method and finally any link After method throwing an exception if any of these fail If there are multiple annotated link Rule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test class that creates a temporary folder before each test method and deletes it after each public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For more information and more example see link orgjunitrulesTestRule Note for backwards compatibility this annotation may also mark field of type link orgjunitrulesMethodRule which will be honored However this is a deprecated interface and feature,0
5a933926b8a9f9639f176e51,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176e52,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Called when an atomic test fails. param failure describes the test that failed and the exception that was thrown,2.5,1,Called atomic test fails param failure describes test failed exception thrown Called when an atomic test fails param failure describes the test that failed and the exception that wa thrown,0
5a933926b8a9f9639f176e53,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176e54,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us,0
5a933926b8a9f9639f176e55,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/Categories.java, the way filters are implemented makes this unnecessarily complicated buggy and difficult to specify. A new way of handling filters could someday enable a better new implementation.,3.0,1,way filters implemented makes unnecessarily complicated buggy difficult specify new way handling filters could someday enable better new implementation the way filter are implemented make this unnecessarily complicated buggy and difficult to specify new way of handling filter could someday enable a better new implementation,0
5a933926b8a9f9639f176e56,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite,0
5a933926b8a9f9639f176e57,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, Adds a failure to the table if code matcher} does not match code value}. Execution continues but the test will fail at the end if the match fails.,3.5,1,Adds failure table code matcher match code value Execution continues test fail end match fails Adds a failure to the table if code matcher doe not match code value Execution continues but the test will fail at the end if the match fails,0
5a933926b8a9f9639f176e58,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,3.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a933926b8a9f9639f176e59,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, Optionally specify <code>timeout<code> in milliseconds to cause a test method to fail if it takes longer than that number of milliseconds.,2.5,1,Optionally specify timeout milliseconds cause test method fail takes longer number milliseconds Optionally specify timeout in millisecond to cause a test method to fail if it take longer than that number of millisecond,0
5a933926b8a9f9639f176e5a,r4.10,2011-09-29,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176e5b,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. The odd name is necessary because <code>class<code> is a reserved word. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,6.0,1,Create Request processed run tests class The odd name necessary class reserved word param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class The odd name is necessary because class is a reserved word param clazz the class containing the test return a Request that will cause all test in the class to be run,-1
5a933926b8a9f9639f176e5c,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,4.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176e5d,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Convenient base class for Matchers that require a nonnull value of a specific type. This simply implements the null check checks the type and then casts. author Joe Walnes,6.0,1,Convenient base class Matchers require nonnull value specific type This simply implements null check checks type casts author Joe Walnes Convenient base class for Matchers that require a nonnull value of a specific type This simply implement the null check check the type and then cast author Joe Walnes,0
5a933926b8a9f9639f176e5e,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,4.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176e5f,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,5.0,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176e60,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, The TemporaryFolder Rule allows creation of files and folders that are guaranteed to be deleted when the test method finishes (whether it passes or fails <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre>,5.0,1,The TemporaryFolder Rule allows creation files folders guaranteed deleted test method finishes whether passes fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot The TemporaryFolder Rule allows creation of file and folder that are guaranteed to be deleted when the test method finish whether it pass or fails public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot,0
5a933926b8a9f9639f176e61,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,6.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176e62,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,5.2,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176e63,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/ClassRule.java, Annotates static fields that contain rules. Such a field must be public static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link BeforeClass} methods then the entire body of the test class (all contained methods if it is a standard JUnit test class or all contained classes if it is a link org.junit.runners.Suite} and finally any link AfterClass} methods. The statement passed to the link org.junit.rules.TestRule} will never throw an exception and throwing an exception from the link org.junit.rules.TestRule} will result in undefined behavior. This means that some link org.junit.rules.TestRule}s such as link org.junit.rules.ErrorCollector} link org.junit.rules.ExpectedException} and link org.junit.rules.Timeout} have undefined behavior when used as link ClassRule}s. If there are multiple annotated link ClassRule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test suite that connects to a server once before all the test classes run and disconnects after they are finished <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource resource= new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } <pre> For more information and more examples see link org.junit.rules.TestRule}.,9.0,1,Annotates static fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link BeforeClass methods entire body test class contained methods standard JUnit test class contained classes link orgjunitrunnersSuite finally link AfterClass methods The statement passed link orgjunitrulesTestRule never throw exception throwing exception link orgjunitrulesTestRule result undefined behavior This means link orgjunitrulesTestRule link orgjunitrulesErrorCollector link orgjunitrulesExpectedException link orgjunitrulesTimeout undefined behavior used link ClassRule If multiple annotated link ClassRule class applied order depends JVM's implementation reflection API undefined general For example test suite connects server test classes run disconnects finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect For information examples see link orgjunitrulesTestRule Annotates static field that contain rule Such a field must be public static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link BeforeClass method then the entire body of the test class all contained method if it is a standard JUnit test class or all contained class if it is a link orgjunitrunnersSuite and finally any link AfterClass method The statement passed to the link orgjunitrulesTestRule will never throw an exception and throwing an exception from the link orgjunitrulesTestRule will result in undefined behavior This mean that some link orgjunitrulesTestRule s such a link orgjunitrulesErrorCollector link orgjunitrulesExpectedException and link orgjunitrulesTimeout have undefined behavior when used a link ClassRule s If there are multiple annotated link ClassRule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test suite that connects to a server once before all the test class run and disconnect after they are finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect For more information and more example see link orgjunitrulesTestRule,0
5a933926b8a9f9639f176e64,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,6.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176e65,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,5.0,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a933926b8a9f9639f176e66,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,5.0,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176e67,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, <p>Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those the current class.<p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass,19.0,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass,0
5a933926b8a9f9639f176e68,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,3.0,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176e69,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally(,7.0,1,Create new MaxCore serialized file stored storedResults deprecated use storedLocally Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally,0
5a933926b8a9f9639f176e6a,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. So for example <pre> RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} } <pre> For a real example see org.junit.tests.manipulation.SortableTest.,5.0,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For real example see orgjunittestsmanipulationSortableTest If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind For a real example see orgjunittestsmanipulationSortableTest,0
5a933926b8a9f9639f176e6b,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,8.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176e6c,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p>TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run.<p> <p> When the wait command line argument is given TestRunner waits until the users types RETURN.<p> <p>TestRunner prints a trace as the tests are executed followed by a summary at the end.<p>,5.0,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176e6d,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestRule.java, A TestRule is an alteration in how a test method or set of test methods is run and reported. A link TestRule} may add additional checks that cause a test that would otherwise fail to pass or it may perform necessary setup or cleanup for tests or it may observe test execution to report it elsewhere. link TestRule}s can do everything that could be done previously with methods annotated with link org.junit.Before} link org.junit.After} link org.junit.BeforeClass} or link org.junit.AfterClass} but they are more powerful and more easily shared between projects and classes. The default JUnit test runners for suites and individual test cases recognize link TestRule}s introduced in two different ways. link org.junit.Rule} annotates methodlevel link TestRule}s and link org.junit.ClassRule} annotates classlevel link TestRule}s. See Javadoc for those annotations for more information. Multiple link TestRule}s can be applied to a test or suite execution. The link Statement} that executes the method or suite is passed to each annotated link org.junit.Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link org.junit.Rule} if any. For examples of how this can be useful see these provided TestRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatcher} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,39.0,1,TestRule alteration test method set test methods run reported link TestRule may add additional checks cause test would otherwise fail pass may perform necessary setup cleanup tests may observe test execution report elsewhere link TestRule everything could done previously methods annotated link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass link orgjunitAfterClass powerful easily shared projects classes The default JUnit test runners suites individual test cases recognize link TestRule introduced two different ways link orgjunitRule annotates methodlevel link TestRule link orgjunitClassRule annotates classlevel link TestRule See Javadoc annotations information Multiple link TestRule applied test suite execution The link Statement executes method suite passed annotated link orgjunitRule turn may return substitute modified link Statement passed next link orgjunitRule For examples useful see provided TestRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatcher add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> TestRule is an alteration in how a test method or set of test method is run and reported link TestRule may add additional check that cause a test that would otherwise fail to pas or it may perform necessary setup or cleanup for test or it may observe test execution to report it elsewhere link TestRule s can do everything that could be done previously with method annotated with link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass or link orgjunitAfterClass but they are more powerful and more easily shared between project and class The default JUnit test runner for suite and individual test case recognize link TestRule s introduced in two different way link orgjunitRule annotates methodlevel link TestRule s and link orgjunitClassRule annotates classlevel link TestRule s See Javadoc for those annotation for more information Multiple link TestRule s can be applied to a test or suite execution The link Statement that executes the method or suite is passed to each annotated link orgjunitRule in turn and each may return a substitute or modified link Statement which is passed to the next link orgjunitRule if any For example of how this can be useful see these provided TestRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatcher add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,1
5a933926b8a9f9639f176e6e,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, A <code>TestResult<code> collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between <i>failures<i> and <i>errors<i>. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an link ArrayIndexOutOfBoundsException}. see Test,3.0,1,TestResult collects results executing test case It instance Collecting Parameter pattern The test framework distinguishes failures errors failure anticipated checked assertions Errors unanticipated problems like link ArrayIndexOutOfBoundsException see Test TestResult collect the result of executing a test case It is an instance of the Collecting Parameter pattern The test framework distinguishes between failure and error failure is anticipated and checked for with assertion Errors are unanticipated problem like an link ArrayIndexOutOfBoundsException see Test,-1
5a933926b8a9f9639f176e6f,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. Inspired by a patch from Alex Chaffee (alexpurpletech.com,5.0,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom,1
5a933926b8a9f9639f176e70,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,6.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176e71,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner,3.0,1,Represents one problems encountered initializing Runner Represents one or more problem encountered while initializing a Runner,0
5a933926b8a9f9639f176e72,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,4.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176e73,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Provides most of the functionality specific to a Runner that implements a parent node in the test tree with children defined by objects of some data type code T}. (For link BlockJUnit4ClassRunner} code T} is link Method} . For link Suite} code T} is link Class}. Subclasses must implement finding the children of the node describing each child and running each child. ParentRunner will filter and sort children handle code BeforeClass} and code AfterClass} methods handle annotated link ClassRule}s create a composite link Description} and run children sequentially.,0.0,1,Provides functionality specific Runner implements parent node test tree children defined objects data type code T For link BlockJUnit4ClassRunner code T link Method For link Suite code T link Class Subclasses must implement finding children node describing child running child ParentRunner filter sort children handle code BeforeClass code AfterClass methods handle annotated link ClassRule create composite link Description run children sequentially Provides most of the functionality specific to a Runner that implement a parent node in the test tree with child defined by object of some data type code T For link BlockJUnit4ClassRunner code T is link Method For link Suite code T is link Class Subclasses must implement finding the child of the node describing each child and running each child ParentRunner will filter and sort child handle code BeforeClass and code AfterClass method handle annotated link ClassRule s create a composite link Description and run child sequentially,0
5a933926b8a9f9639f176e74,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, A set of assertion methods useful for writing tests. Only failed assertions are recorded. These methods can be used directly <code>Assert.assertEquals(...<code> however they read better if they are referenced through static import<br> <pre> import static org.junit.Assert. ... assertEquals(... <pre> see AssertionError,4.0,1,set assertion methods useful writing tests Only failed assertions recorded These methods used directly AssertassertEquals however read better referenced static import import static orgjunitAssert assertEquals see AssertionError set of assertion method useful for writing test Only failed assertion are recorded These method can be used directly AssertassertEquals however they read better if they are referenced through static import import static orgjunitAssert assertEquals see AssertionError,0
5a933926b8a9f9639f176e75,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatcher.java, TestWatcher is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatcher( &amp064Override protected void failed(Description d watchedLog+= d + &ampquotn&ampquot } &amp064Override protected void succeeded(Description d watchedLog+= d + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre>,7.5,1,TestWatcher base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatcher Override protected void failed Description watchedLog+= + &ampquotn&ampquot Override protected void succeeded Description watchedLog+= + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds TestWatcher is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatcher Override protected void failed Description d watchedLog+= d + &ampquotn&ampquot Override protected void succeeded Description d watchedLog+= d + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds,0
5a933926b8a9f9639f176e76,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, <p> The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static List&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]  0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p>,5.0,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters public static List&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method,0
5a933926b8a9f9639f176e77,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,4.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176e78,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier,5.0,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier,0
5a933926b8a9f9639f176e79,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, TestWatchman is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatchman( &amp064Override public void failed(Throwable e FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + e.getClass(.getSimpleName( + &ampquotn&ampquot } &amp064Override public void succeeded(FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> deprecated link MethodRule} is deprecated. Use link TestWatcher} implements link TestRule} instead.,21.5,1,TestWatchman base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule deprecated Use link TestWatcher implements link TestRule instead TestWatchman is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds deprecated link MethodRule is deprecated Use link TestWatcher implement link TestRule instead,0
5a933926b8a9f9639f176e7a,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkMethod.java, Returns true iff this is a noarg method that returns a value assignable to code type} deprecated This is used only by the Theories runner and does not use all the generic type info that it ought to. It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf(FrameworkMethod once Theories moves to junitcontrib.,11.0,1,Returns true iff noarg method returns value assignable code type deprecated This used Theories runner use generic type info ought It replaced forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod Theories moves junitcontrib Returns true iff this is a noarg method that return a value assignable to code type deprecated This is used only by the Theories runner and doe not use all the generic type info that it ought to It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod once Theories move to junitcontrib,0
5a933926b8a9f9639f176e7b,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/CommandLineTest.java, todo create a TestSystem instead,3.759,1,todo create TestSystem instead todo create a TestSystem instead,0
5a933926b8a9f9639f176e7c,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond.,6.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond,0
5a933926b8a9f9639f176e7d,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul>,24.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul>,0
5a933926b8a9f9639f176e7e,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code klass}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,15.0,1,Creates code TestClass wrapping code klass Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code klass Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176e7f,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java, Overhead could be less than half a millisecond,4.0,1,Overhead could less half millisecond Overhead could be le than half a millisecond,0
5a933926b8a9f9639f176e80,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,4.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176e81,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,6.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176e82,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,4.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176e83,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,5.0,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176e84,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,7.0,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176e85,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, In the tests that follow we can't use standard formatting for exception tests try somethingThatShouldThrow( fail( catch (AssertionFailedError e } because fail( would never be reported.,5.0,1,In tests follow can't use standard formatting exception tests try somethingThatShouldThrow fail catch AssertionFailedError e fail would never reported In the test that follow we can't use standard formatting for exception test try somethingThatShouldThrow fail catch AssertionFailedError e because fail would never be reported,0
5a933926b8a9f9639f176e86,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, A set of assert methods. Messages are only displayed when an assert fails.,6.0,1,set assert methods Messages displayed assert fails set of assert method Messages are only displayed when an assert fails,-1
5a933926b8a9f9639f176e87,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away.,11.0,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away,0
5a933926b8a9f9639f176e88,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter.,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter,0
5a933926b8a9f9639f176e89,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, <p>When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After,5.0,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter,0
5a933926b8a9f9639f176e8a,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,11.0,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176e8b,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, <p>If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test,10.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest,0
5a933926b8a9f9639f176e8c,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],6.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176e8d,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions.,13.0,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version,0
5a933926b8a9f9639f176e8e,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed.<p> For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored<br> <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class<br> <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre>,9.0,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2,0
5a933926b8a9f9639f176e8f,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, param elementMatchers return A matcher matching any collection containing at least one element that matches each matcher in elementMatcher (this may be one element matching all matchers or different elements matching each matcher,4.0,1,param elementMatchers return matcher matching collection containing least one element matches matcher elementMatcher may one element matching matchers different elements matching matcher param elementMatchers return matcher matching any collection containing at least one element that match each matcher in elementMatcher this may be one element matching all matcher or different element matching each matcher,0
5a933926b8a9f9639f176e90,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p> The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith,10.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith,0
5a933926b8a9f9639f176e91,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, A set of methods useful for stating assumptions about the conditions in which a test is meaningful. A failed assumption does not mean the code is broken but that the test provides no useful information. The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently. For example <pre>  only provides information if database is reachable. Test public void calculateTotalSalary( DBConnection dbc = Database.connect( assumeNotNull(dbc  ... } <pre> These methods can be used directly <code>Assume.assumeTrue(...<code> however they read better if they are referenced through static import<br> <pre> import static org.junit.Assume. ... assumeTrue(... <pre>,4.0,1,set methods useful stating assumptions conditions test meaningful failed assumption mean code broken test provides useful information The default JUnit runner treats tests failing assumptions ignored Custom runners may behave differently For example provides information database reachable Test calculateTotalSalary DBConnection dbc = Databaseconnect assumeNotNull dbc These methods used directly AssumeassumeTrue however read better referenced static import import static orgjunitAssume assumeTrue set of method useful for stating assumption about the condition in which a test is meaningful failed assumption doe not mean the code is broken but that the test provides no useful information The default JUnit runner treat test with failing assumption a ignored Custom runner may behave differently For example only provides information if database is reachable Test calculateTotalSalary DBConnection dbc = Databaseconnect assumeNotNull dbc These method can be used directly AssumeassumeTrue however they read better if they are referenced through static import import static orgjunitAssume assumeTrue,1
5a933926b8a9f9639f176e92,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, Should be able to remove this suppression in some brave new hamcrest world.,5.0,1,Should able remove suppression brave new hamcrest world Should be able to remove this suppression in some brave new hamcrest world,0
5a933926b8a9f9639f176e93,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}. This may disappear as soon as 1 April 2009,12.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner This may disappear soon 1 April 2009 deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner This may disappear a soon a 1 April 2009,0
5a933926b8a9f9639f176e94,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,7.0,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176e95,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Implements the JUnit 4 standard test case class model as defined by the annotations in the org.junit package. Many users will never notice this class it is now the default test class runner but it should have exactly the same behavior as the old test class runner (code JUnit4ClassRunner}. BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners that are slight changes to the default behavior however <ul> <li>It has a much simpler implementation based on link Statement}s allowing new operations to be inserted into the appropriate point in the execution flow. <li>It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner} was in an internal package and is now deprecated. <ul>,14.0,1,Implements JUnit 4 standard test case class model defined annotations orgjunit package Many users never notice class default test class runner exactly behavior old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner advantages writers custom JUnit runners slight changes default behavior however <ul> It much simpler implementation based link Statement allowing new operations inserted appropriate point execution flow It published extension reuse encouraged whereas code JUnit4ClassRunner internal package deprecated <ul> Implements the JUnit 4 standard test case class model a defined by the annotation in the orgjunit package Many user will never notice this class it is now the default test class runner but it should have exactly the same behavior a the old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner ha advantage for writer of custom JUnit runner that are slight change to the default behavior however <ul> It ha a much simpler implementation based on link Statement s allowing new operation to be inserted into the appropriate point in the execution flow It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner wa in an internal package and is now deprecated <ul>,1
5a933926b8a9f9639f176e96,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, <p>A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> <p>Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> <p>This constructor creates a suite with all the methods starting with test that take no arguments.<p> <p>A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> <p> see Test,3.0,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176e97,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,12.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176e98,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test.,8.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test,0
5a933926b8a9f9639f176e99,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,5.0,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176e9a,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, <p>A <code>Description<code> describes a test which is to be run or has been run. <code>Descriptions<code> can be atomic (a single test or compound (containing children tests. <code>Descriptions<code> are used to provide feedback about the tests that are about to run (for example the tree view visible in many IDEs or tests that have been run (for example the failures view.<p> <p><code>Descriptions<code> are implemented as a single class rather than a Composite because they are entirely informational. They contain no logic aside from counting their tests.<p> <p>In the past we used the raw link junit.framework.TestCase}s and link junit.framework.TestSuite}s to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have a superclass below link Object}. We needed a way to pass a class and name together. Description emerged from this.<p> see org.junit.runner.Request see org.junit.runner.Runner,4.0,1,Description describes test run run Descriptions atomic single test compound containing children tests Descriptions used provide feedback tests run example tree view visible many IDEs tests run example failures view Descriptions implemented single class rather Composite entirely informational They contain logic aside counting tests In past used raw link junitframeworkTestCase link junitframeworkTestSuite display tree tests This longer viable JUnit 4 atomic tests longer superclass link Object We needed way pass class name together Description emerged see orgjunitrunnerRequest see orgjunitrunnerRunner Description describes a test which is to be run or ha been run Descriptions can be atomic a single test or compound containing child test Descriptions are used to provide feedback about the test that are about to run for example the tree view visible in many IDEs or test that have been run for example the failure view Descriptions are implemented a a single class rather than a Composite because they are entirely informational They contain no logic aside from counting their test In the past we used the raw link junitframeworkTestCase s and link junitframeworkTestSuite s to display the tree of test This wa no longer viable in JUnit 4 because atomic test no longer have a superclass below link Object We needed a way to pas a class and name together Description emerged from this see orgjunitrunnerRequest see orgjunitrunnerRunner,0
5a933926b8a9f9639f176e9b,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, If you write custom runners you may need to notify JUnit of your progress running tests. Do this by invoking the <code>RunNotifier<code> passed to your implementation of link org.junit.runner.Runnerrun(RunNotifier}. Future evolution of this class is likely to move link fireTestRunStarted(Description} and link fireTestRunFinished(Result} to a separate class since they should only be called once per run.,9.0,1,If write custom runners may need notify JUnit progress running tests Do invoking RunNotifier passed implementation link orgjunitrunnerRunnerrun RunNotifier Future evolution class likely move link fireTestRunStarted Description link fireTestRunFinished Result separate class since called per run If you write custom runner you may need to notify JUnit of your progress running test Do this by invoking the RunNotifier passed to your implementation of link orgjunitrunnerRunnerrun RunNotifier Future evolution of this class is likely to move link fireTestRunStarted Description and link fireTestRunFinished Result to a separate class since they should only be called once per run,0
5a933926b8a9f9639f176e9c,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, do nothing same as passing (for 4.5 may change in 4.6,0.0,1,nothing passing 45 may change 46 do nothing same a passing for 45 may change in 46,0
5a933926b8a9f9639f176e9d,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that contain rules. Such a field must be public not static and a subtype of link org.junit.rules.TestRule}. The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link Before} methods then the link Test} method and finally any link After} methods throwing an exception if any of these fail. If there are multiple annotated link Rule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. For example here is a test class that creates a temporary folder before each test method and deletes it after each <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> For more information and more examples see link org.junit.rules.TestRule}. Note for backwards compatibility this annotation may also mark fields of type link org.junit.rules.MethodRule} which will be honored. However this is a deprecated interface and feature.,36.5,1,Annotates fields contain rules Such field must public static subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link Before methods link Test method finally link After methods throwing exception fail If multiple annotated link Rule class applied order depends JVM's implementation reflection API undefined general For example test class creates temporary folder test method deletes public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For information examples see link orgjunitrulesTestRule Note backwards compatibility annotation may also mark fields type link orgjunitrulesMethodRule honored However deprecated interface feature Annotates field that contain rule Such a field must be public not static and a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link Before method then the link Test method and finally any link After method throwing an exception if any of these fail If there are multiple annotated link Rule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general For example here is a test class that creates a temporary folder before each test method and deletes it after each public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For more information and more example see link orgjunitrulesTestRule Note for backwards compatibility this annotation may also mark field of type link orgjunitrulesMethodRule which will be honored However this is a deprecated interface and feature,0
5a933926b8a9f9639f176e9e,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually.,10.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually,0
5a933926b8a9f9639f176e9f,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, <p>If you need to respond to the events during a test run extend <code>RunListener<code> and override the appropriate methods. If a listener throws an exception while processing a test event it will be removed for the remainder of the test run.<p> <p>For example suppose you have a <code>Cowbell<code> class that you want to make a noise whenever a test fails. You could write <pre> public class RingingListener extends RunListener public void testFailure(Failure failure Cowbell.ring( } } <pre> <p> <p>To invoke your listener you need to run your tests through <code>JUnitCore<code>. <pre> public void main(String... args JUnitCore core= new JUnitCore( core.addListener(new RingingListener( core.run(MyTestClass.class } <pre> <p> see org.junit.runner.JUnitCore,20.0,1,If need respond events test run extend RunListener override appropriate methods If listener throws exception processing test event removed remainder test run For example suppose Cowbell class want make noise whenever test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke listener need run tests JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass see orgjunitrunnerJUnitCore If you need to respond to the event during a test run extend RunListener and override the appropriate method If a listener throw an exception while processing a test event it will be removed for the remainder of the test run For example suppose you have a Cowbell class that you want to make a noise whenever a test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke your listener you need to run your test through JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass see orgjunitrunnerJUnitCore,0
5a933926b8a9f9639f176ea0,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,5.2,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176ea1,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us,0
5a933926b8a9f9639f176ea2,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/Categories.java, From a given set of test classes runs only the classes and methods that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category. Note that for now annotating suites with code Category} has no effect. Categories must be annotated on the direct method or class. Example <pre> public interface FastTests } public interface SlowTests } public static class A &amp064Test public void a( fail( } &amp064Category(SlowTests.class &amp064Test public void b( } } &amp064Category(  SlowTests.class FastTests.class } public static class B &amp064Test public void c( } } &amp064RunWith(Categories.class &amp064IncludeCategory(SlowTests.class &amp064SuiteClasses(  A.class B.class }  Note that Categories is a kind of Suite public static class SlowTestSuite } <pre>,4.0,1,From given set test classes runs classes methods annotated either category given IncludeCategory annotation subtype category Note annotating suites code Category effect Categories must annotated direct method class Example public interface FastTests public interface SlowTests public static class Test fail Category SlowTestsclass Test b Category SlowTestsclass FastTestsclass public static class B Test c RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note Categories kind Suite public static class SlowTestSuite From a given set of test class run only the class and method that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category Note that for now annotating suite with code Category ha no effect Categories must be annotated on the direct method or class Example public interface FastTests public interface SlowTests public static class Test a fail Category SlowTestsclass Test b Category SlowTestsclass FastTestsclass public static class B Test c RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note that Categories is a kind of Suite public static class SlowTestSuite,0
5a933926b8a9f9639f176ea3,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite,9.0,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite,0
5a933926b8a9f9639f176ea4,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, The ErrorCollector rule allows execution of a test to continue after the first problem is found (for example to collect _all_ the incorrect rows in a table and report them all at once <pre> public static class UsesErrorCollectorTwice &amp064Rule public ErrorCollector collector= new ErrorCollector( &amp064Test public void example( collector.addError(new Throwable(&ampquotfirst thing went wrong&ampquot collector.addError(new Throwable(&ampquotsecond thing went wrong&ampquot collector.checkThat(getResult( not(containsString(&ampquotERROR!&ampquot  all lines will run and then a combined failure logged at the end. } } <pre>,8.0,1,The ErrorCollector rule allows execution test continue first problem found example collect _all_ incorrect rows table report public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult containsString &ampquotERROR!&ampquot lines run combined failure logged end The ErrorCollector rule allows execution of a test to continue after the first problem is found for example to collect _all_ the incorrect row in a table and report them all at once public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult not containsString &ampquotERROR!&ampquot all line will run and then a combined failure logged at the end,0
5a933926b8a9f9639f176ea5,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,6.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a933926b8a9f9639f176ea6,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, <p>The <code>Test<code> annotation tells JUnit that the <code>public void<code> method to which it is attached can be run as a test case. To run the method JUnit first constructs a fresh instance of the class then invokes the annotated method. Any exceptions thrown by the test will be reported by JUnit as a failure. If no exceptions are thrown the test is assumed to have succeeded.<p> <p>A simple test looks like this <pre> public class Example <b>&amp064Test<b> public void method( org.junit.Assert.assertTrue( new ArrayList(.isEmpty(  } } <pre> <p> <p>The <code>Test<code> annotation supports two optional parameters. The first <code>expected<code> declares that a test method should throw an exception. If it doesn't throw an exception or if it throws a different exception than the one declared the test fails. For example the following test succeeds <pre> &amp064Test(<b>expected=IndexOutOfBoundsException.class<b> public void outOfBounds( new ArrayList&ampltObject&ampgt(.get(1 } <pre><p> <p>The second optional parameter <code>timeout<code> causes a test to fail if it takes longer than a specified amount of clock time (measured in milliseconds. The following test fails <pre> &amp064Test(<b>timeout=100<b> public void infinity( while(true } <pre><p>,24.0,1,The Test annotation tells JUnit method attached run test case To run method JUnit first constructs fresh instance class invokes annotated method Any exceptions thrown test reported JUnit failure If exceptions thrown test assumed succeeded simple test looks like public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation supports two optional parameters The first expected declares test method throw exception If throw exception throws different exception one declared test fails For example following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 The second optional parameter timeout causes test fail takes longer specified amount clock time measured milliseconds The following test fails Test <b>timeout=100<b> infinity true The Test annotation tell JUnit that the method to which it is attached can be run a a test case To run the method JUnit first construct a fresh instance of the class then invokes the annotated method Any exception thrown by the test will be reported by JUnit a a failure If no exception are thrown the test is assumed to have succeeded simple test look like this public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation support two optional parameter The first expected declares that a test method should throw an exception If it doesn't throw an exception or if it throw a different exception than the one declared the test fails For example the following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 The second optional parameter timeout cause a test to fail if it take longer than a specified amount of clock time measured in millisecond The following test fails Test <b>timeout=100<b> infinity while true,0
5a933926b8a9f9639f176ea7,r4.11,2012-11-13,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, <p>If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class.<p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test,10.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest,0
5a933926b8a9f9639f176ea8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, The TemporaryFolder Rule allows creation of files and folders that should be deleted when the test method finishes (whether it passes or fails. Whether the deletion is successful or not is not checked by this rule. No exception will be thrown in case the deletion fails. <p>Example of usage <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> since 4.7,7.5,1,The TemporaryFolder Rule allows creation files folders deleted test method finishes whether passes fails Whether deletion successful checked rule No exception thrown case deletion fails Example usage public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot since 47 The TemporaryFolder Rule allows creation of file and folder that should be deleted when the test method finish whether it pass or fails Whether the deletion is successful or not is not checked by this rule No exception will be thrown in case the deletion fails Example of usage public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot since 47,0
5a933926b8a9f9639f176ea9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a933926b8a9f9639f176eaa,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a933926b8a9f9639f176eab,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/DataPoint.java, Annotating an field or method with &amp064DataPoint will cause the field value or the value returned by the method to be used as a potential parameter for theories in that class when run with the link org.junit.experimental.theories.Theories Theories} runner. <p> A DataPoint is only considered as a potential value for parameters for which its type is assignable. When multiple code DataPoint}s exist with overlapping types more control can be obtained by naming each DataPoint using the value of this annotation e.g. with <code>&amp064DataPoint(dataset1 dataset2}<code> and then specifying which named set to consider as potential values for each parameter using the link org.junit.experimental.theories.FromDataPoints &amp064FromDataPoints} annotation. <p> Parameters with no specified source (i.e. without &amp064FromDataPoints or other link org.junit.experimental.theories.ParametersSuppliedBy &amp064ParameterSuppliedBy} annotations will use all code DataPoint}s that are assignable to the parameter type as potential values including named sets of code DataPoint}s. <pre> &amp064DataPoint public static String dataPoint = value &amp064DataPoint(generated public static String generatedDataPoint( return generated value } &amp064Theory public void theoryMethod(String param ... } <pre> see org.junit.experimental.theories.Theories see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.FromDataPoints,5.0,1,Annotating field method DataPoint cause field value value returned method used potential parameter theories class run link orgjunitexperimentaltheoriesTheories Theories runner DataPoint considered potential value parameters type assignable When multiple code DataPoint exist overlapping types control obtained naming DataPoint using value annotation eg DataPoint dataset1 dataset2 specifying named set consider potential values parameter using link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters specified source ie without FromDataPoints link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotations use code DataPoint assignable parameter type potential values including named sets code DataPoint DataPoint public static String dataPoint = value DataPoint generated public static String generatedDataPoint return generated value Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints Annotating an field or method with DataPoint will cause the field value or the value returned by the method to be used a a potential parameter for theory in that class when run with the link orgjunitexperimentaltheoriesTheories Theories runner DataPoint is only considered a a potential value for parameter for which it type is assignable When multiple code DataPoint s exist with overlapping type more control can be obtained by naming each DataPoint using the value of this annotation eg with DataPoint dataset1 dataset2 and then specifying which named set to consider a potential value for each parameter using the link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters with no specified source ie without FromDataPoints or other link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotation will use all code DataPoint s that are assignable to the parameter type a potential value including named set of code DataPoint s DataPoint public static String dataPoint = value DataPoint generated public static String generatedDataPoint return generated value Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints,0
5a933926b8a9f9639f176eac,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/ClassRule.java, Annotates static fields that reference rules or methods that return them. A field must be public static and a subtype of link org.junit.rules.TestRule}. A method must be public static and return a subtype of link org.junit.rules.TestRule}. <p> The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link BeforeClass} methods then the entire body of the test class (all contained methods if it is a standard JUnit test class or all contained classes if it is a link org.junit.runners.Suite} and finally any link AfterClass} methods. <p> The statement passed to the link org.junit.rules.TestRule} will never throw an exception and throwing an exception from the link org.junit.rules.TestRule} will result in undefined behavior. This means that some link org.junit.rules.TestRule}s such as link org.junit.rules.ErrorCollector} link org.junit.rules.ExpectedException} and link org.junit.rules.Timeout} have undefined behavior when used as link ClassRule}s. <p> If there are multiple annotated link ClassRule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. However Rules defined by fields will always be applied before Rules defined by methods. <p> For example here is a test suite that connects to a server once before all the test classes run and disconnects after they are finished <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource resource= new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } <pre> <p> and the same using a method <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource getResource( return new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } } <pre> <p> For more information and more examples see link org.junit.rules.TestRule}. since 4.9,6.5,1,Annotates static fields reference rules methods return field must public static subtype link orgjunitrulesTestRule method must public static return subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link BeforeClass methods entire body test class contained methods standard JUnit test class contained classes link orgjunitrunnersSuite finally link AfterClass methods The statement passed link orgjunitrulesTestRule never throw exception throwing exception link orgjunitrulesTestRule result undefined behavior This means link orgjunitrulesTestRule link orgjunitrulesErrorCollector link orgjunitrulesExpectedException link orgjunitrulesTimeout undefined behavior used link ClassRule If multiple annotated link ClassRule class applied order depends JVM's implementation reflection API undefined general However Rules defined fields always applied Rules defined methods For example test suite connects server test classes run disconnects finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect using method RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource getResource return new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect For information examples see link orgjunitrulesTestRule since 49 Annotates static field that reference rule or method that return them field must be public static and a subtype of link orgjunitrulesTestRule method must be public static and return a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link BeforeClass method then the entire body of the test class all contained method if it is a standard JUnit test class or all contained class if it is a link orgjunitrunnersSuite and finally any link AfterClass method The statement passed to the link orgjunitrulesTestRule will never throw an exception and throwing an exception from the link orgjunitrulesTestRule will result in undefined behavior This mean that some link orgjunitrulesTestRule s such a link orgjunitrulesErrorCollector link orgjunitrulesExpectedException and link orgjunitrulesTimeout have undefined behavior when used a link ClassRule s If there are multiple annotated link ClassRule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general However Rules defined by field will always be applied before Rules defined by method For example here is a test suite that connects to a server once before all the test class run and disconnect after they are finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect and the same using a method RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource getResource return new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect For more information and more example see link orgjunitrulesTestRule since 49,0
5a933926b8a9f9639f176ead,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java, Annotating a link org.junit.experimental.theories.Theory Theory} method int parameter with &amp064TestedOn causes it to be supplied with values from the ints array given when run as a theory by the link org.junit.experimental.theories.Theories Theories} runner. For example the below method would be called three times by the Theories runner once with each of the int parameters specified. <pre> &amp064Theory public void shouldPassForSomeInts(&amp064TestedOn(ints=1 2 3} int param ... } <pre>,2.0,1,Annotating link orgjunitexperimentaltheoriesTheory Theory method int parameter TestedOn causes supplied values ints array given run theory link orgjunitexperimentaltheoriesTheories Theories runner For example method would called three times Theories runner int parameters specified Theory shouldPassForSomeInts TestedOn ints=1 2 3 int param Annotating a link orgjunitexperimentaltheoriesTheory Theory method int parameter with TestedOn cause it to be supplied with value from the ints array given when run a a theory by the link orgjunitexperimentaltheoriesTheories Theories runner For example the below method would be called three time by the Theories runner once with each of the int parameter specified Theory shouldPassForSomeInts TestedOn ints=1 2 3 int param,0
5a933926b8a9f9639f176eae,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/FixMethodOrder.java, This class allows the user to choose the order of execution of the methods within a test class. <p>The default order of execution of JUnit tests within a class is deterministic but not predictable. The order of execution is not guaranteed for Java 7 (and some previous versions and can even change from run to run so the order of execution was changed to be deterministic (in JUnit 4.11 <p>It is recommended that test methods be written so that they are independent of the order that they are executed. However there may be a number of dependent tests either through error or by design. This class allows the user to specify the order of execution of test methods. <p>For possibilities see link MethodSorters} Here is an example <pre> &amp064FixMethodOrder(MethodSorters.NAME_ASCENDING public class MyTest } <pre> see org.junit.runners.MethodSorters since 4.11,5.0,1,This class allows user choose order execution methods within test class The default order execution JUnit tests within class deterministic predictable The order execution guaranteed Java 7 previous versions even change run run order execution changed deterministic JUnit 411 It recommended test methods written independent order executed However may number dependent tests either error design This class allows user specify order execution test methods For possibilities see link MethodSorters Here example FixMethodOrder MethodSortersNAME_ASCENDING public class MyTest see orgjunitrunnersMethodSorters since 411 This class allows the user to choose the order of execution of the method within a test class The default order of execution of JUnit test within a class is deterministic but not predictable The order of execution is not guaranteed for Java 7 and some previous version and can even change from run to run so the order of execution wa changed to be deterministic in JUnit 411 It is recommended that test method be written so that they are independent of the order that they are executed However there may be a number of dependent test either through error or by design This class allows the user to specify the order of execution of test method For possibility see link MethodSorters Here is an example FixMethodOrder MethodSortersNAME_ASCENDING public class MyTest see orgjunitrunnersMethodSorters since 411,0
5a933926b8a9f9639f176eaf,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,2.5,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a933926b8a9f9639f176eb0,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a933926b8a9f9639f176eb1,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/validator/ValidateWith.java, Allows for an link AnnotationValidator} to be attached to an annotation. <p>When attached to an annotation the validator will be instantiated and invoked by the link org.junit.runners.ParentRunner}.<p> since 4.12,2.5,1,Allows link AnnotationValidator attached annotation When attached annotation validator instantiated invoked link orgjunitrunnersParentRunner since 412 Allows for an link AnnotationValidator to be attached to an annotation When attached to an annotation the validator will be instantiated and invoked by the link orgjunitrunnersParentRunner since 412,0
5a933926b8a9f9639f176eb2,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestRule.java, A TestRule is an alteration in how a test method or set of test methods is run and reported. A link TestRule} may add additional checks that cause a test that would otherwise fail to pass or it may perform necessary setup or cleanup for tests or it may observe test execution to report it elsewhere. link TestRule}s can do everything that could be done previously with methods annotated with link org.junit.Before} link org.junit.After} link org.junit.BeforeClass} or link org.junit.AfterClass} but they are more powerful and more easily shared between projects and classes. The default JUnit test runners for suites and individual test cases recognize link TestRule}s introduced in two different ways. link org.junit.Rule} annotates methodlevel link TestRule}s and link org.junit.ClassRule} annotates classlevel link TestRule}s. See Javadoc for those annotations for more information. Multiple link TestRule}s can be applied to a test or suite execution. The link Statement} that executes the method or suite is passed to each annotated link org.junit.Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link org.junit.Rule} if any. For examples of how this can be useful see these provided TestRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatcher} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul> since 4.9,19.5,1,TestRule alteration test method set test methods run reported link TestRule may add additional checks cause test would otherwise fail pass may perform necessary setup cleanup tests may observe test execution report elsewhere link TestRule everything could done previously methods annotated link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass link orgjunitAfterClass powerful easily shared projects classes The default JUnit test runners suites individual test cases recognize link TestRule introduced two different ways link orgjunitRule annotates methodlevel link TestRule link orgjunitClassRule annotates classlevel link TestRule See Javadoc annotations information Multiple link TestRule applied test suite execution The link Statement executes method suite passed annotated link orgjunitRule turn may return substitute modified link Statement passed next link orgjunitRule For examples useful see provided TestRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatcher add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> since 49 TestRule is an alteration in how a test method or set of test method is run and reported link TestRule may add additional check that cause a test that would otherwise fail to pas or it may perform necessary setup or cleanup for test or it may observe test execution to report it elsewhere link TestRule s can do everything that could be done previously with method annotated with link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass or link orgjunitAfterClass but they are more powerful and more easily shared between project and class The default JUnit test runner for suite and individual test case recognize link TestRule s introduced in two different way link orgjunitRule annotates methodlevel link TestRule s and link orgjunitClassRule annotates classlevel link TestRule s See Javadoc for those annotation for more information Multiple link TestRule s can be applied to a test or suite execution The link Statement that executes the method or suite is passed to each annotated link orgjunitRule in turn and each may return a substitute or modified link Statement which is passed to the next link orgjunitRule if any For example of how this can be useful see these provided TestRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatcher add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul> since 49,1
5a933926b8a9f9639f176eb3,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, A <code>TestResult<code> collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between <i>failures<i> and <i>errors<i>. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an link ArrayIndexOutOfBoundsException}. see Test,1.5,1,TestResult collects results executing test case It instance Collecting Parameter pattern The test framework distinguishes failures errors failure anticipated checked assertions Errors unanticipated problems like link ArrayIndexOutOfBoundsException see Test TestResult collect the result of executing a test case It is an instance of the Collecting Parameter pattern The test framework distinguishes between failure and error failure is anticipated and checked for with assertion Errors are unanticipated problem like an link ArrayIndexOutOfBoundsException see Test,-1
5a933926b8a9f9639f176eb4,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. <p> Inspired by a patch from Alex Chaffee (alexpurpletech.com since 4.0,2.5,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom since 40 Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom since 40,1
5a933926b8a9f9639f176eb5,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/internal/runners/statements/FailOnTimeoutTest.java, Must show up in stack trace,0.0,1,Must show stack trace Must show up in stack trace,0
5a933926b8a9f9639f176eb6,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner since 4.5,1.5,1,Represents one problems encountered initializing Runner since 45 Represents one or more problem encountered while initializing a Runner since 45,0
5a933926b8a9f9639f176eb7,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/categories/MultiCategoryTest.java, This test is mentioned in code Categories} and any changes must be reflected.,2.0,1,This test mentioned code Categories changes must reflected This test is mentioned in code Categories and any change must be reflected,0
5a933926b8a9f9639f176eb8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatcher.java, TestWatcher is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public TestWatcher watchman= new TestWatcher( &amp064Override protected void failed(Throwable e Description description watchedLog+= description + &ampquotn&ampquot } &amp064Override protected void succeeded(Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> since 4.9,3.75,1,TestWatcher base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public TestWatcher watchman= new TestWatcher Override protected void failed Throwable e Description description watchedLog+= description + &ampquotn&ampquot Override protected void succeeded Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 49 TestWatcher is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public TestWatcher watchman= new TestWatcher Override protected void failed Throwable e Description description watchedLog+= description + &ampquotn&ampquot Override protected void succeeded Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 49,0
5a933926b8a9f9639f176eb9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a933926b8a9f9639f176eba,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier since 4.0,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier since 40 Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier since 40,0
5a933926b8a9f9639f176ebb,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/Stopwatch.java, The Stopwatch Rule notifies one of its own protected methods of the time spent by a test. <p>Override them to get the time in nanoseconds. For example this class will keep logging the time spent by each passed failed skipped and finished test <pre> public static class StopwatchTest private static final Logger logger = Logger.getLogger(&ampquot&ampquot private static void logInfo(Description description String status long nanos String testName = description.getMethodName( logger.info(String.format(&ampquotTest s s spent d microseconds&ampquot testName status TimeUnit.NANOSECONDS.toMicros(nanos } &amp064Rule public Stopwatch stopwatch = new Stopwatch( &amp064Override protected void succeeded(long nanos Description description logInfo(description &ampquotsucceeded&ampquot nanos } &amp064Override protected void failed(long nanos Throwable e Description description logInfo(description &ampquotfailed&ampquot nanos } &amp064Override protected void skipped(long nanos AssumptionViolatedException e Description description logInfo(description &ampquotskipped&ampquot nanos } &amp064Override protected void finished(long nanos Description description logInfo(description &ampquotfinished&ampquot nanos } } &amp064Test public void succeeds( } &amp064Test public void fails( fail( } &amp064Test public void skips( assumeTrue(false } } <pre> An example to assert runtime <pre> &amp064Test public void performanceTest( throws InterruptedException long delta = 30 Thread.sleep(300L assertEquals(300d stopwatch.runtime(MILLISECONDS delta Thread.sleep(500L assertEquals(800d stopwatch.runtime(MILLISECONDS delta } <pre> author tibor17 since 4.12,2.5,1,The Stopwatch Rule notifies one protected methods time spent test Override get time nanoseconds For example class keep logging time spent passed failed skipped finished test public static class StopwatchTest private static final Logger logger = LoggergetLogger &ampquot&ampquot private static void logInfo Description description String status long nanos String testName = descriptiongetMethodName loggerinfo Stringformat &ampquotTest spent microseconds&ampquot testName status TimeUnitNANOSECONDStoMicros nanos Rule public Stopwatch stopwatch = new Stopwatch Override protected void succeeded long nanos Description description logInfo description &ampquotsucceeded&ampquot nanos Override protected void failed long nanos Throwable e Description description logInfo description &ampquotfailed&ampquot nanos Override protected void skipped long nanos AssumptionViolatedException e Description description logInfo description &ampquotskipped&ampquot nanos Override protected void finished long nanos Description description logInfo description &ampquotfinished&ampquot nanos Test succeeds Test fails fail Test skips assumeTrue false An example assert runtime Test performanceTest throws InterruptedException long delta = 30 Threadsleep 300L assertEquals 300d stopwatchruntime MILLISECONDS delta Threadsleep 500L assertEquals 800d stopwatchruntime MILLISECONDS delta author tibor17 since 412 The Stopwatch Rule notifies one of it own protected method of the time spent by a test Override them to get the time in nanosecond For example this class will keep logging the time spent by each passed failed skipped and finished test public static class StopwatchTest private static final Logger logger = LoggergetLogger &ampquot&ampquot private static void logInfo Description description String status long nanos String testName = descriptiongetMethodName loggerinfo Stringformat &ampquotTest s s spent d microseconds&ampquot testName status TimeUnitNANOSECONDStoMicros nanos Rule public Stopwatch stopwatch = new Stopwatch Override protected void succeeded long nanos Description description logInfo description &ampquotsucceeded&ampquot nanos Override protected void failed long nanos Throwable e Description description logInfo description &ampquotfailed&ampquot nanos Override protected void skipped long nanos AssumptionViolatedException e Description description logInfo description &ampquotskipped&ampquot nanos Override protected void finished long nanos Description description logInfo description &ampquotfinished&ampquot nanos Test succeeds Test fails fail Test skip assumeTrue false An example to assert runtime Test performanceTest throw InterruptedException long delta = 30 Threadsleep 300L assertEquals 300d stopwatchruntime MILLISECONDS delta Threadsleep 500L assertEquals 800d stopwatchruntime MILLISECONDS delta author tibor17 since 412,0
5a933926b8a9f9639f176ebc,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, TestWatchman is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatchman( &amp064Override public void failed(Throwable e FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + e.getClass(.getSimpleName( + &ampquotn&ampquot } &amp064Override public void succeeded(FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> since 4.7 deprecated Use link TestWatcher} (which implements link TestRule} instead.,7.25,1,TestWatchman base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 47 deprecated Use link TestWatcher implements link TestRule instead TestWatchman is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 47 deprecated Use link TestWatcher which implement link TestRule instead,0
5a933926b8a9f9639f176ebd,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/Throwables.java, Rethrows the given code Throwable} allowing the caller to declare that it throws code Exception}. This is useful when your callers have nothing reasonable they can do when a code Throwable} is thrown. This is declared to return code Exception} so it can be used in a code throw} clause <pre> try doSomething( } catch (Throwable e} throw Throwables.rethrowAsException(e } doSomethingLater( <pre> param e exception to rethrow return does not return anything since 4.12,2.0,1,Rethrows given code Throwable allowing caller declare throws code Exception This useful callers nothing reasonable code Throwable thrown This declared return code Exception used code throw clause try doSomething catch Throwable e throw ThrowablesrethrowAsException e doSomethingLater param e exception rethrow return return anything since 412 Rethrows the given code Throwable allowing the caller to declare that it throw code Exception This is useful when your caller have nothing reasonable they can do when a code Throwable is thrown This is declared to return code Exception so it can be used in a code throw clause try doSomething catch Throwable e throw ThrowablesrethrowAsException e doSomethingLater param e exception to rethrow return doe not return anything since 412,0
5a933926b8a9f9639f176ebe,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond. since 4.6,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond since 46 Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond since 46,0
5a933926b8a9f9639f176ebf,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a933926b8a9f9639f176ec0,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/validator/AnnotationValidator.java, Validates annotations on classes and methods. To be validated an annotation should be annotated with link ValidateWith} Instances of this class are shared by multiple test runners so they should be immutable and threadsafe. since 4.12,2.5,1,Validates annotations classes methods To validated annotation annotated link ValidateWith Instances class shared multiple test runners immutable threadsafe since 412 Validates annotation on class and method To be validated an annotation should be annotated with link ValidateWith Instances of this class are shared by multiple test runner so they should be immutable and threadsafe since 412,0
5a933926b8a9f9639f176ec1,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a933926b8a9f9639f176ec2,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a933926b8a9f9639f176ec3,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestTimedOutException.java, Exception thrown when a test fails on timeout. since 4.12,2.5,1,Exception thrown test fails timeout since 412 Exception thrown when a test fails on timeout since 412,0
5a933926b8a9f9639f176ec4,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, In the tests that follow we can't use standard formatting for exception tests try somethingThatShouldThrow( fail( catch (AssertionFailedError e } because fail( would never be reported.,2.5,1,In tests follow can't use standard formatting exception tests try somethingThatShouldThrow fail catch AssertionFailedError e fail would never reported In the test that follow we can't use standard formatting for exception test try somethingThatShouldThrow fail catch AssertionFailedError e because fail would never be reported,0
5a933926b8a9f9639f176ec5,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, A set of assert methods. Messages are only displayed when an assert fails. deprecated Please use link org.junit.Assert} instead.,6.5,1,set assert methods Messages displayed assert fails deprecated Please use link orgjunitAssert instead set of assert method Messages are only displayed when an assert fails deprecated Please use link orgjunitAssert instead,-1
5a933926b8a9f9639f176ec6,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter. since 4.0,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter since 40 Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter since 40,0
5a933926b8a9f9639f176ec7,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class unless they are overridden in the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After since 4.0,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class unless overridden current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter since 40 When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class unless they are overridden in the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter since 40,0
5a933926b8a9f9639f176ec8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class unless they are shadowed in the current class. <p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test since 4.0,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class unless shadowed current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest since 40 If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class unless they are shadowed in the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest since 40,0
5a933926b8a9f9639f176ec9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/AssumptionViolatedException.java, An exception class used to implement <i>assumptions<i> (state in which a given test is meaningful and should or should not be executed. A test for which an assumption fails should not generate a test case failure. see org.junit.Assume since 4.12,5.5,1,An exception class used implement assumptions state given test meaningful executed test assumption fails generate test case failure see orgjunitAssume since 412 An exception class used to implement assumption state in which a given test is meaningful and should or should not be executed test for which an assumption fails should not generate a test case failure see orgjunitAssume since 412,1
5a933926b8a9f9639f176eca,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/Annotatable.java, A model element that may have annotations. since 4.12,3.0,1,model element may annotations since 412 model element that may have annotation since 412,0
5a933926b8a9f9639f176ecb,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions. since 4.5,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions since 45 Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version since 45,0
5a933926b8a9f9639f176ecc,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/Theory.java, Marks test methods that should be read as theories by the link org.junit.experimental.theories.Theories Theories} runner. see org.junit.experimental.theories.Theories,2.5,1,Marks test methods read theories link orgjunitexperimentaltheoriesTheories Theories runner see orgjunitexperimentaltheoriesTheories Marks test method that should be read a theory by the link orgjunitexperimentaltheoriesTheories Theories runner see orgjunitexperimentaltheoriesTheories,0
5a933926b8a9f9639f176ecd,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, A set of methods useful for stating assumptions about the conditions in which a test is meaningful. A failed assumption does not mean the code is broken but that the test provides no useful information. Assume basically means don't run this test if these conditions don't apply. The default JUnit runner skips tests with failing assumptions. Custom runners may behave differently. <p> A good example of using assumptions is in <a href=httpsgithub.comjunitteamjunitwikiTheories>Theories<a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case. <p> Failed assumptions are usually not logged because there may be many tests that don't apply to certain configurations. <p> These methods can be used directly <code>Assume.assumeTrue(...<code> however they read better if they are referenced through static import<br> <pre> import static org.junit.Assume. ... assumeTrue(... <pre> <p> see <a href=httpsgithub.comjunitteamjunitwikiTheories>Theories<a> since 4.4,6.0,1,set methods useful stating assumptions conditions test meaningful failed assumption mean code broken test provides useful information Assume basically means run test conditions apply The default JUnit runner skips tests failing assumptions Custom runners may behave differently good example using assumptions <a href=httpsgithubcomjunitteamjunitwikiTheories>Theories<a> needed exclude certain datapoints suitable allowed certain test case Failed assumptions usually logged may many tests apply certain configurations These methods used directly AssumeassumeTrue however read better referenced static import import static orgjunitAssume assumeTrue see <a href=httpsgithubcomjunitteamjunitwikiTheories>Theories<a> since 44 set of method useful for stating assumption about the condition in which a test is meaningful failed assumption doe not mean the code is broken but that the test provides no useful information Assume basically mean don't run this test if these condition don't apply The default JUnit runner skip test with failing assumption Custom runner may behave differently good example of using assumption is in <a href=httpsgithubcomjunitteamjunitwikiTheories>Theories<a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case Failed assumption are usually not logged because there may be many test that don't apply to certain configuration These method can be used directly AssumeassumeTrue however they read better if they are referenced through static import import static orgjunitAssume assumeTrue see <a href=httpsgithubcomjunitteamjunitwikiTheories>Theories<a> since 44,1
5a933926b8a9f9639f176ece,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestFailure.java, Returns a String containing the stack trace of the error thrown by TestFailure.,3.0,1,Returns String containing stack trace error thrown TestFailure Returns a String containing the stack trace of the error thrown by TestFailure,0
5a933926b8a9f9639f176ecf,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, The code ExpectedException} rule allows you to verify that your code throws a specific exception. <h3>Usage<h3> <pre> public class SimpleExpectedExceptionTest &amp064Rule public ExpectedException thrown= ExpectedException.none( &amp064Test public void throwsNothing(  no exception expected none thrown passes. } &amp064Test public void throwsExceptionWithSpecificType( thrown.expect(NullPointerException.class throw new NullPointerException( } }<pre> <p> You have to add the code ExpectedException} rule to your test. This doesn't affect your existing tests (see code throwsNothing(}. After specifiying the type of the expected exception your test is successful when such an exception is thrown and it fails if a different or no exception is thrown. <p> Instead of specifying the exception's type you can characterize the expected exception based on other criterias too <ul> <li>The exception's message contains a specific text link expectMessage(String}<li> <li>The exception's message complies with a Hamcrest matcher link expectMessage(Matcher}<li> <li>The exception's cause complies with a Hamcrest matcher link expectCause(Matcher}<li> <li>The exception itself complies with a Hamcrest matcher link expect(Matcher}<li> <ul> <p> You can combine any of the presented expectmethods. The test is successful if all specifications are met. <pre> &amp064Test public void throwsException( thrown.expect(NullPointerException.class thrown.expectMessage(&ampquothappened&ampquot throw new NullPointerException(&ampquotWhat happened?&ampquot }<pre> <h3>AssumptionViolatedExceptions<h3> <p> JUnit uses link AssumptionViolatedException}s for indicating that a test provides no useful information. (See link org.junit.Assume} for more information. You have to call code assume} methods before you set expectations of the code ExpectedException} rule. In this case the rule will not handle consume the exceptions and it can be handled by the framework. E.g. the following test is ignored by JUnit's default runner. <pre> &amp064Test public void ignoredBecauseOfFailedAssumption( assumeTrue(false  throws AssumptionViolatedException thrown.expect(NullPointerException.class }<pre> <h3>AssertionErrors<h3> <p> JUnit uses link AssertionError}s for indicating that a test is failing. You have to call code assert} methods before you set expectations of the code ExpectedException} rule if they should be handled by the framework. E.g. the following test fails because of the code assertTrue} statement. <pre> &amp064Test public void throwsUnhandled( assertTrue(false  throws AssertionError thrown.expect(NullPointerException.class }<pre> <h3>Missing Exceptions<h3> <p> By default missing exceptions are reported with an error message like Expected test to throw an instance of foo. You can configure a different message by means of link reportMissingExceptionWithMessage(String}. You can use a code s} placeholder for the description of the expected exception. E.g. Test doesn't throw s. will fail with the error message Test doesn't throw an instance of foo.. since 4.7,21.0,1,The code ExpectedException rule allows verify code throws specific exception <h3>Usage<h3> public class SimpleExpectedExceptionTest Rule public ExpectedException thrown= ExpectedExceptionnone Test throwsNothing exception expected none thrown passes Test throwsExceptionWithSpecificType thrownexpect NullPointerExceptionclass throw new NullPointerException You add code ExpectedException rule test This affect existing tests see code throwsNothing After specifiying type expected exception test successful exception thrown fails different exception thrown Instead specifying exception's type characterize expected exception based criterias <ul> The exception's message contains specific text link expectMessage String The exception's message complies Hamcrest matcher link expectMessage Matcher The exception's cause complies Hamcrest matcher link expectCause Matcher The exception complies Hamcrest matcher link expect Matcher <ul> You combine presented expectmethods The test successful specifications met Test throwsException thrownexpect NullPointerExceptionclass thrownexpectMessage &ampquothappened&ampquot throw new NullPointerException &ampquotWhat happened?&ampquot <h3>AssumptionViolatedExceptions<h3> JUnit uses link AssumptionViolatedException indicating test provides useful information See link orgjunitAssume information You call code assume methods set expectations code ExpectedException rule In case rule handle consume exceptions handled framework Eg following test ignored JUnit's default runner Test ignoredBecauseOfFailedAssumption assumeTrue false throws AssumptionViolatedException thrownexpect NullPointerExceptionclass <h3>AssertionErrors<h3> JUnit uses link AssertionError indicating test failing You call code assert methods set expectations code ExpectedException rule handled framework Eg following test fails code assertTrue statement Test throwsUnhandled assertTrue false throws AssertionError thrownexpect NullPointerExceptionclass <h3>Missing Exceptions<h3> By default missing exceptions reported error message like Expected test throw instance foo You configure different message means link reportMissingExceptionWithMessage String You use code placeholder description expected exception Eg Test throw fail error message Test throw instance foo since 47 The code ExpectedException rule allows you to verify that your code throw a specific exception <h3>Usage<h3> public class SimpleExpectedExceptionTest Rule public ExpectedException thrown= ExpectedExceptionnone Test throwsNothing no exception expected none thrown pass Test throwsExceptionWithSpecificType thrownexpect NullPointerExceptionclass throw new NullPointerException You have to add the code ExpectedException rule to your test This doesn't affect your existing test see code throwsNothing After specifiying the type of the expected exception your test is successful when such an exception is thrown and it fails if a different or no exception is thrown Instead of specifying the exception's type you can characterize the expected exception based on other criterias too <ul> The exception's message contains a specific text link expectMessage String The exception's message complies with a Hamcrest matcher link expectMessage Matcher The exception's cause complies with a Hamcrest matcher link expectCause Matcher The exception itself complies with a Hamcrest matcher link expect Matcher <ul> You can combine any of the presented expectmethods The test is successful if all specification are met Test throwsException thrownexpect NullPointerExceptionclass thrownexpectMessage &ampquothappened&ampquot throw new NullPointerException &ampquotWhat happened?&ampquot <h3>AssumptionViolatedExceptions<h3> JUnit us link AssumptionViolatedException s for indicating that a test provides no useful information See link orgjunitAssume for more information You have to call code assume method before you set expectation of the code ExpectedException rule In this case the rule will not handle consume the exception and it can be handled by the framework Eg the following test is ignored by JUnit's default runner Test ignoredBecauseOfFailedAssumption assumeTrue false throw AssumptionViolatedException thrownexpect NullPointerExceptionclass <h3>AssertionErrors<h3> JUnit us link AssertionError s for indicating that a test is failing You have to call code assert method before you set expectation of the code ExpectedException rule if they should be handled by the framework Eg the following test fails because of the code assertTrue statement Test throwsUnhandled assertTrue false throw AssertionError thrownexpect NullPointerExceptionclass <h3>Missing Exceptions<h3> By default missing exception are reported with an error message like Expected test to throw an instance of foo You can configure a different message by mean of link reportMissingExceptionWithMessage String You can use a code s placeholder for the description of the expected exception Eg Test doesn't throw s will fail with the error message Test doesn't throw an instance of foo since 47,-1
5a933926b8a9f9639f176ed0,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/AllTests.java, These test files need to be cleaned. See httpssourceforge.netpmtask.php?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,3.5,1,These test files need cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407 These test file need to be cleaned See httpssourceforgenetpmtaskphp?func=detailtask&ampproject_task_id=136507&ampgroup_id=15278&ampgroup_project_id=51407,0
5a933926b8a9f9639f176ed1,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> This constructor creates a suite with all the methods starting with test that take no arguments. <p> A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a933926b8a9f9639f176ed2,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test. since 4.0,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test since 40 Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test since 40,0
5a933926b8a9f9639f176ed3,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, A <code>Description<code> describes a test which is to be run or has been run. <code>Descriptions<code> can be atomic (a single test or compound (containing children tests. <code>Descriptions<code> are used to provide feedback about the tests that are about to run (for example the tree view visible in many IDEs or tests that have been run (for example the failures view. <p> <code>Descriptions<code> are implemented as a single class rather than a Composite because they are entirely informational. They contain no logic aside from counting their tests. <p> In the past we used the raw link junit.framework.TestCase}s and link junit.framework.TestSuite}s to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have a superclass below link Object}. We needed a way to pass a class and name together. Description emerged from this. see org.junit.runner.Request see org.junit.runner.Runner since 4.0,2.0,1,Description describes test run run Descriptions atomic single test compound containing children tests Descriptions used provide feedback tests run example tree view visible many IDEs tests run example failures view Descriptions implemented single class rather Composite entirely informational They contain logic aside counting tests In past used raw link junitframeworkTestCase link junitframeworkTestSuite display tree tests This longer viable JUnit 4 atomic tests longer superclass link Object We needed way pass class name together Description emerged see orgjunitrunnerRequest see orgjunitrunnerRunner since 40 Description describes a test which is to be run or ha been run Descriptions can be atomic a single test or compound containing child test Descriptions are used to provide feedback about the test that are about to run for example the tree view visible in many IDEs or test that have been run for example the failure view Descriptions are implemented a a single class rather than a Composite because they are entirely informational They contain no logic aside from counting their test In the past we used the raw link junitframeworkTestCase s and link junitframeworkTestSuite s to display the tree of test This wa no longer viable in JUnit 4 because atomic test no longer have a superclass below link Object We needed a way to pas a class and name together Description emerged from this see orgjunitrunnerRequest see orgjunitrunnerRunner since 40,0
5a933926b8a9f9639f176ed4,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, If you write custom runners you may need to notify JUnit of your progress running tests. Do this by invoking the <code>RunNotifier<code> passed to your implementation of link org.junit.runner.Runnerrun(RunNotifier}. Future evolution of this class is likely to move link fireTestRunStarted(Description} and link fireTestRunFinished(Result} to a separate class since they should only be called once per run. since 4.0,4.5,1,If write custom runners may need notify JUnit progress running tests Do invoking RunNotifier passed implementation link orgjunitrunnerRunnerrun RunNotifier Future evolution class likely move link fireTestRunStarted Description link fireTestRunFinished Result separate class since called per run since 40 If you write custom runner you may need to notify JUnit of your progress running test Do this by invoking the RunNotifier passed to your implementation of link orgjunitrunnerRunnerrun RunNotifier Future evolution of this class is likely to move link fireTestRunStarted Description and link fireTestRunFinished Result to a separate class since they should only be called once per run since 40,0
5a933926b8a9f9639f176ed5,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/JUnitCommandLineParseResult.java, Exception used if there's a problem parsing the command line.,1.5,1,Exception used there's problem parsing command line Exception used if there's a problem parsing the command line,0
5a933926b8a9f9639f176ed6,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/Timeout.java, The Timeout Rule applies the same timeout to all test methods in a class <pre> public static class HasGlobalLongTimeout &amp064Rule public Timeout globalTimeout= new Timeout(20 &amp064Test public void run1( throws InterruptedException Thread.sleep(100 } &amp064Test public void infiniteLoop( while (true } } } <pre> <p> Each test is run in a new thread. If the specified timeout elapses before the test completes its execution is interrupted via link Threadinterrupt(}. This happens in interruptable IO and locks and methods in link Object} and link Thread} throwing link InterruptedException}. <p> A specified timeout of 0 will be interpreted as not set however tests will still launch from separate threads. This can be useful for disabling timeouts in environments where they are dynamically set based on some property. since 4.7,4.5,1,The Timeout Rule applies timeout test methods class public static class HasGlobalLongTimeout Rule public Timeout globalTimeout= new Timeout 20 Test run1 throws InterruptedException Threadsleep 100 Test infiniteLoop true Each test run new thread If specified timeout elapses test completes execution interrupted via link Threadinterrupt This happens interruptable IO locks methods link Object link Thread throwing link InterruptedException specified timeout 0 interpreted set however tests still launch separate threads This useful disabling timeouts environments dynamically set based property since 47 The Timeout Rule applies the same timeout to all test method in a class public static class HasGlobalLongTimeout Rule public Timeout globalTimeout= new Timeout 20 Test run1 throw InterruptedException Threadsleep 100 Test infiniteLoop while true Each test is run in a new thread If the specified timeout elapses before the test completes it execution is interrupted via link Threadinterrupt This happens in interruptable IO and lock and method in link Object and link Thread throwing link InterruptedException specified timeout of 0 will be interpreted a not set however test will still launch from separate thread This can be useful for disabling timeouts in environment where they are dynamically set based on some property since 47,0
5a933926b8a9f9639f176ed7,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually. since 4.0,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually since 40 Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually since 40,0
5a933926b8a9f9639f176ed8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Register an instance of this class with link RunNotifier} to be notified of events that occur during a test run. All of the methods in this class are abstract and have no implementation override one or more methods to receive events. <p> For example suppose you have a <code>Cowbell<code> class that you want to make a noise whenever a test fails. You could write <pre> public class RingingListener extends RunListener public void testFailure(Failure failure Cowbell.ring( } } <pre> <p> To invoke your listener you need to run your tests through <code>JUnitCore<code>. <pre> public void main(String... args JUnitCore core= new JUnitCore( core.addListener(new RingingListener( core.run(MyTestClass.class } <pre> <p> If a listener throws an exception for a test event the other listeners will have their link RunListenertestFailure(Failure} called with a code Description} of link DescriptionTEST_MECHANISM} to indicate the failure. <p> By default JUnit will synchronize calls to your listener. If your listener is threadsafe and you want to allow JUnit to call your listener from multiple threads when tests are run in parallel you can annotate your test class with link RunListener.ThreadSafe}. <p> Listener methods will be called from the same thread as is running the test unless otherwise indicated by the method Javadoc see org.junit.runner.JUnitCore since 4.0,7.5,1,Register instance class link RunNotifier notified events occur test run All methods class abstract implementation override one methods receive events For example suppose Cowbell class want make noise whenever test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke listener need run tests JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass If listener throws exception test event listeners link RunListenertestFailure Failure called code Description link DescriptionTEST_MECHANISM indicate failure By default JUnit synchronize calls listener If listener threadsafe want allow JUnit call listener multiple threads tests run parallel annotate test class link RunListenerThreadSafe Listener methods called thread running test unless otherwise indicated method Javadoc see orgjunitrunnerJUnitCore since 40 Register an instance of this class with link RunNotifier to be notified of event that occur during a test run All of the method in this class are abstract and have no implementation override one or more method to receive event For example suppose you have a Cowbell class that you want to make a noise whenever a test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke your listener you need to run your test through JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass If a listener throw an exception for a test event the other listener will have their link RunListenertestFailure Failure called with a code Description of link DescriptionTEST_MECHANISM to indicate the failure By default JUnit will synchronize call to your listener If your listener is threadsafe and you want to allow JUnit to call your listener from multiple thread when test are run in parallel you can annotate your test class with link RunListenerThreadSafe Listener method will be called from the same thread a is running the test unless otherwise indicated by the method Javadoc see orgjunitrunnerJUnitCore since 40,0
5a933926b8a9f9639f176ed9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a933926b8a9f9639f176eda,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, The ErrorCollector rule allows execution of a test to continue after the first problem is found (for example to collect _all_ the incorrect rows in a table and report them all at once <pre> public static class UsesErrorCollectorTwice &amp064Rule public ErrorCollector collector= new ErrorCollector( &amp064Test public void example( collector.addError(new Throwable(&ampquotfirst thing went wrong&ampquot collector.addError(new Throwable(&ampquotsecond thing went wrong&ampquot collector.checkThat(getResult( not(containsString(&ampquotERROR!&ampquot  all lines will run and then a combined failure logged at the end. } } <pre> since 4.7,4.0,1,The ErrorCollector rule allows execution test continue first problem found example collect _all_ incorrect rows table report public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult containsString &ampquotERROR!&ampquot lines run combined failure logged end since 47 The ErrorCollector rule allows execution of a test to continue after the first problem is found for example to collect _all_ the incorrect row in a table and report them all at once public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult not containsString &ampquotERROR!&ampquot all line will run and then a combined failure logged at the end since 47,0
5a933926b8a9f9639f176edb,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,3.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a933926b8a9f9639f176edc,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, The <code>Test<code> annotation tells JUnit that the <code>public void<code> method to which it is attached can be run as a test case. To run the method JUnit first constructs a fresh instance of the class then invokes the annotated method. Any exceptions thrown by the test will be reported by JUnit as a failure. If no exceptions are thrown the test is assumed to have succeeded. <p> A simple test looks like this <pre> public class Example <b>&amp064Test<b> public void method( org.junit.Assert.assertTrue( new ArrayList(.isEmpty(  } } <pre> <p> The <code>Test<code> annotation supports two optional parameters. The first <code>expected<code> declares that a test method should throw an exception. If it doesn't throw an exception or if it throws a different exception than the one declared the test fails. For example the following test succeeds <pre> &amp064Test(<b>expected=IndexOutOfBoundsException.class<b> public void outOfBounds( new ArrayList&ampltObject&ampgt(.get(1 } <pre> If the exception's message or one of its properties should be verified the link org.junit.rules.ExpectedException ExpectedException} rule can be used. Further information about exception testing can be found at the <a href=httpsgithub.comjunitteamjunitwikiExceptiontesting>JUnit Wiki<a>. <p> The second optional parameter <code>timeout<code> causes a test to fail if it takes longer than a specified amount of clock time (measured in milliseconds. The following test fails <pre> &amp064Test(<b>timeout=100<b> public void infinity( while(true } <pre> <b>Warning<b> while <code>timeout<code> is useful to catch and terminate infinite loops it should not<em> be considered deterministic. The following test may or may not fail depending on how the operating system schedules threads <pre> &amp064Test(<b>timeout=100<b> public void sleep100( Thread.sleep(100 } <pre> <b>THREAD SAFETY WARNING<b> Test methods with a timeout parameter are run in a thread other than the thread which runs the fixture's Before and After methods. This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter. <b>Consider using the link org.junit.rules.Timeout} rule instead<b> which ensures a test method is run on the same thread as the fixture's Before and After methods. since 4.0,21.0,1,The Test annotation tells JUnit method attached run test case To run method JUnit first constructs fresh instance class invokes annotated method Any exceptions thrown test reported JUnit failure If exceptions thrown test assumed succeeded simple test looks like public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation supports two optional parameters The first expected declares test method throw exception If throw exception throws different exception one declared test fails For example following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 If exception's message one properties verified link orgjunitrulesExpectedException ExpectedException rule used Further information exception testing found <a href=httpsgithubcomjunitteamjunitwikiExceptiontesting>JUnit Wiki<a> The second optional parameter timeout causes test fail takes longer specified amount clock time measured milliseconds The following test fails Test <b>timeout=100<b> infinity true <b>Warning<b> timeout useful catch terminate infinite loops considered deterministic The following test may may fail depending operating system schedules threads Test <b>timeout=100<b> sleep100 Threadsleep 100 <b>THREAD SAFETY WARNING<b> Test methods timeout parameter run thread thread runs fixture's Before After methods This may yield different behavior code thread safe compared test method without timeout parameter <b>Consider using link orgjunitrulesTimeout rule instead<b> ensures test method run thread fixture's Before After methods since 40 The Test annotation tell JUnit that the method to which it is attached can be run a a test case To run the method JUnit first construct a fresh instance of the class then invokes the annotated method Any exception thrown by the test will be reported by JUnit a a failure If no exception are thrown the test is assumed to have succeeded simple test look like this public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation support two optional parameter The first expected declares that a test method should throw an exception If it doesn't throw an exception or if it throw a different exception than the one declared the test fails For example the following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 If the exception's message or one of it property should be verified the link orgjunitrulesExpectedException ExpectedException rule can be used Further information about exception testing can be found at the <a href=httpsgithubcomjunitteamjunitwikiExceptiontesting>JUnit Wiki<a> The second optional parameter timeout cause a test to fail if it take longer than a specified amount of clock time measured in millisecond The following test fails Test <b>timeout=100<b> infinity while true <b>Warning<b> while timeout is useful to catch and terminate infinite loop it should not be considered deterministic The following test may or may not fail depending on how the operating system schedule thread Test <b>timeout=100<b> sleep100 Threadsleep 100 <b>THREAD SAFETY WARNING<b> Test method with a timeout parameter are run in a thread other than the thread which run the fixture's Before and After method This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter <b>Consider using the link orgjunitrulesTimeout rule instead<b> which ensures a test method is run on the same thread a the fixture's Before and After method since 40,-1
5a933926b8a9f9639f176edd,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class unless they are overridden in the current class. <p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test since 4.0,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class unless overridden current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest since 40 If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class unless they are overridden in the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest since 40,0
5a933926b8a9f9639f176ede,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. The odd name is necessary because <code>class<code> is a reserved word. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,3.0,1,Create Request processed run tests class The odd name necessary class reserved word param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class The odd name is necessary because class is a reserved word param clazz the class containing the test return a Request that will cause all test in the class to be run,-1
5a933926b8a9f9639f176edf,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a933926b8a9f9639f176ee0,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Convenient base class for Matchers that require a nonnull value of a specific type. This simply implements the null check checks the type and then casts. author Joe Walnes deprecated Please use link org.hamcrest.TypeSafeMatcher}.,6.5,1,Convenient base class Matchers require nonnull value specific type This simply implements null check checks type casts author Joe Walnes deprecated Please use link orghamcrestTypeSafeMatcher Convenient base class for Matchers that require a nonnull value of a specific type This simply implement the null check check the type and then cast author Joe Walnes deprecated Please use link orghamcrestTypeSafeMatcher,0
5a933926b8a9f9639f176ee1,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a933926b8a9f9639f176ee2,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a933926b8a9f9639f176ee3,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java, Creates an instance wrapping the given statement with the given timeout in milliseconds. param statement the statement to wrap param timeoutMillis the timeout in milliseconds deprecated use link builder(} instead.,3.5,1,Creates instance wrapping given statement given timeout milliseconds param statement statement wrap param timeoutMillis timeout milliseconds deprecated use link builder instead Creates an instance wrapping the given statement with the given timeout in millisecond param statement the statement to wrap param timeoutMillis the timeout in millisecond deprecated use link builder instead,0
5a933926b8a9f9639f176ee4,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java, Simple class that SHOULD fail because no parameters are met.,3.0,1,Simple class SHOULD fail parameters met Simple class that SHOULD fail because no parameter are met,0
5a933926b8a9f9639f176ee5,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/rules/RuleMemberValidator.java, Requires the validated member to be nonstatic,3.0,1,Requires validated member nonstatic Requires the validated member to be nonstatic,0
5a933926b8a9f9639f176ee6,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/builders/AnnotatedBuilder.java, The code AnnotatedBuilder} is a strategy for constructing runners for test class that have been annotated with the code RunWith} annotation. All tests within this class will be executed using the runner that was specified within the annotation. <p> If a runner supports inner member classes the member classes will inherit the runner from the enclosing class e.g. <pre> &amp064RunWith(MyRunner.class public class MyTest  some tests might go here public class MyMemberClass &amp064Test public void thisTestRunsWith_MyRunner(  some test logic }  some more tests might go here } &amp064RunWith(AnotherRunner.class public class AnotherMemberClass  some tests might go here public class DeepInnerClass &amp064Test public void thisTestRunsWith_AnotherRunner(  some test logic } } public class DeepInheritedClass extends SuperTest &amp064Test public void thisTestRunsWith_SuperRunner(  some test logic } } } } &amp064RunWith(SuperRunner.class public class SuperTest  some tests might go here } <pre> The key points to note here are <ul> <li>If there is no RunWith annotation no runner will be created.<li> <li>The resolve step is insideout e.g. the closest RunWith annotation wins<li> <li>RunWith annotations are inherited and work as if the class was annotated itself.<li> <li>The default JUnit runner does not support inner member classes so this is only valid for custom runners that support inner member classes.<li> <li>Custom runners with support for inner classes may or may not support RunWith annotations for member classes. Please refer to the custom runner documentation.<li> <ul> see org.junit.runners.model.RunnerBuilder see org.junit.runner.RunWith since 4.0,6.25,1,The code AnnotatedBuilder strategy constructing runners test class annotated code RunWith annotation All tests within class executed using runner specified within annotation If runner supports inner member classes member classes inherit runner enclosing class eg RunWith MyRunnerclass public class MyTest tests might go public class MyMemberClass Test thisTestRunsWith_MyRunner test logic tests might go RunWith AnotherRunnerclass public class AnotherMemberClass tests might go public class DeepInnerClass Test thisTestRunsWith_AnotherRunner test logic public class DeepInheritedClass extends SuperTest Test thisTestRunsWith_SuperRunner test logic RunWith SuperRunnerclass public class SuperTest tests might go The key points note <ul> If RunWith annotation runner created The resolve step insideout eg closest RunWith annotation wins RunWith annotations inherited work class annotated The default JUnit runner support inner member classes valid custom runners support inner member classes Custom runners support inner classes may may support RunWith annotations member classes Please refer custom runner documentation <ul> see orgjunitrunnersmodelRunnerBuilder see orgjunitrunnerRunWith since 40 The code AnnotatedBuilder is a strategy for constructing runner for test class that have been annotated with the code RunWith annotation All test within this class will be executed using the runner that wa specified within the annotation If a runner support inner member class the member class will inherit the runner from the enclosing class eg RunWith MyRunnerclass public class MyTest some test might go here public class MyMemberClass Test thisTestRunsWith_MyRunner some test logic some more test might go here RunWith AnotherRunnerclass public class AnotherMemberClass some test might go here public class DeepInnerClass Test thisTestRunsWith_AnotherRunner some test logic public class DeepInheritedClass extends SuperTest Test thisTestRunsWith_SuperRunner some test logic RunWith SuperRunnerclass public class SuperTest some test might go here The key point to note here are <ul> If there is no RunWith annotation no runner will be created The resolve step is insideout eg the closest RunWith annotation win RunWith annotation are inherited and work a if the class wa annotated itself The default JUnit runner doe not support inner member class so this is only valid for custom runner that support inner member class Custom runner with support for inner class may or may not support RunWith annotation for member class Please refer to the custom runner documentation <ul> see orgjunitrunnersmodelRunnerBuilder see orgjunitrunnerRunWith since 40,1
5a933926b8a9f9639f176ee7,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/DisableOnDebug.java, The code DisableOnDebug} Rule allows you to label certain rules to be disabled when debugging. <p> The most illustrative use case is for tests that make use of the link Timeout} rule when ran in debug mode the test may terminate on timeout abruptly during debugging. Developers may disable the timeout or increase the timeout by making a code change on tests that need debugging and remember revert the change afterwards or rules such as link Timeout} that may be disabled during debugging may be wrapped in a code DisableOnDebug}. <p> The important benefit of this feature is that you can disable such rules without any making any modifications to your test class to remove them during debugging. <p> This does nothing to tackle timeouts or time sensitive code under test when debugging and may make this less useful in such circumstances. <p> Example usage <pre> public static class DisableTimeoutOnDebugSampleTest &amp064Rule public TestRule timeout = new DisableOnDebug(new Timeout(20 &amp064Test public void myTest( int i = 0 assertEquals(0 i  suppose you had a break point here to inspect i } } <pre> since 4.12,4.0,1,The code DisableOnDebug Rule allows label certain rules disabled debugging The illustrative use case tests make use link Timeout rule ran debug mode test may terminate timeout abruptly debugging Developers may disable timeout increase timeout making code change tests need debugging remember revert change afterwards rules link Timeout may disabled debugging may wrapped code DisableOnDebug The important benefit feature disable rules without making modifications test class remove debugging This nothing tackle timeouts time sensitive code test debugging may make less useful circumstances Example usage public static class DisableTimeoutOnDebugSampleTest Rule public TestRule timeout = new DisableOnDebug new Timeout 20 Test myTest int = 0 assertEquals 0 suppose break point inspect since 412 The code DisableOnDebug Rule allows you to label certain rule to be disabled when debugging The most illustrative use case is for test that make use of the link Timeout rule when ran in debug mode the test may terminate on timeout abruptly during debugging Developers may disable the timeout or increase the timeout by making a code change on test that need debugging and remember revert the change afterwards or rule such a link Timeout that may be disabled during debugging may be wrapped in a code DisableOnDebug The important benefit of this feature is that you can disable such rule without any making any modification to your test class to remove them during debugging This doe nothing to tackle timeouts or time sensitive code under test when debugging and may make this le useful in such circumstance Example usage public static class DisableTimeoutOnDebugSampleTest Rule public TestRule timeout = new DisableOnDebug new Timeout 20 Test myTest int i = 0 assertEquals 0 i suppose you had a break point here to inspect i since 412,1
5a933926b8a9f9639f176ee8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a933926b8a9f9639f176ee9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those of the current class unless they are shadowed in the current class. <p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass since 4.0,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class unless shadowed current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass since 40 Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those of the current class unless they are shadowed in the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass since 40,0
5a933926b8a9f9639f176eea,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a933926b8a9f9639f176eeb,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally(,3.5,1,Create new MaxCore serialized file stored storedResults deprecated use storedLocally Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally,0
5a933926b8a9f9639f176eec,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. Abstract inner classes are ignored. <p> So for example <pre> &amp064RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} abstract public static class Ignored ...} } <pre>,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants Abstract inner classes ignored So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind abstract public static class Ignored If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant Abstract inner class are ignored So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind abstract public static class Ignored,0
5a933926b8a9f9639f176eed,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a933926b8a9f9639f176eee,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p> TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run. <p> When the wait command line argument is given TestRunner waits until the users types RETURN. <p> TestRunner prints a trace as the tests are executed followed by a summary at the end.,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a933926b8a9f9639f176eef,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/CategoryValidator.java, Validates that there are no errors in the use of the code Category} annotation. If there is a code Throwable} object will be added to the list of errors. since 4.12,2.5,1,Validates errors use code Category annotation If code Throwable object added list errors since 412 Validates that there are no error in the use of the code Category annotation If there is a code Throwable object will be added to the list of error since 412,0
5a933926b8a9f9639f176ef0,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a933926b8a9f9639f176ef1,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a933926b8a9f9639f176ef2,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Provides most of the functionality specific to a Runner that implements a parent node in the test tree with children defined by objects of some data type code T}. (For link BlockJUnit4ClassRunner} code T} is link Method} . For link Suite} code T} is link Class}. Subclasses must implement finding the children of the node describing each child and running each child. ParentRunner will filter and sort children handle code BeforeClass} and code AfterClass} methods handle annotated link ClassRule}s create a composite link Description} and run children sequentially. since 4.5,0.0,1,Provides functionality specific Runner implements parent node test tree children defined objects data type code T For link BlockJUnit4ClassRunner code T link Method For link Suite code T link Class Subclasses must implement finding children node describing child running child ParentRunner filter sort children handle code BeforeClass code AfterClass methods handle annotated link ClassRule create composite link Description run children sequentially since 45 Provides most of the functionality specific to a Runner that implement a parent node in the test tree with child defined by object of some data type code T For link BlockJUnit4ClassRunner code T is link Method For link Suite code T is link Class Subclasses must implement finding the child of the node describing each child and running each child ParentRunner will filter and sort child handle code BeforeClass and code AfterClass method handle annotated link ClassRule s create a composite link Description and run child sequentially since 45,0
5a933926b8a9f9639f176ef3,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, A set of assertion methods useful for writing tests. Only failed assertions are recorded. These methods can be used directly <code>Assert.assertEquals(...<code> however they read better if they are referenced through static import <pre> import static org.junit.Assert. ... assertEquals(... <pre> see AssertionError since 4.0,2.0,1,set assertion methods useful writing tests Only failed assertions recorded These methods used directly AssertassertEquals however read better referenced static import import static orgjunitAssert assertEquals see AssertionError since 40 set of assertion method useful for writing test Only failed assertion are recorded These method can be used directly AssertassertEquals however they read better if they are referenced through static import import static orgjunitAssert assertEquals see AssertionError since 40,0
5a933926b8a9f9639f176ef4,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test a Fibonacci function write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters(name= &ampquotindex} fib[0}]=1}&ampquot public static Iterable&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } private int fInput private int fExpected public FibonacciTest(int input int expected fInput= input fExpected= expected } &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed using the twoargument constructor and the data values in the <code>&amp064Parameters<code> method. <p> In order that you can easily identify the individual tests you may provide a name for the <code>&amp064Parameters<code> annotation. This name is allowed to contain placeholders which are replaced at runtime. The placeholders are <dl> <dt>index}<dt> <dd>the current parameter index<dd> <dt>0}<dt> <dd>the first parameter value<dd> <dt>1}<dt> <dd>the second parameter value<dd> <dt>...<dt> <dd>...<dd> <dl> <p> In the example given above the <code>Parameterized<code> runner creates names like <code>[1 fib(3=2]<code>. If you don't use the name parameter then the current parameter index is used as name. <p> You can also write <pre> &amp064RunWith(Parameterized.class public class FibonacciTest &amp064Parameters public static Iterable&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } &amp064Parameter(0 public int fInput &amp064Parameter(1 public int fExpected &amp064Test public void test( assertEquals(fExpected Fibonacci.compute(fInput } } <pre> <p> Each instance of <code>FibonacciTest<code> will be constructed with the default constructor and fields annotated by <code>&amp064Parameter<code> will be initialized with the data values in the <code>&amp064Parameters<code> method. <p> The parameters can be provided as an array too <pre> &amp064Parameters public static Object[][] data( return new Object[][]   0 0 }  1 1 }  2 1 }  3 2 }  4 3 }  5 5 }  6 8 } } } <pre> <h3>Tests with single parameter<h3> <p> If your test needs a single parameter only you don't have to wrap it with an array. Instead you can provide an <code>Iterable<code> or an array of objects. <pre> &amp064Parameters public static Iterable&amplt? extends Object&ampgt data( return Arrays.asList(&ampquotfirst test&ampquot &ampquotsecond test&ampquot } <pre> <p> or <pre> &amp064Parameters public static Object[] data( return new Object[]  &ampquotfirst test&ampquot &ampquotsecond test&ampquot } } <pre> <h3>Create different runners<h3> <p> By default the code Parameterized} runner creates a slightly modified link BlockJUnit4ClassRunner} for each set of parameters. You can build an own code Parameterized} runner that creates another runner for each set of parameters. Therefore you have to build a link ParametersRunnerFactory} that creates a runner for each link TestWithParameters}. ( code TestWithParameters} are bundling the parameters and the test name. The factory must have a public zeroarg constructor. <pre> public class YourRunnerFactory implements ParameterizedRunnerFactory public Runner createRunnerForTestWithParameters(TestWithParameters test throws InitializationError return YourRunner(test } } <pre> <p> Use the link UseParametersRunnerFactory} to tell the code Parameterized} runner that it should use your factory. <pre> &amp064RunWith(Parameterized.class &amp064UseParametersRunnerFactory(YourRunnerFactory.class public class YourTest ... } <pre> since 4.0,19.7,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters name= &ampquotindex fib 0 =1 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed using twoargument constructor data values Parameters method In order easily identify individual tests may provide name Parameters annotation This name allowed contain placeholders replaced runtime The placeholders <dl> <dt>index <dt> <dd>the current parameter index<dd> <dt>0 <dt> <dd>the first parameter value<dd> <dt>1 <dt> <dd>the second parameter value<dd> <dt><dt> <dd><dd> <dl> In example given Parameterized runner creates names like 1 fib 3=2 If use name parameter current parameter index used name You also write RunWith Parameterizedclass public class FibonacciTest Parameters public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 Parameter 0 public int fInput Parameter 1 public int fExpected Test test assertEquals fExpected Fibonaccicompute fInput Each instance FibonacciTest constructed default constructor fields annotated Parameter initialized data values Parameters method The parameters provided array Parameters public static Object data return new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 <h3>Tests single parameter<h3> If test needs single parameter wrap array Instead provide Iterable array objects Parameters public static Iterable&amplt? extends Object&ampgt data return ArraysasList &ampquotfirst test&ampquot &ampquotsecond test&ampquot Parameters public static Object data return new Object &ampquotfirst test&ampquot &ampquotsecond test&ampquot <h3>Create different runners<h3> By default code Parameterized runner creates slightly modified link BlockJUnit4ClassRunner set parameters You build code Parameterized runner creates another runner set parameters Therefore build link ParametersRunnerFactory creates runner link TestWithParameters code TestWithParameters bundling parameters test name The factory must public zeroarg constructor public class YourRunnerFactory implements ParameterizedRunnerFactory public Runner createRunnerForTestWithParameters TestWithParameters test throws InitializationError return YourRunner test Use link UseParametersRunnerFactory tell code Parameterized runner use factory RunWith Parameterizedclass UseParametersRunnerFactory YourRunnerFactoryclass public class YourTest since 40 The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test a Fibonacci function write RunWith Parameterizedclass public class FibonacciTest Parameters name= &ampquotindex fib 0 =1 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 private int fInput private int fExpected public FibonacciTest int input int expected fInput= input fExpected= expected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed using the twoargument constructor and the data value in the Parameters method In order that you can easily identify the individual test you may provide a name for the Parameters annotation This name is allowed to contain placeholder which are replaced at runtime The placeholder are <dl> <dt>index <dt> <dd>the current parameter index<dd> <dt>0 <dt> <dd>the first parameter value<dd> <dt>1 <dt> <dd>the second parameter value<dd> <dt><dt> <dd><dd> <dl> In the example given above the Parameterized runner creates name like 1 fib 3=2 If you don't use the name parameter then the current parameter index is used a name You can also write RunWith Parameterizedclass public class FibonacciTest Parameters public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 Parameter 0 public int fInput Parameter 1 public int fExpected Test test assertEquals fExpected Fibonaccicompute fInput Each instance of FibonacciTest will be constructed with the default constructor and field annotated by Parameter will be initialized with the data value in the Parameters method The parameter can be provided a an array too Parameters public static Object data return new Object 0 0 1 1 2 1 3 2 4 3 5 5 6 8 <h3>Tests with single parameter<h3> If your test need a single parameter only you don't have to wrap it with an array Instead you can provide an Iterable or an array of object Parameters public static Iterable&amplt? extends Object&ampgt data return ArraysasList &ampquotfirst test&ampquot &ampquotsecond test&ampquot or Parameters public static Object data return new Object &ampquotfirst test&ampquot &ampquotsecond test&ampquot <h3>Create different runners<h3> By default the code Parameterized runner creates a slightly modified link BlockJUnit4ClassRunner for each set of parameter You can build an own code Parameterized runner that creates another runner for each set of parameter Therefore you have to build a link ParametersRunnerFactory that creates a runner for each link TestWithParameters code TestWithParameters are bundling the parameter and the test name The factory must have a public zeroarg constructor public class YourRunnerFactory implement ParameterizedRunnerFactory public Runner createRunnerForTestWithParameters TestWithParameters test throw InitializationError return YourRunner test Use the link UseParametersRunnerFactory to tell the code Parameterized runner that it should use your factory RunWith Parameterizedclass UseParametersRunnerFactory YourRunnerFactoryclass public class YourTest since 40,0
5a933926b8a9f9639f176ef5,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkMethod.java, Returns true if this is a noarg method that returns a value assignable to code type} deprecated This is used only by the Theories runner and does not use all the generic type info that it ought to. It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf(FrameworkMethod once Theories moves to junitcontrib.,5.5,1,Returns true noarg method returns value assignable code type deprecated This used Theories runner use generic type info ought It replaced forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod Theories moves junitcontrib Returns true if this is a noarg method that return a value assignable to code type deprecated This is used only by the Theories runner and doe not use all the generic type info that it ought to It will be replaced with a forthcoming ParameterSignaturecanAcceptResultOf FrameworkMethod once Theories move to junitcontrib,0
5a933926b8a9f9639f176ef6,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For examples of how this can be useful see these provided MethodRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatchman} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul> Note that link MethodRule} has been replaced by link TestRule} which has the added benefit of supporting class rules. since 4.7,12.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For examples useful see provided MethodRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatchman add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> Note link MethodRule replaced link TestRule added benefit supporting class rules since 47 MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For example of how this can be useful see these provided MethodRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatchman add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul> Note that link MethodRule ha been replaced by link TestRule which ha the added benefit of supporting class rule since 47,1
5a933926b8a9f9639f176ef7,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code clazz}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code clazz Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code clazz Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a933926b8a9f9639f176ef8,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a933926b8a9f9639f176ef9,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/requests/ClassRequest.java, We have to use the f prefix because IntelliJ's JUnit4IdeaTestRunner uses reflection to access this field. See httpsgithub.comjunitteamjunitissues960,3.0,1,We use f prefix IntelliJ's JUnit4IdeaTestRunner uses reflection access field See httpsgithubcomjunitteamjunitissues960 We have to use the f prefix because IntelliJ's JUnit4IdeaTestRunner us reflection to access this field See httpsgithubcomjunitteamjunitissues960,0
5a933926b8a9f9639f176efa,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java, A link BlockJUnit4ClassRunner} with parameters support. Parameters can be injected via constructor or into annotated fields.,2.0,1,link BlockJUnit4ClassRunner parameters support Parameters injected via constructor annotated fields link BlockJUnit4ClassRunner with parameter support Parameters can be injected via constructor or into annotated field,0
5a933926b8a9f9639f176efb,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a933926b8a9f9639f176efc,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/AssumptionViolatedException.java, An exception class used to implement <i>assumptions<i> (state in which a given test is meaningful and should or should not be executed. A test for which an assumption fails should not generate a test case failure. see org.junit.Assume,9.5,1,An exception class used implement assumptions state given test meaningful executed test assumption fails generate test case failure see orgjunitAssume An exception class used to implement assumption state in which a given test is meaningful and should or should not be executed test for which an assumption fails should not generate a test case failure see orgjunitAssume,1
5a933926b8a9f9639f176efd,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away. since 4.7,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away since 47 Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away since 47,0
5a933926b8a9f9639f176efe,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a933926b8a9f9639f176eff,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/JUnitSystem.java, Will be removed in the next major release,2.5,1,Will removed next major release Will be removed in the next major release,0
5a933926b8a9f9639f176f00,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/DataPoints.java, Annotating an array or iterabletyped field or method with &amp064DataPoints will cause the values in the array or iterable given to be used as potential parameters for theories in that class when run with the link org.junit.experimental.theories.Theories Theories} runner. <p> DataPoints will only be considered as potential values for parameters for which their types are assignable. When multiple sets of DataPoints exist with overlapping types more control can be obtained by naming the DataPoints using the value of this annotation e.g. with <code>&amp064DataPoints(dataset1 dataset2}<code> and then specifying which named set to consider as potential values for each parameter using the link org.junit.experimental.theories.FromDataPoints &amp064FromDataPoints} annotation. <p> Parameters with no specified source (i.e. without &amp064FromDataPoints or other link org.junit.experimental.theories.ParametersSuppliedBy &amp064ParameterSuppliedBy} annotations will use all DataPoints that are assignable to the parameter type as potential values including named sets of DataPoints. <p> DataPoints methods whose array types aren't assignable from the target parameter type (and so can't possibly return relevant values will not be called when generating values for that parameter. Iterabletyped datapoints methods must always be called though as this information is not available here after generic type erasure so expensive methods returning iterable datapoints are a bad idea. <pre> &amp064DataPoints public static String[] dataPoints = new String[]  ... } &amp064DataPoints public static String[] generatedDataPoints( return new String[]  ... } } &amp064Theory public void theoryMethod(String param ... } <pre> see org.junit.experimental.theories.Theories see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.FromDataPoints,10.0,1,Annotating array iterabletyped field method DataPoints cause values array iterable given used potential parameters theories class run link orgjunitexperimentaltheoriesTheories Theories runner DataPoints considered potential values parameters types assignable When multiple sets DataPoints exist overlapping types control obtained naming DataPoints using value annotation eg DataPoints dataset1 dataset2 specifying named set consider potential values parameter using link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters specified source ie without FromDataPoints link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotations use DataPoints assignable parameter type potential values including named sets DataPoints DataPoints methods whose array types assignable target parameter type can't possibly return relevant values called generating values parameter Iterabletyped datapoints methods must always called though information available generic type erasure expensive methods returning iterable datapoints bad idea DataPoints public static String dataPoints = new String DataPoints public static String generatedDataPoints return new String Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints Annotating an array or iterabletyped field or method with DataPoints will cause the value in the array or iterable given to be used a potential parameter for theory in that class when run with the link orgjunitexperimentaltheoriesTheories Theories runner DataPoints will only be considered a potential value for parameter for which their type are assignable When multiple set of DataPoints exist with overlapping type more control can be obtained by naming the DataPoints using the value of this annotation eg with DataPoints dataset1 dataset2 and then specifying which named set to consider a potential value for each parameter using the link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters with no specified source ie without FromDataPoints or other link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotation will use all DataPoints that are assignable to the parameter type a potential value including named set of DataPoints DataPoints method whose array type aren't assignable from the target parameter type and so can't possibly return relevant value will not be called when generating value for that parameter Iterabletyped datapoints method must always be called though a this information is not available here after generic type erasure so expensive method returning iterable datapoints are a bad idea DataPoints public static String dataPoints = new String DataPoints public static String generatedDataPoints return new String Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints,-1
5a933926b8a9f9639f176f01,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a933926b8a9f9639f176f02,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/DisableOnDebugTest.java, Nasty rule that always fails,2.5,1,Nasty rule always fails Nasty rule that always fails,-1
5a933926b8a9f9639f176f03,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/rules/RuleMemberValidatorTest.java, If there is any property annotated with ClassRule then it must implement link TestRule} <p>This case has been added with <a href=httpsgithub.comjunitteamjunitissues1019>Issue 1019<a>,0.0,1,If property annotated ClassRule must implement link TestRule This case added <a href=httpsgithubcomjunitteamjunitissues1019>Issue 1019<a> If there is any property annotated with ClassRule then it must implement link TestRule This case ha been added with <a href=httpsgithubcomjunitteamjunitissues1019>Issue 1019<a>,0
5a933926b8a9f9639f176f04,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed. <p>For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre> since 4.0,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 since 40 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2 since 40,0
5a933926b8a9f9639f176f05,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, return A matcher matching any collection containing element deprecated Please use link CoreMatchershasItem(Object} instead.,3.5,1,return matcher matching collection containing element deprecated Please use link CoreMatchershasItem Object instead return matcher matching any collection containing element deprecated Please use link CoreMatchershasItem Object instead,0
5a933926b8a9f9639f176f06,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p>The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith since 4.0,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith since 40 Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith since 40,0
5a933926b8a9f9639f176f07,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Implements the JUnit 4 standard test case class model as defined by the annotations in the org.junit package. Many users will never notice this class it is now the default test class runner but it should have exactly the same behavior as the old test class runner (code JUnit4ClassRunner}. <p> BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners that are slight changes to the default behavior however <ul> <li>It has a much simpler implementation based on link Statement}s allowing new operations to be inserted into the appropriate point in the execution flow. <li>It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner} was in an internal package and is now deprecated. <ul> <p> In turn in 2009 we introduced link Rule}s. In many cases where extending BlockJUnit4ClassRunner was necessary to add new behavior link Rule}s can be used which makes the extension more reusable and composable. since 4.5,10.0,1,Implements JUnit 4 standard test case class model defined annotations orgjunit package Many users never notice class default test class runner exactly behavior old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner advantages writers custom JUnit runners slight changes default behavior however <ul> It much simpler implementation based link Statement allowing new operations inserted appropriate point execution flow It published extension reuse encouraged whereas code JUnit4ClassRunner internal package deprecated <ul> In turn 2009 introduced link Rule In many cases extending BlockJUnit4ClassRunner necessary add new behavior link Rule used makes extension reusable composable since 45 Implements the JUnit 4 standard test case class model a defined by the annotation in the orgjunit package Many user will never notice this class it is now the default test class runner but it should have exactly the same behavior a the old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner ha advantage for writer of custom JUnit runner that are slight change to the default behavior however <ul> It ha a much simpler implementation based on link Statement s allowing new operation to be inserted into the appropriate point in the execution flow It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner wa in an internal package and is now deprecated <ul> In turn in 2009 we introduced link Rule s In many case where extending BlockJUnit4ClassRunner wa necessary to add new behavior link Rule s can be used which make the extension more reusable and composable since 45,1
5a933926b8a9f9639f176f08,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next major release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next major release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next major release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a933926b8a9f9639f176f09,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a933926b8a9f9639f176f0a,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/FromDataPoints.java, Annotating a parameter of a link org.junit.experimental.theories.Theory &amp064Theory} method with <code>&amp064FromDataPoints<code> will limit the datapoints considered as potential values for that parameter to just the link org.junit.experimental.theories.DataPoints DataPoints} with the given name. DataPoint names can be given as the value parameter of the &amp064DataPoints annotation. <p> DataPoints without names will not be considered as values for any parameters annotated with &amp064FromDataPoints. <pre> &amp064DataPoints public static String[] unnamed = new String[]  ... } &amp064DataPoints(regexes public static String[] regexStrings = new String[]  ... } &amp064DataPoints(forMatching alphanumeric} public static String[] testStrings = new String[]  ... } &amp064Theory public void stringTheory(String param  This will be called with every value in 'regexStrings'  'testStrings' and 'unnamed'. } &amp064Theory public void regexTheory(&amp064FromDataPoints(regexes String regex &amp064FromDataPoints(forMatching String value  This will be called with only the values in 'regexStrings' as  regex only the values in 'testStrings' as value and none  of the values in 'unnamed'. } <pre> see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.DataPoints,9.0,1,Annotating parameter link orgjunitexperimentaltheoriesTheory Theory method FromDataPoints limit datapoints considered potential values parameter link orgjunitexperimentaltheoriesDataPoints DataPoints given name DataPoint names given value parameter DataPoints annotation DataPoints without names considered values parameters annotated FromDataPoints DataPoints public static String unnamed = new String DataPoints regexes public static String regexStrings = new String DataPoints forMatching alphanumeric public static String testStrings = new String Theory stringTheory String param This called every value 'regexStrings' 'testStrings' 'unnamed' Theory regexTheory FromDataPoints regexes String regex FromDataPoints forMatching String value This called values 'regexStrings' regex values 'testStrings' value none values 'unnamed' see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesDataPoints Annotating a parameter of a link orgjunitexperimentaltheoriesTheory Theory method with FromDataPoints will limit the datapoints considered a potential value for that parameter to just the link orgjunitexperimentaltheoriesDataPoints DataPoints with the given name DataPoint name can be given a the value parameter of the DataPoints annotation DataPoints without name will not be considered a value for any parameter annotated with FromDataPoints DataPoints public static String unnamed = new String DataPoints regexes public static String regexStrings = new String DataPoints forMatching alphanumeric public static String testStrings = new String Theory stringTheory String param This will be called with every value in 'regexStrings' 'testStrings' and 'unnamed' Theory regexTheory FromDataPoints regexes String regex FromDataPoints forMatching String value This will be called with only the value in 'regexStrings' a regex only the value in 'testStrings' a value and none of the value in 'unnamed' see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesDataPoints,0
5a933926b8a9f9639f176f0b,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/junit/tests/runner/ResultTest.java, A version of code Result} that returns a hardcoded runtime. This makes values returned by the methods deterministic.,2.0,1,version code Result returns hardcoded runtime This makes values returned methods deterministic version of code Result that return a hardcoded runtime This make value returned by the method deterministic,0
5a933926b8a9f9639f176f0c,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java, If there are multiple public methods annotated with Rule returning a link MethodRule} then all the rules returned should be run. <p>This case has been added with <a href=httpsgithub.comjunitteamjunitissues589>Issue 589<a>  Support Rule for methods works only for TestRule but not for MethodRule,2.5,1,If multiple public methods annotated Rule returning link MethodRule rules returned run This case added <a href=httpsgithubcomjunitteamjunitissues589>Issue 589<a> Support Rule methods works TestRule MethodRule If there are multiple public method annotated with Rule returning a link MethodRule then all the rule returned should be run This case ha been added with <a href=httpsgithubcomjunitteamjunitissues589>Issue 589<a> Support Rule for method work only for TestRule but not for MethodRule,0
5a933926b8a9f9639f176f0d,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, A <code>Result<code> collects and summarizes information from running multiple tests. All tests are counted  additional information is collected from tests that fail. since 4.0,2.5,1,Result collects summarizes information running multiple tests All tests counted additional information collected tests fail since 40 Result collect and summarizes information from running multiple test All test are counted additional information is collected from test that fail since 40,0
5a933926b8a9f9639f176f0e,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that reference rules or methods that return a rule. A field must be public not static and a subtype of link org.junit.rules.TestRule} (preferred or link org.junit.rules.MethodRule}. A method must be public not static and must return a subtype of link org.junit.rules.TestRule} (preferred or link org.junit.rules.MethodRule}. <p> The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link Before} methods then the link Test} method and finally any link After} methods throwing an exception if any of these fail. If there are multiple annotated link Rule}s on a class they will be applied in order of fields first then methods. However if there are multiple fields (or methods they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. Rules defined by fields will always be applied before Rules defined by methods. You can use a link org.junit.rules.RuleChain} if you want to have control over the order in which the Rules are applied. <p> For example here is a test class that creates a temporary folder before each test method and deletes it after each <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> <p> And the same using a method. <pre> public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder( &amp064Rule public TemporaryFolder getFolder( return folder } &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> <p> For more information and more examples see link org.junit.rules.TestRule}. since 4.7,15.5,1,Annotates fields reference rules methods return rule field must public static subtype link orgjunitrulesTestRule preferred link orgjunitrulesMethodRule method must public static must return subtype link orgjunitrulesTestRule preferred link orgjunitrulesMethodRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link Before methods link Test method finally link After methods throwing exception fail If multiple annotated link Rule class applied order fields first methods However multiple fields methods applied order depends JVM's implementation reflection API undefined general Rules defined fields always applied Rules defined methods You use link orgjunitrulesRuleChain want control order Rules applied For example test class creates temporary folder test method deletes public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot And using method public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder Rule public TemporaryFolder getFolder return folder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For information examples see link orgjunitrulesTestRule since 47 Annotates field that reference rule or method that return a rule field must be public not static and a subtype of link orgjunitrulesTestRule preferred or link orgjunitrulesMethodRule method must be public not static and must return a subtype of link orgjunitrulesTestRule preferred or link orgjunitrulesMethodRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link Before method then the link Test method and finally any link After method throwing an exception if any of these fail If there are multiple annotated link Rule s on a class they will be applied in order of field first then method However if there are multiple field or method they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general Rules defined by field will always be applied before Rules defined by method You can use a link orgjunitrulesRuleChain if you want to have control over the order in which the Rules are applied For example here is a test class that creates a temporary folder before each test method and deletes it after each public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot And the same using a method public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder Rule public TemporaryFolder getFolder return folder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For more information and more example see link orgjunitrulesTestRule since 47,0
5a933926b8a9f9639f176f0f,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/Theories.java, The Theories runner allows to test a certain functionality against a subset of an infinite set of data points. <p> A Theory is a piece of functionality (a method that is executed against several data inputs called data points. To make a test method a theory you mark it with <b>&amp064Theory<b>. To create a data point you create a public field in your test class and mark it with <b>&amp064DataPoint<b>. The Theories runner then executes your test method as many times as the number of data points declared providing a different data point as the input argument on each invocation. <p> <p> A Theory differs from standard test method in that it captures some aspect of the intended behavior in possibly infinite numbers of scenarios which corresponds to the number of data points declared. Using assumptions and assertions properly together with covering multiple scenarios with different data points can make your tests more flexible and bring them closer to scientific theories (hence the name. <p> <p> For example <pre> &amp064RunWith(<b>Theories.class<b> public class UserTest <b>&amp064DataPoint<b> public static String GOOD_USERNAME = optimus <b>&amp064DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>&amp064Theory<b> public void filenameIncludesUsername(String username assumeThat(username not(containsString( assertThat(new User(username.configFileName( containsString(username } } <pre> This makes it clear that the user's filename should be included in the config file name only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain a slash. <code>UserTest<code> will attempt to run <code>filenameIncludesUsername<code> on every compatible data point defined in the class. If any of the assumptions fail the data point is silently ignored. If all of the assumptions pass but an assertion fails the test fails. <p> Defining general statements as theories allows data point reuse across a bunch of functionality tests and also allows automated tools to search for new unexpected data points that expose bugs. <p> <p> The support for Theories has been absorbed from the Popper project and more complete documentation can be found from that projects archived documentation. <p> see <a href=httpweb.archive.orgweb20071012143326popper.tigris.orgtutorial.html>Archived Popper project documentation<a> see <a href=httpweb.archive.orgweb20110608210825httpshareandenjoy.saff.nettddspecifications.pdf>Paper on Theories<a>,10.0,1,The Theories runner allows test certain functionality subset infinite set data points Theory piece functionality method executed several data inputs called data points To make test method theory mark <b>Theory<b> To create data point create public field test class mark <b>DataPoint<b> The Theories runner executes test method many times number data points declared providing different data point input argument invocation Theory differs standard test method captures aspect intended behavior possibly infinite numbers scenarios corresponds number data points declared Using assumptions assertions properly together covering multiple scenarios different data points make tests flexible bring closer scientific theories hence name For example RunWith <b>Theoriesclass<b> public class UserTest <b>DataPoint<b> public static String GOOD_USERNAME = optimus <b>DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>Theory<b> filenameIncludesUsername String username assumeThat username containsString assertThat new User usernameconfigFileName containsString username This makes clear user's filename included config file name contain slash Another test theory might define happens username contain slash UserTest attempt run filenameIncludesUsername every compatible data point defined class If assumptions fail data point silently ignored If assumptions pass assertion fails test fails Defining general statements theories allows data point reuse across bunch functionality tests also allows automated tools search new unexpected data points expose bugs The support Theories absorbed Popper project complete documentation found projects archived documentation see <a href=httpwebarchiveorgweb20071012143326poppertigrisorgtutorialhtml>Archived Popper project documentation<a> see <a href=httpwebarchiveorgweb20110608210825httpshareandenjoysaffnettddspecificationspdf>Paper Theories<a> The Theories runner allows to test a certain functionality against a subset of an infinite set of data point Theory is a piece of functionality a method that is executed against several data input called data point To make a test method a theory you mark it with <b>Theory<b> To create a data point you create a public field in your test class and mark it with <b>DataPoint<b> The Theories runner then executes your test method a many time a the number of data point declared providing a different data point a the input argument on each invocation Theory differs from standard test method in that it capture some aspect of the intended behavior in possibly infinite number of scenario which corresponds to the number of data point declared Using assumption and assertion properly together with covering multiple scenario with different data point can make your test more flexible and bring them closer to scientific theory hence the name For example RunWith <b>Theoriesclass<b> public class UserTest <b>DataPoint<b> public static String GOOD_USERNAME = optimus <b>DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>Theory<b> filenameIncludesUsername String username assumeThat username not containsString assertThat new User usernameconfigFileName containsString username This make it clear that the user's filename should be included in the config file name only if it doesn't contain a slash Another test or theory might define what happens when a username doe contain a slash UserTest will attempt to run filenameIncludesUsername on every compatible data point defined in the class If any of the assumption fail the data point is silently ignored If all of the assumption pas but an assertion fails the test fails Defining general statement a theory allows data point reuse across a bunch of functionality test and also allows automated tool to search for new unexpected data point that expose bug The support for Theories ha been absorbed from the Popper project and more complete documentation can be found from that project archived documentation see <a href=httpwebarchiveorgweb20071012143326poppertigrisorgtutorialhtml>Archived Popper project documentation<a> see <a href=httpwebarchiveorgweb20110608210825httpshareandenjoysaffnettddspecificationspdf>Paper on Theories<a>,0
5a933926b8a9f9639f176f10,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses since 4.7,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses since 47 Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us since 47,0
5a933926b8a9f9639f176f11,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/Categories.java, From a given set of test classes runs only the classes and methods that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category. <p> Note that for now annotating suites with code Category} has no effect. Categories must be annotated on the direct method or class. <p> Example <pre> public interface FastTests } public interface SlowTests } public interface SmokeTests } public static class A &amp064Test public void a( fail( } &amp064Category(SlowTests.class &amp064Test public void b( } &amp064Category(FastTests.class SmokeTests.class} &amp064Test public void c( } } &amp064Category(SlowTests.class FastTests.class} public static class B &amp064Test public void d( } } &amp064RunWith(Categories.class &amp064IncludeCategory(SlowTests.class &amp064SuiteClasses(A.class B.class}  Note that Categories is a kind of Suite public static class SlowTestSuite  Will run A.b and B.d but not A.a and A.c } <pre> <p> Example to run multiple categories <pre> &amp064RunWith(Categories.class &amp064IncludeCategory(FastTests.class SmokeTests.class} &amp064SuiteClasses(A.class B.class} public static class FastOrSmokeTestSuite  Will run A.c and B.d but not A.b because it is not any of FastTests or SmokeTests } <pre> version 4.12 see <a href=httpsgithub.comjunitteamjunitwikiCategories>Categories at JUnit wiki<a>,2.0,1,From given set test classes runs classes methods annotated either category given IncludeCategory annotation subtype category Note annotating suites code Category effect Categories must annotated direct method class Example public interface FastTests public interface SlowTests public interface SmokeTests public static class Test fail Category SlowTestsclass Test b Category FastTestsclass SmokeTestsclass Test c Category SlowTestsclass FastTestsclass public static class B Test RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note Categories kind Suite public static class SlowTestSuite Will run Ab Bd Aa Ac Example run multiple categories RunWith Categoriesclass IncludeCategory FastTestsclass SmokeTestsclass SuiteClasses Aclass Bclass public static class FastOrSmokeTestSuite Will run Ac Bd Ab FastTests SmokeTests version 412 see <a href=httpsgithubcomjunitteamjunitwikiCategories>Categories JUnit wiki<a> From a given set of test class run only the class and method that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category Note that for now annotating suite with code Category ha no effect Categories must be annotated on the direct method or class Example public interface FastTests public interface SlowTests public interface SmokeTests public static class Test a fail Category SlowTestsclass Test b Category FastTestsclass SmokeTestsclass Test c Category SlowTestsclass FastTestsclass public static class B Test d RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note that Categories is a kind of Suite public static class SlowTestSuite Will run Ab and Bd but not Aa and Ac Example to run multiple category RunWith Categoriesclass IncludeCategory FastTestsclass SmokeTestsclass SuiteClasses Aclass Bclass public static class FastOrSmokeTestSuite Will run Ac and Bd but not Ab because it is not any of FastTests or SmokeTests version 412 see <a href=httpsgithubcomjunitteamjunitwikiCategories>Categories at JUnit wiki<a>,0
5a933926b8a9f9639f176f12,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite since 4.5,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite since 45 RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite since 45,0
5a933926b8a9f9639f176f13,r4.12,2014-12-04,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java, Annotating a link org.junit.experimental.theories.Theory Theory} method parameter with &amp064ParametersSuppliedBy causes it to be supplied with values from the named link org.junit.experimental.theories.ParameterSupplier ParameterSupplier} when run as a theory by the link org.junit.experimental.theories.Theories Theories} runner. In addition annotations themselves can be annotated with &amp064ParametersSuppliedBy and then used similarly. ParameterSuppliedBy annotations on parameters are detected by searching up this heirarchy such that these act as syntactic sugar making <pre> &amp064ParametersSuppliedBy(Supplier.class public &amp064interface SpecialParameter  } &amp064Theory public void theoryMethod(&amp064SpecialParameter String param ... } <pre> equivalent to <pre> &amp064Theory public void theoryMethod(&amp064ParametersSuppliedBy(Supplier.class String param ... } <pre>,2.0,1,Annotating link orgjunitexperimentaltheoriesTheory Theory method parameter ParametersSuppliedBy causes supplied values named link orgjunitexperimentaltheoriesParameterSupplier ParameterSupplier run theory link orgjunitexperimentaltheoriesTheories Theories runner In addition annotations annotated ParametersSuppliedBy used similarly ParameterSuppliedBy annotations parameters detected searching heirarchy act syntactic sugar making ParametersSuppliedBy Supplierclass public interface SpecialParameter Theory theoryMethod SpecialParameter String param equivalent Theory theoryMethod ParametersSuppliedBy Supplierclass String param Annotating a link orgjunitexperimentaltheoriesTheory Theory method parameter with ParametersSuppliedBy cause it to be supplied with value from the named link orgjunitexperimentaltheoriesParameterSupplier ParameterSupplier when run a a theory by the link orgjunitexperimentaltheoriesTheories Theories runner In addition annotation themselves can be annotated with ParametersSuppliedBy and then used similarly ParameterSuppliedBy annotation on parameter are detected by searching up this heirarchy such that these act a syntactic sugar making ParametersSuppliedBy Supplierclass public interface SpecialParameter Theory theoryMethod SpecialParameter String param equivalent to Theory theoryMethod ParametersSuppliedBy Supplierclass String param,0
5a941facb8a9f92136b6c9e9,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TemporaryFolder.java, The TemporaryFolder Rule allows creation of files and folders that should be deleted when the test method finishes (whether it passes or fails. By default no exception will be thrown in case the deletion fails. <p>Example of usage <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> <p>TemporaryFolder rule supports assured deletion mode which will fail the test in case deletion fails with link AssertionError}. <p>Creating TemporaryFolder with assured deletion <pre> &amp064Rule public TemporaryFolder folder= TemporaryFolder.builder(.assureDeletion(.build( <pre> since 4.7,12.5,1,The TemporaryFolder Rule allows creation files folders deleted test method finishes whether passes fails By default exception thrown case deletion fails Example usage public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot TemporaryFolder rule supports assured deletion mode fail test case deletion fails link AssertionError Creating TemporaryFolder assured deletion Rule public TemporaryFolder folder= TemporaryFolderbuilder assureDeletion build since 47 The TemporaryFolder Rule allows creation of file and folder that should be deleted when the test method finish whether it pass or fails By default no exception will be thrown in case the deletion fails Example of usage public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot TemporaryFolder rule support assured deletion mode which will fail the test in case deletion fails with link AssertionError Creating TemporaryFolder with assured deletion Rule public TemporaryFolder folder= TemporaryFolderbuilder assureDeletion build since 47,0
5a941facb8a9f92136b6c9ea,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/samples/SimpleTest.java, avoid warning for not using result,3.0,1,avoid warning using result avoid warning for not using result,0
5a941facb8a9f92136b6c9eb,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/tests/extensions/AllTests.java, Collect tests manually because we have to test class collection code,2.6,1,Collect tests manually test class collection code Collect test manually because we have to test class collection code,0
5a941facb8a9f92136b6c9ec,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/management/ManagementFactory.java, do nothing managementFactoryClass will be none on failure,2.5,1,nothing managementFactoryClass none failure do nothing managementFactoryClass will be none on failure,0
5a941facb8a9f92136b6c9ed,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/DataPoint.java, Annotating an field or method with &amp064DataPoint will cause the field value or the value returned by the method to be used as a potential parameter for theories in that class when run with the link org.junit.experimental.theories.Theories Theories} runner. <p> A DataPoint is only considered as a potential value for parameters for which its type is assignable. When multiple code DataPoint}s exist with overlapping types more control can be obtained by naming each DataPoint using the value of this annotation e.g. with <code>&amp064DataPoint(dataset1 dataset2}<code> and then specifying which named set to consider as potential values for each parameter using the link org.junit.experimental.theories.FromDataPoints &amp064FromDataPoints} annotation. <p> Parameters with no specified source (i.e. without &amp064FromDataPoints or other link org.junit.experimental.theories.ParametersSuppliedBy &amp064ParameterSuppliedBy} annotations will use all code DataPoint}s that are assignable to the parameter type as potential values including named sets of code DataPoint}s. <pre> &amp064DataPoint public static String dataPoint = value &amp064DataPoint(generated public static String generatedDataPoint( return generated value } &amp064Theory public void theoryMethod(String param ... } <pre> see org.junit.experimental.theories.Theories see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.FromDataPoints,5.0,1,Annotating field method DataPoint cause field value value returned method used potential parameter theories class run link orgjunitexperimentaltheoriesTheories Theories runner DataPoint considered potential value parameters type assignable When multiple code DataPoint exist overlapping types control obtained naming DataPoint using value annotation eg DataPoint dataset1 dataset2 specifying named set consider potential values parameter using link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters specified source ie without FromDataPoints link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotations use code DataPoint assignable parameter type potential values including named sets code DataPoint DataPoint public static String dataPoint = value DataPoint generated public static String generatedDataPoint return generated value Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints Annotating an field or method with DataPoint will cause the field value or the value returned by the method to be used a a potential parameter for theory in that class when run with the link orgjunitexperimentaltheoriesTheories Theories runner DataPoint is only considered a a potential value for parameter for which it type is assignable When multiple code DataPoint s exist with overlapping type more control can be obtained by naming each DataPoint using the value of this annotation eg with DataPoint dataset1 dataset2 and then specifying which named set to consider a potential value for each parameter using the link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters with no specified source ie without FromDataPoints or other link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotation will use all code DataPoint s that are assignable to the parameter type a potential value including named set of code DataPoint s DataPoint public static String dataPoint = value DataPoint generated public static String generatedDataPoint return generated value Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints,0
5a941facb8a9f92136b6c9ee,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/ClassRule.java, Annotates static fields that reference rules or methods that return them. A field must be public static and a subtype of link org.junit.rules.TestRule}. A method must be public static and return a subtype of link org.junit.rules.TestRule}. <p> The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link BeforeClass} methods then the entire body of the test class (all contained methods if it is a standard JUnit test class or all contained classes if it is a link org.junit.runners.Suite} and finally any link AfterClass} methods. <p> The statement passed to the link org.junit.rules.TestRule} will never throw an exception and throwing an exception from the link org.junit.rules.TestRule} will result in undefined behavior. This means that some link org.junit.rules.TestRule}s such as link org.junit.rules.ErrorCollector} link org.junit.rules.ExpectedException} and link org.junit.rules.Timeout} have undefined behavior when used as link ClassRule}s. <p> If there are multiple annotated link ClassRule}s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. However Rules defined by fields will always be applied after Rules defined by methods i.e. the Statements returned by the former will be executed around those returned by the latter. <p> For example here is a test suite that connects to a server once before all the test classes run and disconnects after they are finished <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource resource= new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } <pre> <p> and the same using a method <pre> &amp064RunWith(Suite.class &amp064SuiteClasses(A.class B.class C.class} public class UsesExternalResource public static Server myServer= new Server( &amp064ClassRule public static ExternalResource getResource( return new ExternalResource( &amp064Override protected void before( throws Throwable myServer.connect( } &amp064Override protected void after( myServer.disconnect( } } } } <pre> <p> For more information and more examples see link org.junit.rules.TestRule}. since 4.9,6.5,1,Annotates static fields reference rules methods return field must public static subtype link orgjunitrulesTestRule method must public static return subtype link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link BeforeClass methods entire body test class contained methods standard JUnit test class contained classes link orgjunitrunnersSuite finally link AfterClass methods The statement passed link orgjunitrulesTestRule never throw exception throwing exception link orgjunitrulesTestRule result undefined behavior This means link orgjunitrulesTestRule link orgjunitrulesErrorCollector link orgjunitrulesExpectedException link orgjunitrulesTimeout undefined behavior used link ClassRule If multiple annotated link ClassRule class applied order depends JVM's implementation reflection API undefined general However Rules defined fields always applied Rules defined methods ie Statements returned former executed around returned latter For example test suite connects server test classes run disconnects finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect using method RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource getResource return new ExternalResource Override protected void throws Throwable myServerconnect Override protected void myServerdisconnect For information examples see link orgjunitrulesTestRule since 49 Annotates static field that reference rule or method that return them field must be public static and a subtype of link orgjunitrulesTestRule method must be public static and return a subtype of link orgjunitrulesTestRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link BeforeClass method then the entire body of the test class all contained method if it is a standard JUnit test class or all contained class if it is a link orgjunitrunnersSuite and finally any link AfterClass method The statement passed to the link orgjunitrulesTestRule will never throw an exception and throwing an exception from the link orgjunitrulesTestRule will result in undefined behavior This mean that some link orgjunitrulesTestRule s such a link orgjunitrulesErrorCollector link orgjunitrulesExpectedException and link orgjunitrulesTimeout have undefined behavior when used a link ClassRule s If there are multiple annotated link ClassRule s on a class they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general However Rules defined by field will always be applied after Rules defined by method ie the Statements returned by the former will be executed around those returned by the latter For example here is a test suite that connects to a server once before all the test class run and disconnect after they are finished RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource resource= new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect and the same using a method RunWith Suiteclass SuiteClasses Aclass Bclass Cclass public class UsesExternalResource public static Server myServer= new Server ClassRule public static ExternalResource getResource return new ExternalResource Override protected void before throw Throwable myServerconnect Override protected void after myServerdisconnect For more information and more example see link orgjunitrulesTestRule since 49,0
5a941facb8a9f92136b6c9ef,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java, Annotating a link org.junit.experimental.theories.Theory Theory} method int parameter with &amp064TestedOn causes it to be supplied with values from the ints array given when run as a theory by the link org.junit.experimental.theories.Theories Theories} runner. For example the below method would be called three times by the Theories runner once with each of the int parameters specified. <pre> &amp064Theory public void shouldPassForSomeInts(&amp064TestedOn(ints=1 2 3} int param ... } <pre>,2.0,1,Annotating link orgjunitexperimentaltheoriesTheory Theory method int parameter TestedOn causes supplied values ints array given run theory link orgjunitexperimentaltheoriesTheories Theories runner For example method would called three times Theories runner int parameters specified Theory shouldPassForSomeInts TestedOn ints=1 2 3 int param Annotating a link orgjunitexperimentaltheoriesTheory Theory method int parameter with TestedOn cause it to be supplied with value from the ints array given when run a a theory by the link orgjunitexperimentaltheoriesTheories Theories runner For example the below method would be called three time by the Theories runner once with each of the int parameter specified Theory shouldPassForSomeInts TestedOn ints=1 2 3 int param,0
5a941facb8a9f92136b6c9f0,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/FixMethodOrder.java, This class allows the user to choose the order of execution of the methods within a test class. <p>The default order of execution of JUnit tests within a class is deterministic but not predictable. The order of execution is not guaranteed for Java 7 (and some previous versions and can even change from run to run so the order of execution was changed to be deterministic (in JUnit 4.11 <p>It is recommended that test methods be written so that they are independent of the order that they are executed. However there may be a number of dependent tests either through error or by design. This class allows the user to specify the order of execution of test methods. <p>For possibilities see link MethodSorters} Here is an example <pre> &amp064FixMethodOrder(MethodSorters.NAME_ASCENDING public class MyTest } <pre> see org.junit.runners.MethodSorters since 4.11,5.0,1,This class allows user choose order execution methods within test class The default order execution JUnit tests within class deterministic predictable The order execution guaranteed Java 7 previous versions even change run run order execution changed deterministic JUnit 411 It recommended test methods written independent order executed However may number dependent tests either error design This class allows user specify order execution test methods For possibilities see link MethodSorters Here example FixMethodOrder MethodSortersNAME_ASCENDING public class MyTest see orgjunitrunnersMethodSorters since 411 This class allows the user to choose the order of execution of the method within a test class The default order of execution of JUnit test within a class is deterministic but not predictable The order of execution is not guaranteed for Java 7 and some previous version and can even change from run to run so the order of execution wa changed to be deterministic in JUnit 411 It is recommended that test method be written so that they are independent of the order that they are executed However there may be a number of dependent test either through error or by design This class allows the user to specify the order of execution of test method For possibility see link MethodSorters Here is an example FixMethodOrder MethodSortersNAME_ASCENDING public class MyTest see orgjunitrunnersMethodSorters since 411,0
5a941facb8a9f92136b6c9f1,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/assertion/AssertionTest.java, If you want to use 1.4 assertions they will be reported correctly.,2.5,1,If want use 14 assertions reported correctly If you want to use 14 assertion they will be reported correctly,0
5a941facb8a9f92136b6c9f2,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/SuccessfulWithDataPointFields.java, Not annotated as a DataPoint and therefore should be ignored,2.5,1,Not annotated DataPoint therefore ignored Not annotated a a DataPoint and therefore should be ignored,0
5a941facb8a9f92136b6c9f3,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/validator/ValidateWith.java, Allows for an link AnnotationValidator} to be attached to an annotation. <p>When attached to an annotation the validator will be instantiated and invoked by the link org.junit.runners.ParentRunner}.<p> since 4.12,2.5,1,Allows link AnnotationValidator attached annotation When attached annotation validator instantiated invoked link orgjunitrunnersParentRunner since 412 Allows for an link AnnotationValidator to be attached to an annotation When attached to an annotation the validator will be instantiated and invoked by the link orgjunitrunnersParentRunner since 412,0
5a941facb8a9f92136b6c9f4,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestRule.java, A TestRule is an alteration in how a test method or set of test methods is run and reported. A link TestRule} may add additional checks that cause a test that would otherwise fail to pass or it may perform necessary setup or cleanup for tests or it may observe test execution to report it elsewhere. link TestRule}s can do everything that could be done previously with methods annotated with link org.junit.Before} link org.junit.After} link org.junit.BeforeClass} or link org.junit.AfterClass} but they are more powerful and more easily shared between projects and classes. The default JUnit test runners for suites and individual test cases recognize link TestRule}s introduced in two different ways. link org.junit.Rule} annotates methodlevel link TestRule}s and link org.junit.ClassRule} annotates classlevel link TestRule}s. See Javadoc for those annotations for more information. Multiple link TestRule}s can be applied to a test or suite execution. The link Statement} that executes the method or suite is passed to each annotated link org.junit.Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link org.junit.Rule} if any. For examples of how this can be useful see these provided TestRules or write your own <ul> <li>link ErrorCollector} collect multiple errors in one test method<li> <li>link ExpectedException} make flexible assertions about thrown exceptions<li> <li>link ExternalResource} start and stop a server for example<li> <li>link TemporaryFolder} create fresh files and delete after test<li> <li>link TestName} remember the test name for use during the method<li> <li>link TestWatcher} add logic at events during method execution<li> <li>link Timeout} cause test to fail after a set time<li> <li>link Verifier} fail test if object state ends up incorrect<li> <ul> since 4.9,19.5,1,TestRule alteration test method set test methods run reported link TestRule may add additional checks cause test would otherwise fail pass may perform necessary setup cleanup tests may observe test execution report elsewhere link TestRule everything could done previously methods annotated link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass link orgjunitAfterClass powerful easily shared projects classes The default JUnit test runners suites individual test cases recognize link TestRule introduced two different ways link orgjunitRule annotates methodlevel link TestRule link orgjunitClassRule annotates classlevel link TestRule See Javadoc annotations information Multiple link TestRule applied test suite execution The link Statement executes method suite passed annotated link orgjunitRule turn may return substitute modified link Statement passed next link orgjunitRule For examples useful see provided TestRules write <ul> link ErrorCollector collect multiple errors one test method link ExpectedException make flexible assertions thrown exceptions link ExternalResource start stop server example link TemporaryFolder create fresh files delete test link TestName remember test name use method link TestWatcher add logic events method execution link Timeout cause test fail set time link Verifier fail test object state ends incorrect <ul> since 49 TestRule is an alteration in how a test method or set of test method is run and reported link TestRule may add additional check that cause a test that would otherwise fail to pas or it may perform necessary setup or cleanup for test or it may observe test execution to report it elsewhere link TestRule s can do everything that could be done previously with method annotated with link orgjunitBefore link orgjunitAfter link orgjunitBeforeClass or link orgjunitAfterClass but they are more powerful and more easily shared between project and class The default JUnit test runner for suite and individual test case recognize link TestRule s introduced in two different way link orgjunitRule annotates methodlevel link TestRule s and link orgjunitClassRule annotates classlevel link TestRule s See Javadoc for those annotation for more information Multiple link TestRule s can be applied to a test or suite execution The link Statement that executes the method or suite is passed to each annotated link orgjunitRule in turn and each may return a substitute or modified link Statement which is passed to the next link orgjunitRule if any For example of how this can be useful see these provided TestRules or write your own <ul> link ErrorCollector collect multiple error in one test method link ExpectedException make flexible assertion about thrown exception link ExternalResource start and stop a server for example link TemporaryFolder create fresh file and delete after test link TestName remember the test name for use during the method link TestWatcher add logic at event during method execution link Timeout cause test to fail after a set time link Verifier fail test if object state end up incorrect <ul> since 49,1
5a941facb8a9f92136b6c9f5,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestResult.java, A <code>TestResult<code> collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between <i>failures<i> and <i>errors<i>. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an link ArrayIndexOutOfBoundsException}. see Test,1.5,1,TestResult collects results executing test case It instance Collecting Parameter pattern The test framework distinguishes failures errors failure anticipated checked assertions Errors unanticipated problems like link ArrayIndexOutOfBoundsException see Test TestResult collect the result of executing a test case It is an instance of the Collecting Parameter pattern The test framework distinguishes between failure and error failure is anticipated and checked for with assertion Errors are unanticipated problem like an link ArrayIndexOutOfBoundsException see Test,-1
5a941facb8a9f92136b6c9f6,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/ComparisonFailure.java, Thrown when an link org.junit.AssertassertEquals(Object Object assertEquals(String String} fails. Create and throw a <code>ComparisonFailure<code> manually if you want to show users the difference between two complex strings. <p> Inspired by a patch from Alex Chaffee (alexpurpletech.com since 4.0,2.5,1,Thrown link orgjunitAssertassertEquals Object Object assertEquals String String fails Create throw ComparisonFailure manually want show users difference two complex strings Inspired patch Alex Chaffee alexpurpletechcom since 40 Thrown when an link orgjunitAssertassertEquals Object Object assertEquals String String fails Create and throw a ComparisonFailure manually if you want to show user the difference between two complex string Inspired by a patch from Alex Chaffee alexpurpletechcom since 40,1
5a941facb8a9f92136b6c9f7,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/InitializationError.java, Represents one or more problems encountered while initializing a Runner since 4.5,1.5,1,Represents one problems encountered initializing Runner since 45 Represents one or more problem encountered while initializing a Runner since 45,0
5a941facb8a9f92136b6c9f8,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/samples/SimpleTest.java, Some simple tests. <p>This test is expected to fail.,2.5,1,Some simple tests This test expected fail Some simple test This test is expected to fail,0
5a941facb8a9f92136b6c9f9,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatcher.java, TestWatcher is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public TestWatcher watchman= new TestWatcher( &amp064Override protected void failed(Throwable e Description description watchedLog+= description + &ampquotn&ampquot } &amp064Override protected void succeeded(Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> since 4.9,3.75,1,TestWatcher base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public TestWatcher watchman= new TestWatcher Override protected void failed Throwable e Description description watchedLog+= description + &ampquotn&ampquot Override protected void succeeded Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 49 TestWatcher is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public TestWatcher watchman= new TestWatcher Override protected void failed Throwable e Description description watchedLog+= description + &ampquotn&ampquot Override protected void succeeded Description description watchedLog+= description + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 49,0
5a941facb8a9f92136b6c9fa,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Test.java, A Test<em> can be run and collect its results. see TestResult,2.0,1,Test run collect results see TestResult Test can be run and collect it result see TestResult,0
5a941facb8a9f92136b6c9fb,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/StoppedByUserException.java, Thrown when a user has requested that the test run stop. Writers of test running GUIs should be prepared to catch a <code>StoppedByUserException<code>. see org.junit.runner.notification.RunNotifier since 4.0,2.5,1,Thrown user requested test run stop Writers test running GUIs prepared catch StoppedByUserException see orgjunitrunnernotificationRunNotifier since 40 Thrown when a user ha requested that the test run stop Writers of test running GUIs should be prepared to catch a StoppedByUserException see orgjunitrunnernotificationRunNotifier since 40,0
5a941facb8a9f92136b6c9fc,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/StacktracePrintingMatcher.java, A matcher that delegates to throwableMatcher and in addition appends the stacktrace of the actual Throwable in case of a mismatch. deprecated use code org.hamcrest.junit.JunitMatchers.isThrowable(} or code org.hamcrest.junit.JunitMatchers.isException(},3.5,1,matcher delegates throwableMatcher addition appends stacktrace actual Throwable case mismatch deprecated use code orghamcrestjunitJunitMatchersisThrowable code orghamcrestjunitJunitMatchersisException matcher that delegate to throwableMatcher and in addition appends the stacktrace of the actual Throwable in case of a mismatch deprecated use code orghamcrestjunitJunitMatchersisThrowable or code orghamcrestjunitJunitMatchersisException,0
5a941facb8a9f92136b6c9fd,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/Stopwatch.java, The Stopwatch Rule notifies one of its own protected methods of the time spent by a test. <p>Override them to get the time in nanoseconds. For example this class will keep logging the time spent by each passed failed skipped and finished test <pre> public static class StopwatchTest private static final Logger logger = Logger.getLogger(&ampquot&ampquot private static void logInfo(Description description String status long nanos String testName = description.getMethodName( logger.info(String.format(&ampquotTest s s spent d microseconds&ampquot testName status TimeUnit.NANOSECONDS.toMicros(nanos } &amp064Rule public Stopwatch stopwatch = new Stopwatch( &amp064Override protected void succeeded(long nanos Description description logInfo(description &ampquotsucceeded&ampquot nanos } &amp064Override protected void failed(long nanos Throwable e Description description logInfo(description &ampquotfailed&ampquot nanos } &amp064Override protected void skipped(long nanos AssumptionViolatedException e Description description logInfo(description &ampquotskipped&ampquot nanos } &amp064Override protected void finished(long nanos Description description logInfo(description &ampquotfinished&ampquot nanos } } &amp064Test public void succeeds( } &amp064Test public void fails( fail( } &amp064Test public void skips( assumeTrue(false } } <pre> An example to assert runtime <pre> &amp064Test public void performanceTest( throws InterruptedException long delta = 30 Thread.sleep(300L assertEquals(300d stopwatch.runtime(MILLISECONDS delta Thread.sleep(500L assertEquals(800d stopwatch.runtime(MILLISECONDS delta } <pre> author tibor17 since 4.12,2.5,1,The Stopwatch Rule notifies one protected methods time spent test Override get time nanoseconds For example class keep logging time spent passed failed skipped finished test public static class StopwatchTest private static final Logger logger = LoggergetLogger &ampquot&ampquot private static void logInfo Description description String status long nanos String testName = descriptiongetMethodName loggerinfo Stringformat &ampquotTest spent microseconds&ampquot testName status TimeUnitNANOSECONDStoMicros nanos Rule public Stopwatch stopwatch = new Stopwatch Override protected void succeeded long nanos Description description logInfo description &ampquotsucceeded&ampquot nanos Override protected void failed long nanos Throwable e Description description logInfo description &ampquotfailed&ampquot nanos Override protected void skipped long nanos AssumptionViolatedException e Description description logInfo description &ampquotskipped&ampquot nanos Override protected void finished long nanos Description description logInfo description &ampquotfinished&ampquot nanos Test succeeds Test fails fail Test skips assumeTrue false An example assert runtime Test performanceTest throws InterruptedException long delta = 30 Threadsleep 300L assertEquals 300d stopwatchruntime MILLISECONDS delta Threadsleep 500L assertEquals 800d stopwatchruntime MILLISECONDS delta author tibor17 since 412 The Stopwatch Rule notifies one of it own protected method of the time spent by a test Override them to get the time in nanosecond For example this class will keep logging the time spent by each passed failed skipped and finished test public static class StopwatchTest private static final Logger logger = LoggergetLogger &ampquot&ampquot private static void logInfo Description description String status long nanos String testName = descriptiongetMethodName loggerinfo Stringformat &ampquotTest s s spent d microseconds&ampquot testName status TimeUnitNANOSECONDStoMicros nanos Rule public Stopwatch stopwatch = new Stopwatch Override protected void succeeded long nanos Description description logInfo description &ampquotsucceeded&ampquot nanos Override protected void failed long nanos Throwable e Description description logInfo description &ampquotfailed&ampquot nanos Override protected void skipped long nanos AssumptionViolatedException e Description description logInfo description &ampquotskipped&ampquot nanos Override protected void finished long nanos Description description logInfo description &ampquotfinished&ampquot nanos Test succeeds Test fails fail Test skip assumeTrue false An example to assert runtime Test performanceTest throw InterruptedException long delta = 30 Threadsleep 300L assertEquals 300d stopwatchruntime MILLISECONDS delta Threadsleep 500L assertEquals 800d stopwatchruntime MILLISECONDS delta author tibor17 since 412,0
5a941facb8a9f92136b6c9fe,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/TestWatchman.java, TestWatchman is a base class for Rules that take note of the testing action without modifying it. For example this class will keep a log of each passing and failing test <pre> public static class WatchmanTest private static String watchedLog &amp064Rule public MethodRule watchman= new TestWatchman( &amp064Override public void failed(Throwable e FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + e.getClass(.getSimpleName( + &ampquotn&ampquot } &amp064Override public void succeeded(FrameworkMethod method watchedLog+= method.getName( + &ampquot &ampquot + &ampquotsuccess!n&ampquot } } &amp064Test public void fails( fail( } &amp064Test public void succeeds( } } <pre> since 4.7 deprecated Use link TestWatcher} (which implements link TestRule} instead.,7.25,1,TestWatchman base class Rules take note testing action without modifying For example class keep log passing failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 47 deprecated Use link TestWatcher implements link TestRule instead TestWatchman is a base class for Rules that take note of the testing action without modifying it For example this class will keep a log of each passing and failing test public static class WatchmanTest private static String watchedLog Rule public MethodRule watchman= new TestWatchman Override failed Throwable e FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + egetClass getSimpleName + &ampquotn&ampquot Override succeeded FrameworkMethod method watchedLog+= methodgetName + &ampquot &ampquot + &ampquotsuccess!n&ampquot Test fails fail Test succeeds since 47 deprecated Use link TestWatcher which implement link TestRule instead,0
5a941facb8a9f92136b6c9ff,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/Throwables.java, Rethrows the given code Throwable} allowing the caller to declare that it throws code Exception}. This is useful when your callers have nothing reasonable they can do when a code Throwable} is thrown. This is declared to return code Exception} so it can be used in a code throw} clause <pre> try doSomething( } catch (Throwable e} throw Throwables.rethrowAsException(e } doSomethingLater( <pre> param e exception to rethrow return does not return anything since 4.12,2.0,1,Rethrows given code Throwable allowing caller declare throws code Exception This useful callers nothing reasonable code Throwable thrown This declared return code Exception used code throw clause try doSomething catch Throwable e throw ThrowablesrethrowAsException e doSomethingLater param e exception rethrow return return anything since 412 Rethrows the given code Throwable allowing the caller to declare that it throw code Exception This is useful when your caller have nothing reasonable they can do when a code Throwable is thrown This is declared to return code Exception so it can be used in a code throw clause try doSomething catch Throwable e throw ThrowablesrethrowAsException e doSomethingLater param e exception to rethrow return doe not return anything since 412,0
5a941facb8a9f92136b6ca00,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Computer.java, Represents a strategy for computing runners and suites. WARNING this class is very likely to undergo serious changes in version 4.8 and beyond. since 4.6,3.0,1,Represents strategy computing runners suites WARNING class likely undergo serious changes version 48 beyond since 46 Represents a strategy for computing runner and suite WARNING this class is very likely to undergo serious change in version 48 and beyond since 46,0
5a941facb8a9f92136b6ca01,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java, A matcher that applies a delegate matcher to the cause of the current Throwable returning the result of that match. param <T> the type of the throwable being matched deprecated use code org.hamcrest.junit.ExpectedException},3.5,1,matcher applies delegate matcher cause current Throwable returning result match param <T> type throwable matched deprecated use code orghamcrestjunitExpectedException matcher that applies a delegate matcher to the cause of the current Throwable returning the result of that match param <T> the type of the throwable being matched deprecated use code orghamcrestjunitExpectedException,0
5a941facb8a9f92136b6ca02,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/PrintableResult.java, A test result that prints nicely in error messages. This is only intended to be used in JUnit selftests. For example <pre> assertThat(testResult(HasExpectedException.class isSuccessful( <pre>,3.0,1,test result prints nicely error messages This intended used JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful test result that print nicely in error message This is only intended to be used in JUnit selftests For example assertThat testResult HasExpectedExceptionclass isSuccessful,-1
5a941facb8a9f92136b6ca03,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/validator/AnnotationValidator.java, Validates annotations on classes and methods. To be validated an annotation should be annotated with link ValidateWith} Instances of this class are shared by multiple test runners so they should be immutable and threadsafe. since 4.12,2.5,1,Validates annotations classes methods To validated annotation annotated link ValidateWith Instances class shared multiple test runners immutable threadsafe since 412 Validates annotation on class and method To be validated an annotation should be annotated with link ValidateWith Instances of this class are shared by multiple test runner so they should be immutable and threadsafe since 412,0
5a941facb8a9f92136b6ca04,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/MoneyBag.java, A MoneyBag defers exchange rate conversions. For example adding 12 Swiss Francs to 14 US Dollars is represented as a bag containing the two Monies 12 CHF and 14 USD. Adding another 10 Swiss francs gives a bag with 22 CHF and 14 USD. Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rates. A MoneyBag is represented as a list of Monies and provides different constructors to create a MoneyBag.,2.0,1,MoneyBag defers exchange rate conversions For example adding 12 Swiss Francs 14 US Dollars represented bag containing two Monies 12 CHF 14 USD Adding another 10 Swiss francs gives bag 22 CHF 14 USD Due deferred exchange rate conversion later value MoneyBag different exchange rates MoneyBag represented list Monies provides different constructors create MoneyBag MoneyBag defers exchange rate conversion For example adding 12 Swiss Francs to 14 US Dollars is represented a a bag containing the two Monies 12 CHF and 14 USD Adding another 10 Swiss franc give a bag with 22 CHF and 14 USD Due to the deferred exchange rate conversion we can later value a MoneyBag with different exchange rate MoneyBag is represented a a list of Monies and provides different constructor to create a MoneyBag,0
5a941facb8a9f92136b6ca05,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filter.java, Invoke with a link org.junit.runner.Runner} to cause all tests it intends to run to first be checked with the filter. Only those that pass the filter will be run. param child the runner to be filtered by the receiver throws NoTestsRemainException if the receiver removes all tests,2.5,1,Invoke link orgjunitrunnerRunner cause tests intends run first checked filter Only pass filter run param child runner filtered receiver throws NoTestsRemainException receiver removes tests Invoke with a link orgjunitrunnerRunner to cause all test it intends to run to first be checked with the filter Only those that pas the filter will be run param child the runner to be filtered by the receiver throw NoTestsRemainException if the receiver remove all test,0
5a941facb8a9f92136b6ca06,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestTimedOutException.java, Exception thrown when a test fails on timeout. since 4.12,2.5,1,Exception thrown test fails timeout since 412 Exception thrown when a test fails on timeout since 412,0
5a941facb8a9f92136b6ca07,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/AssertTest.java, In the tests that follow we can't use standard formatting for exception tests try somethingThatShouldThrow( fail( catch (AssertionFailedError e } because fail( would never be reported.,2.5,1,In tests follow can't use standard formatting exception tests try somethingThatShouldThrow fail catch AssertionFailedError e fail would never reported In the test that follow we can't use standard formatting for exception test try somethingThatShouldThrow fail catch AssertionFailedError e because fail would never be reported,0
5a941facb8a9f92136b6ca08,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Assert.java, A set of assert methods. Messages are only displayed when an assert fails. deprecated Please use link org.junit.Assert} instead.,6.5,1,set assert methods Messages displayed assert fails deprecated Please use link orgjunitAssert instead set of assert method Messages are only displayed when an assert fails deprecated Please use link orgjunitAssert instead,-1
5a941facb8a9f92136b6ca09,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Filterable.java, Runners that allow filtering should implement this interface. Implement link filter(Filter} to remove tests that don't pass the filter. since 4.0,0.0,1,Runners allow filtering implement interface Implement link filter Filter remove tests pass filter since 40 Runners that allow filtering should implement this interface Implement link filter Filter to remove test that don't pas the filter since 40,0
5a941facb8a9f92136b6ca0a,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Before.java, When writing tests it is common to find that several tests need similar objects created before they can run. Annotating a <code>public void<code> method with <code>&amp064Before<code> causes that method to be run before the link org.junit.Test} method. The <code>&amp064Before<code> methods of superclasses will be run before those of the current class unless they are overridden in the current class. No other ordering is defined. <p> Here is a simple example <pre> public class Example List empty &amp064Before public void initialize( empty= new ArrayList( } &amp064Test public void size( ... } &amp064Test public void remove( ... } } <pre> see org.junit.BeforeClass see org.junit.After since 4.0,2.5,1,When writing tests common find several tests need similar objects created run Annotating method Before causes method run link orgjunitTest method The Before methods superclasses run current class unless overridden current class No ordering defined Here simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter since 40 When writing test it is common to find that several test need similar object created before they can run Annotating a method with Before cause that method to be run before the link orgjunitTest method The Before method of superclass will be run before those of the current class unless they are overridden in the current class No other ordering is defined Here is a simple example public class Example List empty Before initialize empty= new ArrayList Test size Test remove see orgjunitBeforeClass see orgjunitAfter since 40,0
5a941facb8a9f92136b6ca0b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/AfterClass.java, If you allocate expensive external resources in a link org.junit.BeforeClass} method you need to release them after all the tests in the class have run. Annotating a <code>public static void<code> method with <code>&amp064AfterClass<code> causes that method to be run after all the tests in the class have been run. All <code>&amp064AfterClass<code> methods are guaranteed to run even if a link org.junit.BeforeClass} method throws an exception. The <code>&amp064AfterClass<code> methods declared in superclasses will be run after those of the current class unless they are shadowed in the current class. <p> Here is a simple example <pre> public class Example private static DatabaseConnection database &amp064BeforeClass public static void login( database= ... } &amp064Test public void something( ... } &amp064Test public void somethingElse( ... } &amp064AfterClass public static void logout( database.logout( } } <pre> see org.junit.BeforeClass see org.junit.Test since 4.0,5.0,1,If allocate expensive external resources link orgjunitBeforeClass method need release tests class run Annotating public static void method AfterClass causes method run tests class run All AfterClass methods guaranteed run even link orgjunitBeforeClass method throws exception The AfterClass methods declared superclasses run current class unless shadowed current class Here simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest since 40 If you allocate expensive external resource in a link orgjunitBeforeClass method you need to release them after all the test in the class have run Annotating a public static void method with AfterClass cause that method to be run after all the test in the class have been run All AfterClass method are guaranteed to run even if a link orgjunitBeforeClass method throw an exception The AfterClass method declared in superclass will be run after those of the current class unless they are shadowed in the current class Here is a simple example public class Example private static DatabaseConnection database BeforeClass public static void login database= Test something Test somethingElse AfterClass public static void logout databaselogout see orgjunitBeforeClass see orgjunitTest since 40,0
5a941facb8a9f92136b6ca0c,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/AssumptionViolatedException.java, An exception class used to implement <i>assumptions<i> (state in which a given test is meaningful and should or should not be executed. A test for which an assumption fails should not generate a test case failure. see org.junit.Assume since 4.12,5.5,1,An exception class used implement assumptions state given test meaningful executed test assumption fails generate test case failure see orgjunitAssume since 412 An exception class used to implement assumption state in which a given test is meaningful and should or should not be executed test for which an assumption fails should not generate a test case failure see orgjunitAssume since 412,1
5a941facb8a9f92136b6ca0d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/Annotatable.java, A model element that may have annotations. since 4.12,3.0,1,model element may annotations since 412 model element that may have annotation since 412,0
5a941facb8a9f92136b6ca0e,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/JUnit4.java, Aliases the current default JUnit 4 class runner for futureproofing. If future versions of JUnit change the default Runner class they will also change the definition of this class. Developers wanting to explicitly tag a class as a JUnit 4 class should use code RunWith(JUnit4.class} not for example in JUnit 4.5 code RunWith(BlockJUnit4ClassRunner.class}. This is the only way this class should be usedany extension that depends on the implementation details of this class is likely to break in future versions. since 4.5,6.5,1,Aliases current default JUnit 4 class runner futureproofing If future versions JUnit change default Runner class also change definition class Developers wanting explicitly tag class JUnit 4 class use code RunWith JUnit4class example JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This way class usedany extension depends implementation details class likely break future versions since 45 Aliases the current default JUnit 4 class runner for futureproofing If future version of JUnit change the default Runner class they will also change the definition of this class Developers wanting to explicitly tag a class a a JUnit 4 class should use code RunWith JUnit4class not for example in JUnit 45 code RunWith BlockJUnit4ClassRunnerclass This is the only way this class should be usedany extension that depends on the implementation detail of this class is likely to break in future version since 45,0
5a941facb8a9f92136b6ca0f,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/Theory.java, Marks test methods that should be read as theories by the link org.junit.experimental.theories.Theories Theories} runner. see org.junit.experimental.theories.Theories,2.5,1,Marks test methods read theories link orgjunitexperimentaltheoriesTheories Theories runner see orgjunitexperimentaltheoriesTheories Marks test method that should be read a theory by the link orgjunitexperimentaltheoriesTheories Theories runner see orgjunitexperimentaltheoriesTheories,0
5a941facb8a9f92136b6ca10,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assume.java, A set of methods useful for stating assumptions about the conditions in which a test is meaningful. A failed assumption does not mean the code is broken but that the test provides no useful information. Assume basically means don't run this test if these conditions don't apply. The default JUnit runner skips tests with failing assumptions. Custom runners may behave differently. <p> A good example of using assumptions is in <a href=httpsgithub.comjunitteamjunit4wikiTheories>Theories<a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case. <p> Failed assumptions are usually not logged because there may be many tests that don't apply to certain configurations. <p> These methods can be used directly <code>Assume.assumeTrue(...<code> however they read better if they are referenced through static import<br> <pre> import static org.junit.Assume. ... assumeTrue(... <pre> <p> see <a href=httpsgithub.comjunitteamjunit4wikiTheories>Theories<a> since 4.4,6.0,1,set methods useful stating assumptions conditions test meaningful failed assumption mean code broken test provides useful information Assume basically means run test conditions apply The default JUnit runner skips tests failing assumptions Custom runners may behave differently good example using assumptions <a href=httpsgithubcomjunitteamjunit4wikiTheories>Theories<a> needed exclude certain datapoints suitable allowed certain test case Failed assumptions usually logged may many tests apply certain configurations These methods used directly AssumeassumeTrue however read better referenced static import import static orgjunitAssume assumeTrue see <a href=httpsgithubcomjunitteamjunit4wikiTheories>Theories<a> since 44 set of method useful for stating assumption about the condition in which a test is meaningful failed assumption doe not mean the code is broken but that the test provides no useful information Assume basically mean don't run this test if these condition don't apply The default JUnit runner skip test with failing assumption Custom runner may behave differently good example of using assumption is in <a href=httpsgithubcomjunitteamjunit4wikiTheories>Theories<a> where they are needed to exclude certain datapoints that aren't suitable or allowed for a certain test case Failed assumption are usually not logged because there may be many test that don't apply to certain configuration These method can be used directly AssumeassumeTrue however they read better if they are referenced through static import import static orgjunitAssume assumeTrue see <a href=httpsgithubcomjunitteamjunit4wikiTheories>Theories<a> since 44,1
5a941facb8a9f92136b6ca11,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestFailure.java, Returns a String containing the stack trace of the error thrown by TestFailure.,3.0,1,Returns String containing stack trace error thrown TestFailure Returns a String containing the stack trace of the error thrown by TestFailure,0
5a941facb8a9f92136b6ca12,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/TemporaryFolderRuleAssuredDeletionTest.java, Don't need to create as we are overriding deletion.,2.5,1,Don't need create overriding deletion Don't need to create a we are overriding deletion,0
5a941facb8a9f92136b6ca13,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/function/ThrowingRunnable.java, This interface facilitates the use of expectThrows from Java 8. It allows method references to void methods (that declare checked exceptions to be passed directly into expectThrows without wrapping. It is not meant to be implemented directly. since 4.13,3.0,1,This interface facilitates use expectThrows Java 8 It allows method references void methods declare checked exceptions passed directly expectThrows without wrapping It meant implemented directly since 413 This interface facilitates the use of expectThrows from Java 8 It allows method reference to void method that declare checked exception to be passed directly into expectThrows without wrapping It is not meant to be implemented directly since 413,0
5a941facb8a9f92136b6ca14,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/RuleMemberValidatorTest.java, If there is any property annotated with ClassRule then it must implement link TestRule} <p>This case has been added with <a href=httpsgithub.comjunitteamjunit4issues1019>Issue 1019<a>,0.0,1,If property annotated ClassRule must implement link TestRule This case added <a href=httpsgithubcomjunitteamjunit4issues1019>Issue 1019<a> If there is any property annotated with ClassRule then it must implement link TestRule This case ha been added with <a href=httpsgithubcomjunitteamjunit4issues1019>Issue 1019<a>,0
5a941facb8a9f92136b6ca15,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ExpectedException.java, The code ExpectedException} rule allows you to verify that your code throws a specific exception. Note that starting with Java 8 link org.junit.AssertassertThrows(java.lang.Class org.junit.function.ThrowingRunnable Assert.assertThrows} is often a better choice since it allows you to express exactly where you expect the exception to be thrown. Use link org.junit.AssertexpectThrows(java.lang.Class org.junit.function.ThrowingRunnable expectThrows} if you need to assert something about the thrown exception. <h3>Usage<h3> <pre> public class SimpleExpectedExceptionTest &amp064Rule public ExpectedException thrown = ExpectedException.none( &amp064Test public void throwsNothing(  no exception expected none thrown passes. } &amp064Test public void throwsExceptionWithSpecificType( thrown.expect(NullPointerException.class throw new NullPointerException( } }<pre> <p>You have to add the code ExpectedException} rule to your test. This doesn't affect your existing tests (see code throwsNothing(}. After specifying the type of the expected exception your test is successful when such an exception is thrown and it fails if a different or no exception is thrown. <p>This rule does not perform any special magic to make execution continue as if the exception had not been thrown. So it is nearly always a mistake for a test method to have statements after the one that is expected to throw the exception. <p>Instead of specifying the exception's type you can characterize the expected exception based on other criteria too <ul> <li>The exception's message contains a specific text link expectMessage(String}<li> <li>The exception's message complies with a Hamcrest matcher link expectMessage(Matcher}<li> <li>The exception's cause complies with a Hamcrest matcher link expectCause(Matcher}<li> <li>The exception itself complies with a Hamcrest matcher link expect(Matcher}<li> <ul> <p>You can combine any of the presented expectmethods. The test is successful if all specifications are met. <pre> &amp064Test public void throwsException( thrown.expect(NullPointerException.class thrown.expectMessage(&ampquothappened&ampquot throw new NullPointerException(&ampquotWhat happened?&ampquot }<pre> <h3>AssumptionViolatedExceptions<h3> <p>JUnit uses link AssumptionViolatedException}s for indicating that a test provides no useful information. (See link org.junit.Assume} for more information. You have to call code assume} methods before you set expectations of the code ExpectedException} rule. In this case the rule will not handle consume the exceptions and it can be handled by the framework. E.g. the following test is ignored by JUnit's default runner. <pre> &amp064Test public void ignoredBecauseOfFailedAssumption( assumeTrue(false  throws AssumptionViolatedException thrown.expect(NullPointerException.class }<pre> <h3>AssertionErrors<h3> <p>JUnit uses link AssertionError}s for indicating that a test is failing. You have to call code assert} methods before you set expectations of the code ExpectedException} rule if they should be handled by the framework. E.g. the following test fails because of the code assertTrue} statement. <pre> &amp064Test public void throwsUnhandled( assertTrue(false  throws AssertionError thrown.expect(NullPointerException.class }<pre> <h3>Missing Exceptions<h3> <p>By default missing exceptions are reported with an error message like Expected test to throw an instance of foo. You can configure a different message by means of link reportMissingExceptionWithMessage(String}. You can use a code s} placeholder for the description of the expected exception. E.g. Test doesn't throw s. will fail with the error message Test doesn't throw an instance of foo.. since 4.7,26.5,1,The code ExpectedException rule allows verify code throws specific exception Note starting Java 8 link orgjunitAssertassertThrows javalangClass orgjunitfunctionThrowingRunnable AssertassertThrows often better choice since allows express exactly expect exception thrown Use link orgjunitAssertexpectThrows javalangClass orgjunitfunctionThrowingRunnable expectThrows need assert something thrown exception <h3>Usage<h3> public class SimpleExpectedExceptionTest Rule public ExpectedException thrown = ExpectedExceptionnone Test throwsNothing exception expected none thrown passes Test throwsExceptionWithSpecificType thrownexpect NullPointerExceptionclass throw new NullPointerException You add code ExpectedException rule test This affect existing tests see code throwsNothing After specifying type expected exception test successful exception thrown fails different exception thrown This rule perform special magic make execution continue exception thrown So nearly always mistake test method statements one expected throw exception Instead specifying exception's type characterize expected exception based criteria <ul> The exception's message contains specific text link expectMessage String The exception's message complies Hamcrest matcher link expectMessage Matcher The exception's cause complies Hamcrest matcher link expectCause Matcher The exception complies Hamcrest matcher link expect Matcher <ul> You combine presented expectmethods The test successful specifications met Test throwsException thrownexpect NullPointerExceptionclass thrownexpectMessage &ampquothappened&ampquot throw new NullPointerException &ampquotWhat happened?&ampquot <h3>AssumptionViolatedExceptions<h3> JUnit uses link AssumptionViolatedException indicating test provides useful information See link orgjunitAssume information You call code assume methods set expectations code ExpectedException rule In case rule handle consume exceptions handled framework Eg following test ignored JUnit's default runner Test ignoredBecauseOfFailedAssumption assumeTrue false throws AssumptionViolatedException thrownexpect NullPointerExceptionclass <h3>AssertionErrors<h3> JUnit uses link AssertionError indicating test failing You call code assert methods set expectations code ExpectedException rule handled framework Eg following test fails code assertTrue statement Test throwsUnhandled assertTrue false throws AssertionError thrownexpect NullPointerExceptionclass <h3>Missing Exceptions<h3> By default missing exceptions reported error message like Expected test throw instance foo You configure different message means link reportMissingExceptionWithMessage String You use code placeholder description expected exception Eg Test throw fail error message Test throw instance foo since 47 The code ExpectedException rule allows you to verify that your code throw a specific exception Note that starting with Java 8 link orgjunitAssertassertThrows javalangClass orgjunitfunctionThrowingRunnable AssertassertThrows is often a better choice since it allows you to express exactly where you expect the exception to be thrown Use link orgjunitAssertexpectThrows javalangClass orgjunitfunctionThrowingRunnable expectThrows if you need to assert something about the thrown exception <h3>Usage<h3> public class SimpleExpectedExceptionTest Rule public ExpectedException thrown = ExpectedExceptionnone Test throwsNothing no exception expected none thrown pass Test throwsExceptionWithSpecificType thrownexpect NullPointerExceptionclass throw new NullPointerException You have to add the code ExpectedException rule to your test This doesn't affect your existing test see code throwsNothing After specifying the type of the expected exception your test is successful when such an exception is thrown and it fails if a different or no exception is thrown This rule doe not perform any special magic to make execution continue a if the exception had not been thrown So it is nearly always a mistake for a test method to have statement after the one that is expected to throw the exception Instead of specifying the exception's type you can characterize the expected exception based on other criterion too <ul> The exception's message contains a specific text link expectMessage String The exception's message complies with a Hamcrest matcher link expectMessage Matcher The exception's cause complies with a Hamcrest matcher link expectCause Matcher The exception itself complies with a Hamcrest matcher link expect Matcher <ul> You can combine any of the presented expectmethods The test is successful if all specification are met Test throwsException thrownexpect NullPointerExceptionclass thrownexpectMessage &ampquothappened&ampquot throw new NullPointerException &ampquotWhat happened?&ampquot <h3>AssumptionViolatedExceptions<h3> JUnit us link AssumptionViolatedException s for indicating that a test provides no useful information See link orgjunitAssume for more information You have to call code assume method before you set expectation of the code ExpectedException rule In this case the rule will not handle consume the exception and it can be handled by the framework Eg the following test is ignored by JUnit's default runner Test ignoredBecauseOfFailedAssumption assumeTrue false throw AssumptionViolatedException thrownexpect NullPointerExceptionclass <h3>AssertionErrors<h3> JUnit us link AssertionError s for indicating that a test is failing You have to call code assert method before you set expectation of the code ExpectedException rule if they should be handled by the framework Eg the following test fails because of the code assertTrue statement Test throwsUnhandled assertTrue false throw AssertionError thrownexpect NullPointerExceptionclass <h3>Missing Exceptions<h3> By default missing exception are reported with an error message like Expected test to throw an instance of foo You can configure a different message by mean of link reportMissingExceptionWithMessage String You can use a code s placeholder for the description of the expected exception Eg Test doesn't throw s will fail with the error message Test doesn't throw an instance of foo since 47,-1
5a941facb8a9f92136b6ca16,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/runner/RequestTest.java, 1320 A root of a link Description} produced by link Requestclasses(Class...} should be named classes,2.5,1,1320 root link Description produced link Requestclasses Class named classes 1320 root of a link Description produced by link Requestclasses Class should be named class,0
5a941facb8a9f92136b6ca17,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestSuite.java, A <code>TestSuite<code> is a <code>Composite<code> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero <pre> <p> Alternatively a TestSuite can extract the tests to be run automatically. To do so you pass the class of your TestCase class to the TestSuite constructor. <pre> TestSuite suite= new TestSuite(MathTest.class <pre> <p> This constructor creates a suite with all the methods starting with test that take no arguments. <p> A final option is to do the same for a large array of test classes. <pre> Class[] testClasses =  MathTest.class AnotherTest.class } TestSuite suite= new TestSuite(testClasses <pre> see Test,1.5,1,TestSuite Composite Tests It runs collection test cases Here example using dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively TestSuite extract tests run automatically To pass class TestCase class TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates suite methods starting test take arguments final option large array test classes Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test TestSuite is a Composite of Tests It run a collection of test case Here is an example using the dynamic test definition TestSuite suite= new TestSuite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero Alternatively a TestSuite can extract the test to be run automatically To do so you pas the class of your TestCase class to the TestSuite constructor TestSuite suite= new TestSuite MathTestclass This constructor creates a suite with all the method starting with test that take no argument final option is to do the same for a large array of test class Class testClasses = MathTestclass AnotherTestclass TestSuite suite= new TestSuite testClasses see Test,0
5a941facb8a9f92136b6ca18,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/Failure.java, A <code>Failure<code> holds a description of the failed test and the exception that was thrown while running it. In most cases the link org.junit.runner.Description} will be of a single test. However if problems are encountered while constructing the test (for example if a link org.junit.BeforeClass} method is not static it may describe something other than a single test. since 4.0,4.0,1,Failure holds description failed test exception thrown running In cases link orgjunitrunnerDescription single test However problems encountered constructing test example link orgjunitBeforeClass method static may describe something single test since 40 Failure hold a description of the failed test and the exception that wa thrown while running it In most case the link orgjunitrunnerDescription will be of a single test However if problem are encountered while constructing the test for example if a link orgjunitBeforeClass method is not static it may describe something other than a single test since 40,0
5a941facb8a9f92136b6ca19,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Description.java, A <code>Description<code> describes a test which is to be run or has been run. <code>Descriptions<code> can be atomic (a single test or compound (containing children tests. <code>Descriptions<code> are used to provide feedback about the tests that are about to run (for example the tree view visible in many IDEs or tests that have been run (for example the failures view. <p> <code>Descriptions<code> are implemented as a single class rather than a Composite because they are entirely informational. They contain no logic aside from counting their tests. <p> In the past we used the raw link junit.framework.TestCase}s and link junit.framework.TestSuite}s to display the tree of tests. This was no longer viable in JUnit 4 because atomic tests no longer have a superclass below link Object}. We needed a way to pass a class and name together. Description emerged from this. see org.junit.runner.Request see org.junit.runner.Runner since 4.0,2.0,1,Description describes test run run Descriptions atomic single test compound containing children tests Descriptions used provide feedback tests run example tree view visible many IDEs tests run example failures view Descriptions implemented single class rather Composite entirely informational They contain logic aside counting tests In past used raw link junitframeworkTestCase link junitframeworkTestSuite display tree tests This longer viable JUnit 4 atomic tests longer superclass link Object We needed way pass class name together Description emerged see orgjunitrunnerRequest see orgjunitrunnerRunner since 40 Description describes a test which is to be run or ha been run Descriptions can be atomic a single test or compound containing child test Descriptions are used to provide feedback about the test that are about to run for example the tree view visible in many IDEs or test that have been run for example the failure view Descriptions are implemented a a single class rather than a Composite because they are entirely informational They contain no logic aside from counting their test In the past we used the raw link junitframeworkTestCase s and link junitframeworkTestSuite s to display the tree of test This wa no longer viable in JUnit 4 because atomic test no longer have a superclass below link Object We needed a way to pas a class and name together Description emerged from this see orgjunitrunnerRequest see orgjunitrunnerRunner since 40,0
5a941facb8a9f92136b6ca1a,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunNotifier.java, If you write custom runners you may need to notify JUnit of your progress running tests. Do this by invoking the <code>RunNotifier<code> passed to your implementation of link org.junit.runner.Runnerrun(RunNotifier}. Future evolution of this class is likely to move link fireTestRunStarted(Description} and link fireTestRunFinished(Result} to a separate class since they should only be called once per run. since 4.0,4.5,1,If write custom runners may need notify JUnit progress running tests Do invoking RunNotifier passed implementation link orgjunitrunnerRunnerrun RunNotifier Future evolution class likely move link fireTestRunStarted Description link fireTestRunFinished Result separate class since called per run since 40 If you write custom runner you may need to notify JUnit of your progress running test Do this by invoking the RunNotifier passed to your implementation of link orgjunitrunnerRunnerrun RunNotifier Future evolution of this class is likely to move link fireTestRunStarted Description and link fireTestRunFinished Result to a separate class since they should only be called once per run since 40,0
5a941facb8a9f92136b6ca1b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/JUnitCommandLineParseResult.java, Exception used if there's a problem parsing the command line.,1.5,1,Exception used there's problem parsing command line Exception used if there's a problem parsing the command line,0
5a941facb8a9f92136b6ca1c,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/Timeout.java, The Timeout Rule applies the same timeout to all test methods in a class <pre> public static class HasGlobalLongTimeout &amp064Rule public Timeout globalTimeout = Timeout.millis(20 &amp064Test public void run1( throws InterruptedException Thread.sleep(100 } &amp064Test public void infiniteLoop( while (true } } } <pre> <p> Each test is run in a new thread. If the specified timeout elapses before the test completes its execution is interrupted via link Threadinterrupt(}. This happens in interruptable IO and locks and methods in link Object} and link Thread} throwing link InterruptedException}. <p> A specified timeout of 0 will be interpreted as not set however tests will still launch from separate threads. This can be useful for disabling timeouts in environments where they are dynamically set based on some property. since 4.7,4.5,1,The Timeout Rule applies timeout test methods class public static class HasGlobalLongTimeout Rule public Timeout globalTimeout = Timeoutmillis 20 Test run1 throws InterruptedException Threadsleep 100 Test infiniteLoop true Each test run new thread If specified timeout elapses test completes execution interrupted via link Threadinterrupt This happens interruptable IO locks methods link Object link Thread throwing link InterruptedException specified timeout 0 interpreted set however tests still launch separate threads This useful disabling timeouts environments dynamically set based property since 47 The Timeout Rule applies the same timeout to all test method in a class public static class HasGlobalLongTimeout Rule public Timeout globalTimeout = Timeoutmillis 20 Test run1 throw InterruptedException Threadsleep 100 Test infiniteLoop while true Each test is run in a new thread If the specified timeout elapses before the test completes it execution is interrupted via link Threadinterrupt This happens in interruptable IO and lock and method in link Object and link Thread throwing link InterruptedException specified timeout of 0 will be interpreted a not set however test will still launch from separate thread This can be useful for disabling timeouts in environment where they are dynamically set based on some property since 47,0
5a941facb8a9f92136b6ca1d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/manipulation/Sortable.java, Interface for runners that allow sorting of tests. By sorting tests based on when they last failed most recently failed first you can reduce the average time to the first test failing. Test sorting should not be used to cope with order dependencies between tests. Tests that are isolated from each other are less expensive to maintain and can be run individually. since 4.0,5.0,1,Interface runners allow sorting tests By sorting tests based last failed recently failed first reduce average time first test failing Test sorting used cope order dependencies tests Tests isolated less expensive maintain run individually since 40 Interface for runner that allow sorting of test By sorting test based on when they last failed most recently failed first you can reduce the average time to the first test failing Test sorting should not be used to cope with order dependency between test Tests that are isolated from each other are le expensive to maintain and can be run individually since 40,0
5a941facb8a9f92136b6ca1e,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/notification/RunListener.java, Register an instance of this class with link RunNotifier} to be notified of events that occur during a test run. All of the methods in this class are abstract and have no implementation override one or more methods to receive events. <p> For example suppose you have a <code>Cowbell<code> class that you want to make a noise whenever a test fails. You could write <pre> public class RingingListener extends RunListener public void testFailure(Failure failure Cowbell.ring( } } <pre> <p> To invoke your listener you need to run your tests through <code>JUnitCore<code>. <pre> public void main(String... args JUnitCore core= new JUnitCore( core.addListener(new RingingListener( core.run(MyTestClass.class } <pre> <p> If a listener throws an exception for a test event the other listeners will have their link RunListenertestFailure(Failure} called with a code Description} of link DescriptionTEST_MECHANISM} to indicate the failure. <p> By default JUnit will synchronize calls to your listener. If your listener is threadsafe and you want to allow JUnit to call your listener from multiple threads when tests are run in parallel you can annotate your test class with link RunListener.ThreadSafe}. <p> Listener methods will be called from the same thread as is running the test unless otherwise indicated by the method Javadoc see org.junit.runner.JUnitCore since 4.0,7.5,1,Register instance class link RunNotifier notified events occur test run All methods class abstract implementation override one methods receive events For example suppose Cowbell class want make noise whenever test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke listener need run tests JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass If listener throws exception test event listeners link RunListenertestFailure Failure called code Description link DescriptionTEST_MECHANISM indicate failure By default JUnit synchronize calls listener If listener threadsafe want allow JUnit call listener multiple threads tests run parallel annotate test class link RunListenerThreadSafe Listener methods called thread running test unless otherwise indicated method Javadoc see orgjunitrunnerJUnitCore since 40 Register an instance of this class with link RunNotifier to be notified of event that occur during a test run All of the method in this class are abstract and have no implementation override one or more method to receive event For example suppose you have a Cowbell class that you want to make a noise whenever a test fails You could write public class RingingListener extends RunListener testFailure Failure failure Cowbellring To invoke your listener you need to run your test through JUnitCore main String args JUnitCore core= new JUnitCore coreaddListener new RingingListener corerun MyTestClassclass If a listener throw an exception for a test event the other listener will have their link RunListenertestFailure Failure called with a code Description of link DescriptionTEST_MECHANISM to indicate the failure By default JUnit will synchronize call to your listener If your listener is threadsafe and you want to allow JUnit to call your listener from multiple thread when test are run in parallel you can annotate your test class with link RunListenerThreadSafe Listener method will be called from the same thread a is running the test unless otherwise indicated by the method Javadoc see orgjunitrunnerJUnitCore since 40,0
5a941facb8a9f92136b6ca1f,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java, Have to explicitly set run here because the runner might independently run OneTest above,2.6,1,Have explicitly set run runner might independently run OneTest Have to explicitly set run here because the runner might independently run OneTest above,0
5a941facb8a9f92136b6ca20,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/ErrorCollector.java, The ErrorCollector rule allows execution of a test to continue after the first problem is found (for example to collect _all_ the incorrect rows in a table and report them all at once <pre> public static class UsesErrorCollectorTwice &amp064Rule public ErrorCollector collector= new ErrorCollector( &amp064Test public void example( collector.addError(new Throwable(&ampquotfirst thing went wrong&ampquot collector.addError(new Throwable(&ampquotsecond thing went wrong&ampquot collector.checkThat(getResult( not(containsString(&ampquotERROR!&ampquot  all lines will run and then a combined failure logged at the end. } } <pre> since 4.7,4.0,1,The ErrorCollector rule allows execution test continue first problem found example collect _all_ incorrect rows table report public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult containsString &ampquotERROR!&ampquot lines run combined failure logged end since 47 The ErrorCollector rule allows execution of a test to continue after the first problem is found for example to collect _all_ the incorrect row in a table and report them all at once public static class UsesErrorCollectorTwice Rule public ErrorCollector collector= new ErrorCollector Test example collectoraddError new Throwable &ampquotfirst thing went wrong&ampquot collectoraddError new Throwable &ampquotsecond thing went wrong&ampquot collectorcheckThat getResult not containsString &ampquotERROR!&ampquot all line will run and then a combined failure logged at the end since 47,0
5a941facb8a9f92136b6ca21,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/tests/framework/SuiteTest.java, 1 public test case + 1 warning for the nonpublic test case,3.0,1,1 public test case + 1 warning nonpublic test case 1 public test case + 1 warning for the nonpublic test case,0
5a941facb8a9f92136b6ca22,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Test.java, The <code>Test<code> annotation tells JUnit that the <code>public void<code> method to which it is attached can be run as a test case. To run the method JUnit first constructs a fresh instance of the class then invokes the annotated method. Any exceptions thrown by the test will be reported by JUnit as a failure. If no exceptions are thrown the test is assumed to have succeeded. <p> A simple test looks like this <pre> public class Example <b>&amp064Test<b> public void method( org.junit.Assert.assertTrue( new ArrayList(.isEmpty(  } } <pre> <p> The <code>Test<code> annotation supports two optional parameters. The first <code>expected<code> declares that a test method should throw an exception. If it doesn't throw an exception or if it throws a different exception than the one declared the test fails. For example the following test succeeds <pre> &amp064Test(<b>expected=IndexOutOfBoundsException.class<b> public void outOfBounds( new ArrayList&ampltObject&ampgt(.get(1 } <pre> If the exception's message or one of its properties should be verified the link org.junit.rules.ExpectedException ExpectedException} rule can be used. Further information about exception testing can be found at the <a href=httpsgithub.comjunitteamjunit4wikiExceptiontesting>JUnit Wiki<a>. <p> The second optional parameter <code>timeout<code> causes a test to fail if it takes longer than a specified amount of clock time (measured in milliseconds. The following test fails <pre> &amp064Test(<b>timeout=100<b> public void infinity( while(true } <pre> <b>Warning<b> while <code>timeout<code> is useful to catch and terminate infinite loops it should not<em> be considered deterministic. The following test may or may not fail depending on how the operating system schedules threads <pre> &amp064Test(<b>timeout=100<b> public void sleep100( Thread.sleep(100 } <pre> <b>THREAD SAFETY WARNING<b> Test methods with a timeout parameter are run in a thread other than the thread which runs the fixture's Before and After methods. This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter. <b>Consider using the link org.junit.rules.Timeout} rule instead<b> which ensures a test method is run on the same thread as the fixture's Before and After methods. since 4.0,21.0,1,The Test annotation tells JUnit method attached run test case To run method JUnit first constructs fresh instance class invokes annotated method Any exceptions thrown test reported JUnit failure If exceptions thrown test assumed succeeded simple test looks like public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation supports two optional parameters The first expected declares test method throw exception If throw exception throws different exception one declared test fails For example following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 If exception's message one properties verified link orgjunitrulesExpectedException ExpectedException rule used Further information exception testing found <a href=httpsgithubcomjunitteamjunit4wikiExceptiontesting>JUnit Wiki<a> The second optional parameter timeout causes test fail takes longer specified amount clock time measured milliseconds The following test fails Test <b>timeout=100<b> infinity true <b>Warning<b> timeout useful catch terminate infinite loops considered deterministic The following test may may fail depending operating system schedules threads Test <b>timeout=100<b> sleep100 Threadsleep 100 <b>THREAD SAFETY WARNING<b> Test methods timeout parameter run thread thread runs fixture's Before After methods This may yield different behavior code thread safe compared test method without timeout parameter <b>Consider using link orgjunitrulesTimeout rule instead<b> ensures test method run thread fixture's Before After methods since 40 The Test annotation tell JUnit that the method to which it is attached can be run a a test case To run the method JUnit first construct a fresh instance of the class then invokes the annotated method Any exception thrown by the test will be reported by JUnit a a failure If no exception are thrown the test is assumed to have succeeded simple test look like this public class Example <b>Test<b> method orgjunitAssertassertTrue new ArrayList isEmpty The Test annotation support two optional parameter The first expected declares that a test method should throw an exception If it doesn't throw an exception or if it throw a different exception than the one declared the test fails For example the following test succeeds Test <b>expected=IndexOutOfBoundsExceptionclass<b> outOfBounds new ArrayList&ampltObject&ampgt get 1 If the exception's message or one of it property should be verified the link orgjunitrulesExpectedException ExpectedException rule can be used Further information about exception testing can be found at the <a href=httpsgithubcomjunitteamjunit4wikiExceptiontesting>JUnit Wiki<a> The second optional parameter timeout cause a test to fail if it take longer than a specified amount of clock time measured in millisecond The following test fails Test <b>timeout=100<b> infinity while true <b>Warning<b> while timeout is useful to catch and terminate infinite loop it should not be considered deterministic The following test may or may not fail depending on how the operating system schedule thread Test <b>timeout=100<b> sleep100 Threadsleep 100 <b>THREAD SAFETY WARNING<b> Test method with a timeout parameter are run in a thread other than the thread which run the fixture's Before and After method This may yield different behavior for code that is not thread safe when compared to the same test method without a timeout parameter <b>Consider using the link orgjunitrulesTimeout rule instead<b> which ensures a test method is run on the same thread a the fixture's Before and After method since 40,-1
5a941facb8a9f92136b6ca23,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/After.java, If you allocate external resources in a link org.junit.Before} method you need to release them after the test runs. Annotating a <code>public void<code> method with <code>&amp064After<code> causes that method to be run after the link org.junit.Test} method. All <code>&amp064After<code> methods are guaranteed to run even if a link org.junit.Before} or link org.junit.Test} method throws an exception. The <code>&amp064After<code> methods declared in superclasses will be run after those of the current class unless they are overridden in the current class. <p> Here is a simple example <pre> public class Example File output &amp064Before public void createOutputFile( output= new File(... } &amp064Test public void something( ... } &amp064After public void deleteOutputFile( output.delete( } } <pre> see org.junit.Before see org.junit.Test since 4.0,5.0,1,If allocate external resources link orgjunitBefore method need release test runs Annotating method After causes method run link orgjunitTest method All After methods guaranteed run even link orgjunitBefore link orgjunitTest method throws exception The After methods declared superclasses run current class unless overridden current class Here simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest since 40 If you allocate external resource in a link orgjunitBefore method you need to release them after the test run Annotating a method with After cause that method to be run after the link orgjunitTest method All After method are guaranteed to run even if a link orgjunitBefore or link orgjunitTest method throw an exception The After method declared in superclass will be run after those of the current class unless they are overridden in the current class Here is a simple example public class Example File output Before createOutputFile output= new File Test something After deleteOutputFile outputdelete see orgjunitBefore see orgjunitTest since 40,0
5a941facb8a9f92136b6ca24,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Request.java, Create a <code>Request<code> that when processed will run all the tests in a class. The odd name is necessary because <code>class<code> is a reserved word. param clazz the class containing the tests return a <code>Request<code> that will cause all tests in the class to be run,3.0,1,Create Request processed run tests class The odd name necessary class reserved word param clazz class containing tests return Request cause tests class run Create a Request that when processed will run all the test in a class The odd name is necessary because class is a reserved word param clazz the class containing the test return a Request that will cause all test in the class to be run,-1
5a941facb8a9f92136b6ca25,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/TestDecorator.java, A Decorator for Tests. Use TestDecorator as the base class for defining new test decorators. Test decorator subclasses can be introduced to add behaviour before or after a test is run.,2.0,1,Decorator Tests Use TestDecorator base class defining new test decorators Test decorator subclasses introduced add behaviour test run Decorator for Tests Use TestDecorator a the base class for defining new test decorator Test decorator subclass can be introduced to add behaviour before or after a test is run,0
5a941facb8a9f92136b6ca26,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java, Convenient base class for Matchers that require a nonnull value of a specific type. This simply implements the null check checks the type and then casts. author Joe Walnes deprecated Please use link org.hamcrest.TypeSafeMatcher}.,6.5,1,Convenient base class Matchers require nonnull value specific type This simply implements null check checks type casts author Joe Walnes deprecated Please use link orghamcrestTypeSafeMatcher Convenient base class for Matchers that require a nonnull value of a specific type This simply implement the null check check the type and then cast author Joe Walnes deprecated Please use link orghamcrestTypeSafeMatcher,0
5a941facb8a9f92136b6ca27,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/extensions/ActiveTestSuite.java, inlined due to limitation in VAJavaActiveTestSuite.super.runTest(test result,2.0,1,inlined due limitation VAJavaActiveTestSuitesuperrunTest test result inlined due to limitation in VAJavaActiveTestSuitesuperrunTest test result,0
5a941facb8a9f92136b6ca28,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/internal/Assignments.java, A potentially incomplete list of value assignments for a method's formal parameters,2.5,1,potentially incomplete list value assignments method's formal parameters potentially incomplete list of value assignment for a method's formal parameter,0
5a941facb8a9f92136b6ca29,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java, Creates an instance wrapping the given statement with the given timeout in milliseconds. param statement the statement to wrap param timeoutMillis the timeout in milliseconds deprecated use link builder(} instead.,3.5,1,Creates instance wrapping given statement given timeout milliseconds param statement statement wrap param timeoutMillis timeout milliseconds deprecated use link builder instead Creates an instance wrapping the given statement with the given timeout in millisecond param statement the statement to wrap param timeoutMillis the timeout in millisecond deprecated use link builder instead,0
5a941facb8a9f92136b6ca2a,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java, Simple class that SHOULD fail because no parameters are met.,3.0,1,Simple class SHOULD fail parameters met Simple class that SHOULD fail because no parameter are met,0
5a941facb8a9f92136b6ca2b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/rules/RuleMemberValidator.java, Requires the validated member to be nonstatic,3.0,1,Requires validated member nonstatic Requires the validated member to be nonstatic,0
5a941facb8a9f92136b6ca2c,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/builders/AnnotatedBuilder.java, The code AnnotatedBuilder} is a strategy for constructing runners for test class that have been annotated with the code RunWith} annotation. All tests within this class will be executed using the runner that was specified within the annotation. <p> If a runner supports inner member classes the member classes will inherit the runner from the enclosing class e.g. <pre> &amp064RunWith(MyRunner.class public class MyTest  some tests might go here public class MyMemberClass &amp064Test public void thisTestRunsWith_MyRunner(  some test logic }  some more tests might go here } &amp064RunWith(AnotherRunner.class public class AnotherMemberClass  some tests might go here public class DeepInnerClass &amp064Test public void thisTestRunsWith_AnotherRunner(  some test logic } } public class DeepInheritedClass extends SuperTest &amp064Test public void thisTestRunsWith_SuperRunner(  some test logic } } } } &amp064RunWith(SuperRunner.class public class SuperTest  some tests might go here } <pre> The key points to note here are <ul> <li>If there is no RunWith annotation no runner will be created.<li> <li>The resolve step is insideout e.g. the closest RunWith annotation wins<li> <li>RunWith annotations are inherited and work as if the class was annotated itself.<li> <li>The default JUnit runner does not support inner member classes so this is only valid for custom runners that support inner member classes.<li> <li>Custom runners with support for inner classes may or may not support RunWith annotations for member classes. Please refer to the custom runner documentation.<li> <ul> see org.junit.runners.model.RunnerBuilder see org.junit.runner.RunWith since 4.0,6.25,1,The code AnnotatedBuilder strategy constructing runners test class annotated code RunWith annotation All tests within class executed using runner specified within annotation If runner supports inner member classes member classes inherit runner enclosing class eg RunWith MyRunnerclass public class MyTest tests might go public class MyMemberClass Test thisTestRunsWith_MyRunner test logic tests might go RunWith AnotherRunnerclass public class AnotherMemberClass tests might go public class DeepInnerClass Test thisTestRunsWith_AnotherRunner test logic public class DeepInheritedClass extends SuperTest Test thisTestRunsWith_SuperRunner test logic RunWith SuperRunnerclass public class SuperTest tests might go The key points note <ul> If RunWith annotation runner created The resolve step insideout eg closest RunWith annotation wins RunWith annotations inherited work class annotated The default JUnit runner support inner member classes valid custom runners support inner member classes Custom runners support inner classes may may support RunWith annotations member classes Please refer custom runner documentation <ul> see orgjunitrunnersmodelRunnerBuilder see orgjunitrunnerRunWith since 40 The code AnnotatedBuilder is a strategy for constructing runner for test class that have been annotated with the code RunWith annotation All test within this class will be executed using the runner that wa specified within the annotation If a runner support inner member class the member class will inherit the runner from the enclosing class eg RunWith MyRunnerclass public class MyTest some test might go here public class MyMemberClass Test thisTestRunsWith_MyRunner some test logic some more test might go here RunWith AnotherRunnerclass public class AnotherMemberClass some test might go here public class DeepInnerClass Test thisTestRunsWith_AnotherRunner some test logic public class DeepInheritedClass extends SuperTest Test thisTestRunsWith_SuperRunner some test logic RunWith SuperRunnerclass public class SuperTest some test might go here The key point to note here are <ul> If there is no RunWith annotation no runner will be created The resolve step is insideout eg the closest RunWith annotation win RunWith annotation are inherited and work a if the class wa annotated itself The default JUnit runner doe not support inner member class so this is only valid for custom runner that support inner member class Custom runner with support for inner class may or may not support RunWith annotation for member class Please refer to the custom runner documentation <ul> see orgjunitrunnersmodelRunnerBuilder see orgjunitrunnerRunWith since 40,1
5a941facb8a9f92136b6ca2d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/DisableOnDebug.java, The code DisableOnDebug} Rule allows you to label certain rules to be disabled when debugging. <p> The most illustrative use case is for tests that make use of the link Timeout} rule when ran in debug mode the test may terminate on timeout abruptly during debugging. Developers may disable the timeout or increase the timeout by making a code change on tests that need debugging and remember revert the change afterwards or rules such as link Timeout} that may be disabled during debugging may be wrapped in a code DisableOnDebug}. <p> The important benefit of this feature is that you can disable such rules without any making any modifications to your test class to remove them during debugging. <p> This does nothing to tackle timeouts or time sensitive code under test when debugging and may make this less useful in such circumstances. <p> Example usage <pre> public static class DisableTimeoutOnDebugSampleTest &amp064Rule public TestRule timeout = new DisableOnDebug(new Timeout(20 &amp064Test public void myTest( int i = 0 assertEquals(0 i  suppose you had a break point here to inspect i } } <pre> since 4.12,4.0,1,The code DisableOnDebug Rule allows label certain rules disabled debugging The illustrative use case tests make use link Timeout rule ran debug mode test may terminate timeout abruptly debugging Developers may disable timeout increase timeout making code change tests need debugging remember revert change afterwards rules link Timeout may disabled debugging may wrapped code DisableOnDebug The important benefit feature disable rules without making modifications test class remove debugging This nothing tackle timeouts time sensitive code test debugging may make less useful circumstances Example usage public static class DisableTimeoutOnDebugSampleTest Rule public TestRule timeout = new DisableOnDebug new Timeout 20 Test myTest int = 0 assertEquals 0 suppose break point inspect since 412 The code DisableOnDebug Rule allows you to label certain rule to be disabled when debugging The most illustrative use case is for test that make use of the link Timeout rule when ran in debug mode the test may terminate on timeout abruptly during debugging Developers may disable the timeout or increase the timeout by making a code change on test that need debugging and remember revert the change afterwards or rule such a link Timeout that may be disabled during debugging may be wrapped in a code DisableOnDebug The important benefit of this feature is that you can disable such rule without any making any modification to your test class to remove them during debugging This doe nothing to tackle timeouts or time sensitive code under test when debugging and may make this le useful in such circumstance Example usage public static class DisableTimeoutOnDebugSampleTest Rule public TestRule timeout = new DisableOnDebug new Timeout 20 Test myTest int i = 0 assertEquals 0 i suppose you had a break point here to inspect i since 412,1
5a941facb8a9f92136b6ca2e,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/Money.java,this makes no sense void appendTo(MoneyBag m,3.0,1,makes sense void appendTo MoneyBag this make no sense void appendTo MoneyBag m,0
5a941facb8a9f92136b6ca2f,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/MethodRulesTest.java, If there are multiple public methods annotated with Rule returning a link MethodRule} then all the rules returned should be run. <p>This case has been added with <a href=httpsgithub.comjunitteamjunit4issues589>Issue 589<a>  Support Rule for methods works only for TestRule but not for MethodRule,2.5,1,If multiple public methods annotated Rule returning link MethodRule rules returned run This case added <a href=httpsgithubcomjunitteamjunit4issues589>Issue 589<a> Support Rule methods works TestRule MethodRule If there are multiple public method annotated with Rule returning a link MethodRule then all the rule returned should be run This case ha been added with <a href=httpsgithubcomjunitteamjunit4issues589>Issue 589<a> Support Rule for method work only for TestRule but not for MethodRule,0
5a941facb8a9f92136b6ca30,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/BeforeClass.java, Sometimes several tests need to share computationally expensive setup (like logging into a database. While this can compromise the independence of tests sometimes it is a necessary optimization. Annotating a <code>public static void<code> noarg method with <code>BeforeClass<code> causes it to be run once before any of the test methods in the class. The <code>BeforeClass<code> methods of superclasses will be run before those of the current class unless they are shadowed in the current class. <p> For example <pre> public class Example &amp064BeforeClass public static void onlyOnce( ... } &amp064Test public void one( ... } &amp064Test public void two( ... } } <pre> see org.junit.AfterClass since 4.0,9.5,1,Sometimes several tests need share computationally expensive setup like logging database While compromise independence tests sometimes necessary optimization Annotating public static void noarg method BeforeClass causes run test methods class The BeforeClass methods superclasses run current class unless shadowed current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass since 40 Sometimes several test need to share computationally expensive setup like logging into a database While this can compromise the independence of test sometimes it is a necessary optimization Annotating a public static void noarg method with BeforeClass cause it to be run once before any of the test method in the class The BeforeClass method of superclass will be run before those of the current class unless they are shadowed in the current class For example public class Example BeforeClass public static void onlyOnce Test one Test two see orgjunitAfterClass since 40,0
5a941facb8a9f92136b6ca31,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/running/core/SystemExitTest.java, Make sure System.exit works as expected. We've had problems with this on some platforms.,1.5,1,Make sure Systemexit works expected We've problems platforms Make sure Systemexit work a expected We've had problem with this on some platform,0
5a941facb8a9f92136b6ca32,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxCore.java, Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally(,3.5,1,Create new MaxCore serialized file stored storedResults deprecated use storedLocally Create a new MaxCore from a serialized file stored at storedResults deprecated use storedLocally,0
5a941facb8a9f92136b6ca33,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/runners/Enclosed.java, If you put tests in inner classes Ant for example won't find them. By running the outer class with Enclosed the tests in the inner classes will be run. You might put tests in inner classes to group them for convenience or to share constants. Abstract inner classes are ignored. <p> So for example <pre> &amp064RunWith(Enclosed.class public class ListTests ...useful shared stuff... public static class OneKindOfListTest ...} public static class AnotherKind ...} abstract public static class Ignored ...} } <pre>,2.5,1,If put tests inner classes Ant example find By running outer class Enclosed tests inner classes run You might put tests inner classes group convenience share constants Abstract inner classes ignored So example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind abstract public static class Ignored If you put test in inner class Ant for example won't find them By running the outer class with Enclosed the test in the inner class will be run You might put test in inner class to group them for convenience or to share constant Abstract inner class are ignored So for example RunWith Enclosedclass public class ListTests useful shared stuff public static class OneKindOfListTest public static class AnotherKind abstract public static class Ignored,0
5a941facb8a9f92136b6ca34,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestCase.java, A test case defines the fixture to run multiple tests. To define a test case<br> <ol> <li>implement a subclass of <code>TestCase<code><li> <li>define instance variables that store the state of the fixture<li> <li>initialize the fixture state by overriding link setUp(}<li> <li>cleanup after a test by overriding link tearDown(}.<li> <ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example <pre> public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp( fValue1= 2.0 fValue2= 3.0 } } <pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling link junit.framework.AssertassertTrue(String boolean} with a boolean. <pre> public void testAdd( double result= fValue1 + fValue2 assertTrue(result == 5.0 } <pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest(add public void runTest( testAdd( } } test.run( <pre> The dynamic way uses reflection to implement link runTest(}. It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest(testAdd test.run( <pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i>test runners<i> which can run a test suite and collect the results. A test runner either expects a static method <code>suite<code> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite( suite.addTest(new MathTest(testAdd suite.addTest(new MathTest(testDivideByZero return suite } <pre> see TestResult see TestSuite,4.0,1,test case defines fixture run multiple tests To define test case implement subclass TestCase define instance variables store state fixture initialize fixture state overriding link setUp cleanup test overriding link tearDown Each test runs fixture side effects among test runs Here example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For test implement method interacts fixture Verify expected results assertions specified calling link junitframeworkAssertassertTrue String boolean boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once methods defined run The framework supports static type safe dynamic way run test In static way override runTest method define method invoked convenient way anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way uses reflection implement link runTest It dynamically finds invokes method In case name test case correspond test method run TestCase test= new MathTest testAdd testrun The tests run collected TestSuite JUnit provides different test runners run test suite collect results test runner either expects static method suite entry point get test run extract suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite test case defines the fixture to run multiple test To define a test case implement a subclass of TestCase define instance variable that store the state of the fixture initialize the fixture state by overriding link setUp cleanup after a test by overriding link tearDown Each test run in it own fixture so there can be no side effect among test run Here is an example public class MathTest extends TestCase protected double fValue1 protected double fValue2 protected void setUp fValue1= 20 fValue2= 30 For each test implement a method which interacts with the fixture Verify the expected result with assertion specified by calling link junitframeworkAssertassertTrue String boolean with a boolean testAdd double result= fValue1 + fValue2 assertTrue result == 50 Once the method are defined you can run them The framework support both a static type safe and more dynamic way to run a test In the static way you override the runTest method and define the method to be invoked convenient way to do so is with an anonymous inner class TestCase test= new MathTest add runTest testAdd testrun The dynamic way us reflection to implement link runTest It dynamically find and invokes a method In this case the name of the test case ha to correspond to the test method to be run TestCase test= new MathTest testAdd testrun The test to be run can be collected into a TestSuite JUnit provides different test runner which can run a test suite and collect the result test runner either expects a static method suite a the entry point to get a test to run or it will extract the suite automatically public static Test suite suiteaddTest new MathTest testAdd suiteaddTest new MathTest testDivideByZero return suite see TestResult see TestSuite,0
5a941facb8a9f92136b6ca35,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/textui/TestRunner.java, A command line based tool to run tests. <pre> java junit.textui.TestRunner [wait] TestCaseClass <pre> <p> TestRunner expects the name of a TestCase class as argument. If this class defines a static <code>suite<code> method it will be invoked and the returned test is run. Otherwise all the methods starting with test having no arguments are run. <p> When the wait command line argument is given TestRunner waits until the users types RETURN. <p> TestRunner prints a trace as the tests are executed followed by a summary at the end.,2.5,1,command line based tool run tests java junittextuiTestRunner wait TestCaseClass TestRunner expects name TestCase class argument If class defines static suite method invoked returned test run Otherwise methods starting test arguments run When wait command line argument given TestRunner waits users types RETURN TestRunner prints trace tests executed followed summary end command line based tool to run test java junittextuiTestRunner wait TestCaseClass TestRunner expects the name of a TestCase class a argument If this class defines a static suite method it will be invoked and the returned test is run Otherwise all the method starting with test having no argument are run When the wait command line argument is given TestRunner wait until the user type RETURN TestRunner print a trace a the test are executed followed by a summary at the end,0
5a941facb8a9f92136b6ca36,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/CategoryValidator.java, Validates that there are no errors in the use of the code Category} annotation. If there is a code Throwable} object will be added to the list of errors. since 4.12,2.5,1,Validates errors use code Category annotation If code Throwable object added list errors since 412 Validates that there are no error in the use of the code Category annotation If there is a code Throwable object will be added to the list of error since 412,0
5a941facb8a9f92136b6ca37,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/TestCouldNotBeSkippedException.java, Indicates that a test that indicated that it should be skipped could not be skipped. This can be thrown if a test uses the methods in link Assume} to indicate that it should be skipped but before processing of the test was completed other failures occured. see org.junit.Assume since 4.13,7.0,1,Indicates test indicated skipped could skipped This thrown test uses methods link Assume indicate skipped processing test completed failures occured see orgjunitAssume since 413 Indicates that a test that indicated that it should be skipped could not be skipped This can be thrown if a test us the method in link Assume to indicate that it should be skipped but before processing of the test wa completed other failure occured see orgjunitAssume since 413,0
5a941facb8a9f92136b6ca38,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/TestListener.java, An error occurred.,3.0,1,An error occurred An error occurred,0
5a941facb8a9f92136b6ca39,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/experimental/theories/runner/TheoriesPerformanceTest.java, Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly.,2.0,1,Likewise TestClass must passed AllMembersSupplier annotation parsing costly Likewise the TestClass must be passed into AllMembersSupplier or the annotation parsing is again costly,0
5a941facb8a9f92136b6ca3a,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/ParentRunner.java, Provides most of the functionality specific to a Runner that implements a parent node in the test tree with children defined by objects of some data type code T}. (For link BlockJUnit4ClassRunner} code T} is link Method} . For link Suite} code T} is link Class}. Subclasses must implement finding the children of the node describing each child and running each child. ParentRunner will filter and sort children handle code BeforeClass} and code AfterClass} methods handle annotated link ClassRule}s create a composite link Description} and run children sequentially. since 4.5,0.0,1,Provides functionality specific Runner implements parent node test tree children defined objects data type code T For link BlockJUnit4ClassRunner code T link Method For link Suite code T link Class Subclasses must implement finding children node describing child running child ParentRunner filter sort children handle code BeforeClass code AfterClass methods handle annotated link ClassRule create composite link Description run children sequentially since 45 Provides most of the functionality specific to a Runner that implement a parent node in the test tree with child defined by object of some data type code T For link BlockJUnit4ClassRunner code T is link Method For link Suite code T is link Class Subclasses must implement finding the child of the node describing each child and running each child ParentRunner will filter and sort child handle code BeforeClass and code AfterClass method handle annotated link ClassRule s create a composite link Description and run child sequentially since 45,0
5a941facb8a9f92136b6ca3b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Assert.java, A set of assertion methods useful for writing tests. Only failed assertions are recorded. These methods can be used directly <code>Assert.assertEquals(...<code> however they read better if they are referenced through static import <pre> import static org.junit.Assert. ... assertEquals(... <pre> see AssertionError since 4.0,2.0,1,set assertion methods useful writing tests Only failed assertions recorded These methods used directly AssertassertEquals however read better referenced static import import static orgjunitAssert assertEquals see AssertionError since 40 set of assertion method useful for writing test Only failed assertion are recorded These method can be used directly AssertassertEquals however they read better if they are referenced through static import import static orgjunitAssert assertEquals see AssertionError since 40,0
5a941facb8a9f92136b6ca3c,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/Parameterized.java, The custom runner <code>Parameterized<code> implements parameterized tests. When running a parameterized test class instances are created for the crossproduct of the test methods and the test data elements. <p> For example to test the <code>+<code> operator write <pre> &amp064RunWith(Parameterized.class public class AdditionTest &amp064Parameters(name = &ampquotindex} 0} + 1} = 2}&ampquot public static Iterable&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]   0 0 0 }  1 1 2 }  3 2 5 }  4 3 7 } } } private int firstSummand private int secondSummand private int sum public AdditionTest(int firstSummand int secondSummand int sum this.firstSummand = firstSummand this.secondSummand = secondSummand this.sum = sum } &amp064Test public void test( assertEquals(sum firstSummand + secondSummand } } <pre> <p> Each instance of <code>AdditionTest<code> will be constructed using the threeargument constructor and the data values in the <code>&amp064Parameters<code> method. <p> In order that you can easily identify the individual tests you may provide a name for the <code>&amp064Parameters<code> annotation. This name is allowed to contain placeholders which are replaced at runtime. The placeholders are <dl> <dt>index}<dt> <dd>the current parameter index<dd> <dt>0}<dt> <dd>the first parameter value<dd> <dt>1}<dt> <dd>the second parameter value<dd> <dt>...<dt> <dd>...<dd> <dl> <p> In the example given above the <code>Parameterized<code> runner creates names like <code>[2 3 + 2 = 5]<code>. If you don't use the name parameter then the current parameter index is used as name. <p> You can also write <pre> &amp064RunWith(Parameterized.class public class AdditionTest &amp064Parameters(name = &ampquotindex} 0} + 1} = 2}&ampquot public static Iterable&ampltObject[]&ampgt data( return Arrays.asList(new Object[][]   0 0 0 }  1 1 2 }  3 2 5 }  4 3 7 } } } &amp064Parameter(0 public int firstSummand &amp064Parameter(1 public int secondSummand &amp064Parameter(2 public int sum &amp064Test public void test( assertEquals(sum firstSummand + secondSummand } } <pre> <p> Each instance of <code>AdditionTest<code> will be constructed with the default constructor and fields annotated by <code>&amp064Parameter<code> will be initialized with the data values in the <code>&amp064Parameters<code> method. <p> The parameters can be provided as an array too <pre> &amp064Parameters public static Object[][] data( return new Object[][]   0 0 0 }  1 1 2 }  3 2 5 }  4 3 7 } } } } <pre> <h3>Tests with single parameter<h3> <p> If your test needs a single parameter only you don't have to wrap it with an array. Instead you can provide an <code>Iterable<code> or an array of objects. <pre> &amp064Parameters public static Iterable&amplt? extends Object&ampgt data( return Arrays.asList(&ampquotfirst test&ampquot &ampquotsecond test&ampquot } <pre> <p> or <pre> &amp064Parameters public static Object[] data( return new Object[]  &ampquotfirst test&ampquot &ampquotsecond test&ampquot } } <pre> <h3>Executing code beforeafter executing tests for specific parameters<h3> <p> If your test needs to perform some preparation or cleanup based on the parameters this can be done by adding public static methods annotated with code BeforeParam}code AfterParam}. Such methods should either have no parameters or the same parameters as the test. <pre> &amp064BeforeParam public static void beforeTestsForParameter(String onlyParameter System.out.println(Testing  + onlyParameter } <pre> <h3>Create different runners<h3> <p> By default the code Parameterized} runner creates a slightly modified link BlockJUnit4ClassRunner} for each set of parameters. You can build an own code Parameterized} runner that creates another runner for each set of parameters. Therefore you have to build a link ParametersRunnerFactory} that creates a runner for each link TestWithParameters}. ( code TestWithParameters} are bundling the parameters and the test name. The factory must have a public zeroarg constructor. <pre> public class YourRunnerFactory implements ParametersRunnerFactory public Runner createRunnerForTestWithParameters(TestWithParameters test throws InitializationError return YourRunner(test } } <pre> <p> Use the link UseParametersRunnerFactory} to tell the code Parameterized} runner that it should use your factory. <pre> &amp064RunWith(Parameterized.class &amp064UseParametersRunnerFactory(YourRunnerFactory.class public class YourTest ... } <pre> since 4.0,24.2,1,The custom runner Parameterized implements parameterized tests When running parameterized test class instances created crossproduct test methods test data elements For example test + operator write RunWith Parameterizedclass public class AdditionTest Parameters name = &ampquotindex 0 + 1 = 2 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 0 1 1 2 3 2 5 4 3 7 private int firstSummand private int secondSummand private int sum public AdditionTest int firstSummand int secondSummand int sum thisfirstSummand = firstSummand thissecondSummand = secondSummand thissum = sum Test test assertEquals sum firstSummand + secondSummand Each instance AdditionTest constructed using threeargument constructor data values Parameters method In order easily identify individual tests may provide name Parameters annotation This name allowed contain placeholders replaced runtime The placeholders <dl> <dt>index <dt> <dd>the current parameter index<dd> <dt>0 <dt> <dd>the first parameter value<dd> <dt>1 <dt> <dd>the second parameter value<dd> <dt><dt> <dd><dd> <dl> In example given Parameterized runner creates names like 2 3 + 2 = 5 If use name parameter current parameter index used name You also write RunWith Parameterizedclass public class AdditionTest Parameters name = &ampquotindex 0 + 1 = 2 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 0 1 1 2 3 2 5 4 3 7 Parameter 0 public int firstSummand Parameter 1 public int secondSummand Parameter 2 public int sum Test test assertEquals sum firstSummand + secondSummand Each instance AdditionTest constructed default constructor fields annotated Parameter initialized data values Parameters method The parameters provided array Parameters public static Object data return new Object 0 0 0 1 1 2 3 2 5 4 3 7 <h3>Tests single parameter<h3> If test needs single parameter wrap array Instead provide Iterable array objects Parameters public static Iterable&amplt? extends Object&ampgt data return ArraysasList &ampquotfirst test&ampquot &ampquotsecond test&ampquot Parameters public static Object data return new Object &ampquotfirst test&ampquot &ampquotsecond test&ampquot <h3>Executing code beforeafter executing tests specific parameters<h3> If test needs perform preparation cleanup based parameters done adding public static methods annotated code BeforeParam code AfterParam Such methods either parameters parameters test BeforeParam public static void beforeTestsForParameter String onlyParameter Systemoutprintln Testing + onlyParameter <h3>Create different runners<h3> By default code Parameterized runner creates slightly modified link BlockJUnit4ClassRunner set parameters You build code Parameterized runner creates another runner set parameters Therefore build link ParametersRunnerFactory creates runner link TestWithParameters code TestWithParameters bundling parameters test name The factory must public zeroarg constructor public class YourRunnerFactory implements ParametersRunnerFactory public Runner createRunnerForTestWithParameters TestWithParameters test throws InitializationError return YourRunner test Use link UseParametersRunnerFactory tell code Parameterized runner use factory RunWith Parameterizedclass UseParametersRunnerFactory YourRunnerFactoryclass public class YourTest since 40 The custom runner Parameterized implement parameterized test When running a parameterized test class instance are created for the crossproduct of the test method and the test data element For example to test the + operator write RunWith Parameterizedclass public class AdditionTest Parameters name = &ampquotindex 0 + 1 = 2 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 0 1 1 2 3 2 5 4 3 7 private int firstSummand private int secondSummand private int sum public AdditionTest int firstSummand int secondSummand int sum thisfirstSummand = firstSummand thissecondSummand = secondSummand thissum = sum Test test assertEquals sum firstSummand + secondSummand Each instance of AdditionTest will be constructed using the threeargument constructor and the data value in the Parameters method In order that you can easily identify the individual test you may provide a name for the Parameters annotation This name is allowed to contain placeholder which are replaced at runtime The placeholder are <dl> <dt>index <dt> <dd>the current parameter index<dd> <dt>0 <dt> <dd>the first parameter value<dd> <dt>1 <dt> <dd>the second parameter value<dd> <dt><dt> <dd><dd> <dl> In the example given above the Parameterized runner creates name like 2 3 + 2 = 5 If you don't use the name parameter then the current parameter index is used a name You can also write RunWith Parameterizedclass public class AdditionTest Parameters name = &ampquotindex 0 + 1 = 2 &ampquot public static Iterable&ampltObject &ampgt data return ArraysasList new Object 0 0 0 1 1 2 3 2 5 4 3 7 Parameter 0 public int firstSummand Parameter 1 public int secondSummand Parameter 2 public int sum Test test assertEquals sum firstSummand + secondSummand Each instance of AdditionTest will be constructed with the default constructor and field annotated by Parameter will be initialized with the data value in the Parameters method The parameter can be provided a an array too Parameters public static Object data return new Object 0 0 0 1 1 2 3 2 5 4 3 7 <h3>Tests with single parameter<h3> If your test need a single parameter only you don't have to wrap it with an array Instead you can provide an Iterable or an array of object Parameters public static Iterable&amplt? extends Object&ampgt data return ArraysasList &ampquotfirst test&ampquot &ampquotsecond test&ampquot or Parameters public static Object data return new Object &ampquotfirst test&ampquot &ampquotsecond test&ampquot <h3>Executing code beforeafter executing test for specific parameters<h3> If your test need to perform some preparation or cleanup based on the parameter this can be done by adding public static method annotated with code BeforeParam code AfterParam Such method should either have no parameter or the same parameter a the test BeforeParam public static void beforeTestsForParameter String onlyParameter Systemoutprintln Testing + onlyParameter <h3>Create different runners<h3> By default the code Parameterized runner creates a slightly modified link BlockJUnit4ClassRunner for each set of parameter You can build an own code Parameterized runner that creates another runner for each set of parameter Therefore you have to build a link ParametersRunnerFactory that creates a runner for each link TestWithParameters code TestWithParameters are bundling the parameter and the test name The factory must have a public zeroarg constructor public class YourRunnerFactory implement ParametersRunnerFactory public Runner createRunnerForTestWithParameters TestWithParameters test throw InitializationError return YourRunner test Use the link UseParametersRunnerFactory to tell the code Parameterized runner that it should use your factory RunWith Parameterizedclass UseParametersRunnerFactory YourRunnerFactoryclass public class YourTest since 40,0
5a941facb8a9f92136b6ca3d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkMethod.java, We need to return the previouslyencountered bridge method because JUnit won't be able to call the parent method because the parent class isn't public.,2.5,1,We need return previouslyencountered bridge method JUnit able call parent method parent class public We need to return the previouslyencountered bridge method because JUnit won't be able to call the parent method because the parent class isn't public,0
5a941facb8a9f92136b6ca3e,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/RuleChain.java, The RuleChain rule allows ordering of TestRules. You create a code RuleChain} with link outerRule(TestRule} and subsequent calls of link around(TestRule} <pre> public class UseRuleChain &amp064Rule public RuleChain chain= RuleChain .outerRule(new LoggingRule(outer rule .around(new LoggingRule(middle rule .around(new LoggingRule(inner rule &amp064Test public void example( assertTrue(true } } <pre> writes the log <pre> starting outer rule starting middle rule starting inner rule finished inner rule finished middle rule finished outer rule <pre> code RuleChain} cannot be used to define the order of existing rules. For example in the below snippet the LoggingRule code middle} would be executed outside as well as inside the code RuleChain} <pre> &amp064Rule public LoggingRule middle = new LoggingRule(middle rule &amp064Rule public RuleChain chain = RuleChain .outerRule(new LoggingRule(outer rule .around(middle .around(new LoggingRule(inner rule <pre> since 4.10,2.0,1,The RuleChain rule allows ordering TestRules You create code RuleChain link outerRule TestRule subsequent calls link around TestRule public class UseRuleChain Rule public RuleChain chain= RuleChain outerRule new LoggingRule outer rule around new LoggingRule middle rule around new LoggingRule inner rule Test example assertTrue true writes log starting outer rule starting middle rule starting inner rule finished inner rule finished middle rule finished outer rule code RuleChain cannot used define order existing rules For example snippet LoggingRule code middle would executed outside well inside code RuleChain Rule public LoggingRule middle = new LoggingRule middle rule Rule public RuleChain chain = RuleChain outerRule new LoggingRule outer rule around middle around new LoggingRule inner rule since 410 The RuleChain rule allows ordering of TestRules You create a code RuleChain with link outerRule TestRule and subsequent call of link around TestRule public class UseRuleChain Rule public RuleChain chain= RuleChain outerRule new LoggingRule outer rule around new LoggingRule middle rule around new LoggingRule inner rule Test example assertTrue true writes the log starting outer rule starting middle rule starting inner rule finished inner rule finished middle rule finished outer rule code RuleChain cannot be used to define the order of existing rule For example in the below snippet the LoggingRule code middle would be executed outside a well a inside the code RuleChain Rule public LoggingRule middle = new LoggingRule middle rule Rule public RuleChain chain = RuleChain outerRule new LoggingRule outer rule around middle around new LoggingRule inner rule since 410,0
5a941facb8a9f92136b6ca3f,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/management/ReflectiveRuntimeMXBean.java, do nothing input arguments will be null on failure,2.5,1,nothing input arguments null failure do nothing input argument will be null on failure,0
5a941facb8a9f92136b6ca40,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/rules/MethodRule.java, A MethodRule is an alteration in how a test method is run and reported. Multiple link MethodRule}s can be applied to a test method. The link Statement} that executes the method is passed to each annotated link Rule} in turn and each may return a substitute or modified link Statement} which is passed to the next link Rule} if any. For an example of how this can be useful see link TestWatchman}. <p>Note that link MethodRule} has been replaced by link TestRule} which has the added benefit of supporting class rules. since 4.7,7.0,1,MethodRule alteration test method run reported Multiple link MethodRule applied test method The link Statement executes method passed annotated link Rule turn may return substitute modified link Statement passed next link Rule For example useful see link TestWatchman Note link MethodRule replaced link TestRule added benefit supporting class rules since 47 MethodRule is an alteration in how a test method is run and reported Multiple link MethodRule s can be applied to a test method The link Statement that executes the method is passed to each annotated link Rule in turn and each may return a substitute or modified link Statement which is passed to the next link Rule if any For an example of how this can be useful see link TestWatchman Note that link MethodRule ha been replaced by link TestRule which ha the added benefit of supporting class rule since 47,1
5a941facb8a9f92136b6ca41,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/TestClass.java, Creates a code TestClass} wrapping code clazz}. Each time this constructor executes the class is scanned for annotations which can be an expensive process (we hope in future JDK's it will not be. Therefore try to share instances of code TestClass} where possible.,7.5,1,Creates code TestClass wrapping code clazz Each time constructor executes class scanned annotations expensive process hope future JDK's Therefore try share instances code TestClass possible Creates a code TestClass wrapping code clazz Each time this constructor executes the class is scanned for annotation which can be an expensive process we hope in future JDK's it will not be Therefore try to share instance of code TestClass where possible,0
5a941facb8a9f92136b6ca42,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/junit/framework/Protectable.java, A Protectable<em> can be run and can throw a Throwable. see TestResult,2.0,1,Protectable run throw Throwable see TestResult Protectable can be run and can throw a Throwable see TestResult,0
5a941facb8a9f92136b6ca43,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/internal/runners/statements/ExpectExceptionTest.java, Integration tests can be found in link org.junit.tests.running.methods.ExpectedTest}. See e.g. link org.junit.tests.running.methods.ExpectedTestexpectsAssumptionViolatedException(},2.0,1,Integration tests found link orgjunittestsrunningmethodsExpectedTest See eg link orgjunittestsrunningmethodsExpectedTestexpectsAssumptionViolatedException Integration test can be found in link orgjunittestsrunningmethodsExpectedTest See eg link orgjunittestsrunningmethodsExpectedTestexpectsAssumptionViolatedException,0
5a941facb8a9f92136b6ca44,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/requests/ClassRequest.java, We have to use the f prefix because IntelliJ's JUnit4IdeaTestRunner uses reflection to access this field. See httpsgithub.comjunitteamjunit4issues960,3.0,1,We use f prefix IntelliJ's JUnit4IdeaTestRunner uses reflection access field See httpsgithubcomjunitteamjunit4issues960 We have to use the f prefix because IntelliJ's JUnit4IdeaTestRunner us reflection to access this field See httpsgithubcomjunitteamjunit4issues960,0
5a941facb8a9f92136b6ca45,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java, A link BlockJUnit4ClassRunner} with parameters support. Parameters can be injected via constructor or into annotated fields.,2.0,1,link BlockJUnit4ClassRunner parameters support Parameters injected via constructor annotated fields link BlockJUnit4ClassRunner with parameter support Parameters can be injected via constructor or into annotated field,0
5a941facb8a9f92136b6ca46,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/tests/deprecated/JUnit4ClassRunnerTest.java, deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically works. Delete this test when JUnit4ClassRunner goes to the Great Heap In The Sky.,3.5,1,deprecated This simple smoke test make sure old JUnit4ClassRunner basically works Delete test JUnit4ClassRunner goes Great Heap In The Sky deprecated This is a simple smoke test to make sure the old JUnit4ClassRunner basically work Delete this test when JUnit4ClassRunner go to the Great Heap In The Sky,1
5a941facb8a9f92136b6ca47,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/results/ResultMatchers.java, Do not instantiate. deprecated will be private soon.,6.0,1,Do instantiate deprecated private soon Do not instantiate deprecated will be private soon,0
5a941facb8a9f92136b6ca48,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/AssumptionViolatedException.java, An exception class used to implement <i>assumptions<i> (state in which a given test is meaningful and should or should not be executed. A test for which an assumption fails should not generate a test case failure. see org.junit.Assume,5.5,1,An exception class used implement assumptions state given test meaningful executed test assumption fails generate test case failure see orgjunitAssume An exception class used to implement assumption state in which a given test is meaningful and should or should not be executed test for which an assumption fails should not generate a test case failure see orgjunitAssume,1
5a941facb8a9f92136b6ca49,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerScheduler.java, Represents a strategy for scheduling when individual test methods should be run (in serial or parallel WARNING still experimental may go away. since 4.7,5.5,1,Represents strategy scheduling individual test methods run serial parallel WARNING still experimental may go away since 47 Represents a strategy for scheduling when individual test method should be run in serial or parallel WARNING still experimental may go away since 47,0
5a941facb8a9f92136b6ca4a,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/samples/money/IMoney.java, Append this to a MoneyBag m. appendTo( needs to be public because it is used polymorphically but it should not be used by clients because it modifies the argument m.,5.5,1,Append MoneyBag appendTo needs public used polymorphically used clients modifies argument Append this to a MoneyBag m appendTo need to be public because it is used polymorphically but it should not be used by client because it modifies the argument m,0
5a941facb8a9f92136b6ca4b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/JUnitSystem.java, Will be removed in the next major release,2.5,1,Will removed next major release Will be removed in the next major release,0
5a941facb8a9f92136b6ca4c,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/DataPoints.java, Annotating an array or iterabletyped field or method with &amp064DataPoints will cause the values in the array or iterable given to be used as potential parameters for theories in that class when run with the link org.junit.experimental.theories.Theories Theories} runner. <p> DataPoints will only be considered as potential values for parameters for which their types are assignable. When multiple sets of DataPoints exist with overlapping types more control can be obtained by naming the DataPoints using the value of this annotation e.g. with <code>&amp064DataPoints(dataset1 dataset2}<code> and then specifying which named set to consider as potential values for each parameter using the link org.junit.experimental.theories.FromDataPoints &amp064FromDataPoints} annotation. <p> Parameters with no specified source (i.e. without &amp064FromDataPoints or other link org.junit.experimental.theories.ParametersSuppliedBy &amp064ParameterSuppliedBy} annotations will use all DataPoints that are assignable to the parameter type as potential values including named sets of DataPoints. <p> DataPoints methods whose array types aren't assignable from the target parameter type (and so can't possibly return relevant values will not be called when generating values for that parameter. Iterabletyped datapoints methods must always be called though as this information is not available here after generic type erasure so expensive methods returning iterable datapoints are a bad idea. <pre> &amp064DataPoints public static String[] dataPoints = new String[]  ... } &amp064DataPoints public static String[] generatedDataPoints( return new String[]  ... } } &amp064Theory public void theoryMethod(String param ... } <pre> see org.junit.experimental.theories.Theories see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.FromDataPoints,10.0,1,Annotating array iterabletyped field method DataPoints cause values array iterable given used potential parameters theories class run link orgjunitexperimentaltheoriesTheories Theories runner DataPoints considered potential values parameters types assignable When multiple sets DataPoints exist overlapping types control obtained naming DataPoints using value annotation eg DataPoints dataset1 dataset2 specifying named set consider potential values parameter using link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters specified source ie without FromDataPoints link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotations use DataPoints assignable parameter type potential values including named sets DataPoints DataPoints methods whose array types assignable target parameter type can't possibly return relevant values called generating values parameter Iterabletyped datapoints methods must always called though information available generic type erasure expensive methods returning iterable datapoints bad idea DataPoints public static String dataPoints = new String DataPoints public static String generatedDataPoints return new String Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints Annotating an array or iterabletyped field or method with DataPoints will cause the value in the array or iterable given to be used a potential parameter for theory in that class when run with the link orgjunitexperimentaltheoriesTheories Theories runner DataPoints will only be considered a potential value for parameter for which their type are assignable When multiple set of DataPoints exist with overlapping type more control can be obtained by naming the DataPoints using the value of this annotation eg with DataPoints dataset1 dataset2 and then specifying which named set to consider a potential value for each parameter using the link orgjunitexperimentaltheoriesFromDataPoints FromDataPoints annotation Parameters with no specified source ie without FromDataPoints or other link orgjunitexperimentaltheoriesParametersSuppliedBy ParameterSuppliedBy annotation will use all DataPoints that are assignable to the parameter type a potential value including named set of DataPoints DataPoints method whose array type aren't assignable from the target parameter type and so can't possibly return relevant value will not be called when generating value for that parameter Iterabletyped datapoints method must always be called though a this information is not available here after generic type erasure so expensive method returning iterable datapoints are a bad idea DataPoints public static String dataPoints = new String DataPoints public static String generatedDataPoints return new String Theory theoryMethod String param see orgjunitexperimentaltheoriesTheories see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesFromDataPoints,-1
5a941facb8a9f92136b6ca4d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/ArrayComparisonFailure.java, Construct a new <code>ArrayComparisonFailure<code> with an error text and the array's dimension that was not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the objects that are not equal. see AssertassertArrayEquals(String Object[] Object[],3.0,1,Construct new ArrayComparisonFailure error text array's dimension equal param cause exception caused array's content fail assertion test param index array position objects equal see AssertassertArrayEquals String Object Object Construct a new ArrayComparisonFailure with an error text and the array's dimension that wa not equal param cause the exception that caused the array's content to fail the assertion test param index the array position of the object that are not equal see AssertassertArrayEquals String Object Object,0
5a941facb8a9f92136b6ca4e,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/DisableOnDebugTest.java, Nasty rule that always fails,2.5,1,Nasty rule always fails Nasty rule that always fails,-1
5a941facb8a9f92136b6ca4f,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Ignore.java, Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with link org.junit.Test} that are also annotated with <code>&amp064Ignore<code> will not be executed as tests. Also you can annotate a class containing test methods with <code>&amp064Ignore<code> and none of the containing tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the number of tests that ran and the number of tests that failed. <p>For example <pre> &amp064Ignore &amp064Test public void something(  ... <pre> &amp064Ignore takes an optional default parameter if you want to record why a test is being ignored <pre> &amp064Ignore(not ready yet &amp064Test public void something(  ... <pre> &amp064Ignore can also be applied to the test class <pre> &amp064Ignore public class IgnoreMe &amp064Test public void test1(  ... } &amp064Test public void test2(  ... } } <pre> since 4.0,4.5,1,Sometimes want temporarily disable test group tests Methods annotated link orgjunitTest also annotated Ignore executed tests Also annotate class containing test methods Ignore none containing tests executed Native JUnit 4 test runners report number ignored tests along number tests ran number tests failed For example Ignore Test something Ignore takes optional default parameter want record test ignored Ignore ready yet Test something Ignore also applied test class Ignore public class IgnoreMe Test test1 Test test2 since 40 Sometimes you want to temporarily disable a test or a group of test Methods annotated with link orgjunitTest that are also annotated with Ignore will not be executed a test Also you can annotate a class containing test method with Ignore and none of the containing test will be executed Native JUnit 4 test runner should report the number of ignored test along with the number of test that ran and the number of test that failed For example Ignore Test something Ignore take an optional default parameter if you want to record why a test is being ignored Ignore not ready yet Test something Ignore can also be applied to the test class Ignore public class IgnoreMe Test test1 Test test2 since 40,0
5a941facb8a9f92136b6ca50,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/matchers/JUnitMatchers.java, Convenience import class these are useful matchers for use with the assertThat method but they are not currently included in the basic CoreMatchers class from hamcrest. since 4.4 deprecated use code org.hamcrest.junit.JUnitMatchers},3.5,1,Convenience import class useful matchers use assertThat method currently included basic CoreMatchers class hamcrest since 44 deprecated use code orghamcrestjunitJUnitMatchers Convenience import class these are useful matcher for use with the assertThat method but they are not currently included in the basic CoreMatchers class from hamcrest since 44 deprecated use code orghamcrestjunitJUnitMatchers,0
5a941facb8a9f92136b6ca51,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/management/ReflectiveThreadMXBean.java, do nothing the methods will be null on failure,2.5,1,nothing methods null failure do nothing the method will be null on failure,0
5a941facb8a9f92136b6ca52,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Runner.java, A <code>Runner<code> runs tests and notifies a link org.junit.runner.notification.RunNotifier} of significant events as it does so. You will need to subclass <code>Runner<code> when using link org.junit.runner.RunWith} to invoke a custom runner. When creating a custom runner in addition to implementing the abstract methods here you must also provide a constructor that takes as an argument the link Class} containing the tests. <p>The default runner implementation guarantees that the instances of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instances generally making them available for garbage collection. see org.junit.runner.Description see org.junit.runner.RunWith since 4.0,5.0,1,Runner runs tests notifies link orgjunitrunnernotificationRunNotifier significant events You need subclass Runner using link orgjunitrunnerRunWith invoke custom runner When creating custom runner addition implementing abstract methods must also provide constructor takes argument link Class containing tests The default runner implementation guarantees instances test case class constructed immediately running test runner retain reference test case instances generally making available garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith since 40 Runner run test and notifies a link orgjunitrunnernotificationRunNotifier of significant event a it doe so You will need to subclass Runner when using link orgjunitrunnerRunWith to invoke a custom runner When creating a custom runner in addition to implementing the abstract method here you must also provide a constructor that take a an argument the link Class containing the test The default runner implementation guarantee that the instance of the test case class will be constructed immediately before running the test and that the runner will retain no reference to the test case instance generally making them available for garbage collection see orgjunitrunnerDescription see orgjunitrunnerRunWith since 40,0
5a941facb8a9f92136b6ca53,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/experimental/categories/MultiCategoryTest.java, This test is mentioned in code Categories} and any changes must be reflected.,2.0,1,This test mentioned code Categories changes must reflected This test is mentioned in code Categories and any change must be reflected,0
5a941facb8a9f92136b6ca54,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/rules/BlockJUnit4ClassRunnerOverrideTest.java, Runner for testing override of link org.junit.runners.BlockJUnit4ClassRunnercreateTest(org.junit.runners.model.FrameworkMethod} by setting the link org.junit.runners.model.FrameworkMethod} in a field of the test class so it can be compared with the test method that is being executed.,2.0,1,Runner testing override link orgjunitrunnersBlockJUnit4ClassRunnercreateTest orgjunitrunnersmodelFrameworkMethod setting link orgjunitrunnersmodelFrameworkMethod field test class compared test method executed Runner for testing override of link orgjunitrunnersBlockJUnit4ClassRunnercreateTest orgjunitrunnersmodelFrameworkMethod by setting the link orgjunitrunnersmodelFrameworkMethod in a field of the test class so it can be compared with the test method that is being executed,0
5a941facb8a9f92136b6ca55,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/model/EachTestNotifier.java, Calls link RunNotifierfireTestSuiteStarted(Description} passing the link Description} that was passed to the code EachTestNotifier} constructor. This should be called when a test suite is about to be started. see RunNotifierfireTestSuiteStarted(Description since 4.13,2.5,1,Calls link RunNotifierfireTestSuiteStarted Description passing link Description passed code EachTestNotifier constructor This called test suite started see RunNotifierfireTestSuiteStarted Description since 413 Calls link RunNotifierfireTestSuiteStarted Description passing the link Description that wa passed to the code EachTestNotifier constructor This should be called when a test suite is about to be started see RunNotifierfireTestSuiteStarted Description since 413,0
5a941facb8a9f92136b6ca56,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/org/junit/internal/runners/statements/FailOnTimeoutTest.java, Must show up in stack trace,0.0,1,Must show stack trace Must show up in stack trace,0
5a941facb8a9f92136b6ca57,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java, Implements the JUnit 4 standard test case class model as defined by the annotations in the org.junit package. Many users will never notice this class it is now the default test class runner but it should have exactly the same behavior as the old test class runner (code JUnit4ClassRunner}. <p> BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners that are slight changes to the default behavior however <ul> <li>It has a much simpler implementation based on link Statement}s allowing new operations to be inserted into the appropriate point in the execution flow. <li>It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner} was in an internal package and is now deprecated. <ul> <p> In turn in 2009 we introduced link Rule}s. In many cases where extending BlockJUnit4ClassRunner was necessary to add new behavior link Rule}s can be used which makes the extension more reusable and composable. since 4.5,10.0,1,Implements JUnit 4 standard test case class model defined annotations orgjunit package Many users never notice class default test class runner exactly behavior old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner advantages writers custom JUnit runners slight changes default behavior however <ul> It much simpler implementation based link Statement allowing new operations inserted appropriate point execution flow It published extension reuse encouraged whereas code JUnit4ClassRunner internal package deprecated <ul> In turn 2009 introduced link Rule In many cases extending BlockJUnit4ClassRunner necessary add new behavior link Rule used makes extension reusable composable since 45 Implements the JUnit 4 standard test case class model a defined by the annotation in the orgjunit package Many user will never notice this class it is now the default test class runner but it should have exactly the same behavior a the old test class runner code JUnit4ClassRunner BlockJUnit4ClassRunner ha advantage for writer of custom JUnit runner that are slight change to the default behavior however <ul> It ha a much simpler implementation based on link Statement s allowing new operation to be inserted into the appropriate point in the execution flow It is published and extension and reuse are encouraged whereas code JUnit4ClassRunner wa in an internal package and is now deprecated <ul> In turn in 2009 we introduced link Rule s In many case where extending BlockJUnit4ClassRunner wa necessary to add new behavior link Rule s can be used which make the extension more reusable and composable since 45,1
5a941facb8a9f92136b6ca58,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java, deprecated used link AllDefaultPossibilitiesBuilder(}.,3.5,1,deprecated used link AllDefaultPossibilitiesBuilder deprecated used link AllDefaultPossibilitiesBuilder,0
5a941facb8a9f92136b6ca59,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/internal/runners/ClassRoadie.java, deprecated Included for backwards compatibility with JUnit 4.4. Will be removed in the next major release. Please use link BlockJUnit4ClassRunner} in place of link JUnit4ClassRunner}.,6.0,1,deprecated Included backwards compatibility JUnit 44 Will removed next major release Please use link BlockJUnit4ClassRunner place link JUnit4ClassRunner deprecated Included for backwards compatibility with JUnit 44 Will be removed in the next major release Please use link BlockJUnit4ClassRunner in place of link JUnit4ClassRunner,0
5a941facb8a9f92136b6ca5a,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/max/MaxHistory.java, Loads a link MaxHistory} from code file} or generates a new one that will be saved to code file}.,2.5,1,Loads link MaxHistory code file generates new one saved code file Loads a link MaxHistory from code file or generates a new one that will be saved to code file,0
5a941facb8a9f92136b6ca5b,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/FromDataPoints.java, Annotating a parameter of a link org.junit.experimental.theories.Theory &amp064Theory} method with <code>&amp064FromDataPoints<code> will limit the datapoints considered as potential values for that parameter to just the link org.junit.experimental.theories.DataPoints DataPoints} with the given name. DataPoint names can be given as the value parameter of the &amp064DataPoints annotation. <p> DataPoints without names will not be considered as values for any parameters annotated with &amp064FromDataPoints. <pre> &amp064DataPoints public static String[] unnamed = new String[]  ... } &amp064DataPoints(regexes public static String[] regexStrings = new String[]  ... } &amp064DataPoints(forMatching alphanumeric} public static String[] testStrings = new String[]  ... } &amp064Theory public void stringTheory(String param  This will be called with every value in 'regexStrings'  'testStrings' and 'unnamed'. } &amp064Theory public void regexTheory(&amp064FromDataPoints(regexes String regex &amp064FromDataPoints(forMatching String value  This will be called with only the values in 'regexStrings' as  regex only the values in 'testStrings' as value and none  of the values in 'unnamed'. } <pre> see org.junit.experimental.theories.Theory see org.junit.experimental.theories.DataPoint see org.junit.experimental.theories.DataPoints,9.0,1,Annotating parameter link orgjunitexperimentaltheoriesTheory Theory method FromDataPoints limit datapoints considered potential values parameter link orgjunitexperimentaltheoriesDataPoints DataPoints given name DataPoint names given value parameter DataPoints annotation DataPoints without names considered values parameters annotated FromDataPoints DataPoints public static String unnamed = new String DataPoints regexes public static String regexStrings = new String DataPoints forMatching alphanumeric public static String testStrings = new String Theory stringTheory String param This called every value 'regexStrings' 'testStrings' 'unnamed' Theory regexTheory FromDataPoints regexes String regex FromDataPoints forMatching String value This called values 'regexStrings' regex values 'testStrings' value none values 'unnamed' see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesDataPoints Annotating a parameter of a link orgjunitexperimentaltheoriesTheory Theory method with FromDataPoints will limit the datapoints considered a potential value for that parameter to just the link orgjunitexperimentaltheoriesDataPoints DataPoints with the given name DataPoint name can be given a the value parameter of the DataPoints annotation DataPoints without name will not be considered a value for any parameter annotated with FromDataPoints DataPoints public static String unnamed = new String DataPoints regexes public static String regexStrings = new String DataPoints forMatching alphanumeric public static String testStrings = new String Theory stringTheory String param This will be called with every value in 'regexStrings' 'testStrings' and 'unnamed' Theory regexTheory FromDataPoints regexes String regex FromDataPoints forMatching String value This will be called with only the value in 'regexStrings' a regex only the value in 'testStrings' a value and none of the value in 'unnamed' see orgjunitexperimentaltheoriesTheory see orgjunitexperimentaltheoriesDataPoint see orgjunitexperimentaltheoriesDataPoints,0
5a941facb8a9f92136b6ca5c,master,2018-02-21,5a932d02b8a9f956ba503603,src/test/java/junit/tests/runner/ResultTest.java, A version of code Result} that returns a hardcoded runtime. This makes values returned by the methods deterministic.,2.0,1,version code Result returns hardcoded runtime This makes values returned methods deterministic version of code Result that return a hardcoded runtime This make value returned by the method deterministic,0
5a941facb8a9f92136b6ca5d,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runner/Result.java, A <code>Result<code> collects and summarizes information from running multiple tests. All tests are counted  additional information is collected from tests that fail. since 4.0,2.5,1,Result collects summarizes information running multiple tests All tests counted additional information collected tests fail since 40 Result collect and summarizes information from running multiple test All test are counted additional information is collected from test that fail since 40,0
5a941facb8a9f92136b6ca5e,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/Rule.java, Annotates fields that reference rules or methods that return a rule. A field must be public not static and a subtype of link org.junit.rules.TestRule} (preferred or link org.junit.rules.MethodRule}. A method must be public not static and must return a subtype of link org.junit.rules.TestRule} (preferred or link org.junit.rules.MethodRule}. <p> The link org.junit.runners.model.Statement} passed to the link org.junit.rules.TestRule} will run any link Before} methods then the link Test} method and finally any link After} methods throwing an exception if any of these fail. If there are multiple annotated link Rule}s on a class they will be applied in order of methods first then fields. However if there are multiple fields (or methods they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general. Rules defined by fields will always be applied after Rules defined by methods i.e. the Statements returned by the former will be executed around those returned by the latter. You can use a link org.junit.rules.RuleChain} if you want to have control over the order in which the Rules are applied. <p> For example here is a test class that creates a temporary folder before each test method and deletes it after each <pre> public static class HasTempFolder &amp064Rule public TemporaryFolder folder= new TemporaryFolder( &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> <p> And the same using a method. <pre> public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder( &amp064Rule public TemporaryFolder getFolder( return folder } &amp064Test public void testUsingTempFolder( throws IOException File createdFile= folder.newFile(&ampquotmyfile.txt&ampquot File createdFolder= folder.newFolder(&ampquotsubfolder&ampquot  ... } } <pre> <p> For more information and more examples see link org.junit.rules.TestRule}. since 4.7,15.5,1,Annotates fields reference rules methods return rule field must public static subtype link orgjunitrulesTestRule preferred link orgjunitrulesMethodRule method must public static must return subtype link orgjunitrulesTestRule preferred link orgjunitrulesMethodRule The link orgjunitrunnersmodelStatement passed link orgjunitrulesTestRule run link Before methods link Test method finally link After methods throwing exception fail If multiple annotated link Rule class applied order methods first fields However multiple fields methods applied order depends JVM's implementation reflection API undefined general Rules defined fields always applied Rules defined methods ie Statements returned former executed around returned latter You use link orgjunitrulesRuleChain want control order Rules applied For example test class creates temporary folder test method deletes public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot And using method public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder Rule public TemporaryFolder getFolder return folder Test testUsingTempFolder throws IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For information examples see link orgjunitrulesTestRule since 47 Annotates field that reference rule or method that return a rule field must be public not static and a subtype of link orgjunitrulesTestRule preferred or link orgjunitrulesMethodRule method must be public not static and must return a subtype of link orgjunitrulesTestRule preferred or link orgjunitrulesMethodRule The link orgjunitrunnersmodelStatement passed to the link orgjunitrulesTestRule will run any link Before method then the link Test method and finally any link After method throwing an exception if any of these fail If there are multiple annotated link Rule s on a class they will be applied in order of method first then field However if there are multiple field or method they will be applied in an order that depends on your JVM's implementation of the reflection API which is undefined in general Rules defined by field will always be applied after Rules defined by method ie the Statements returned by the former will be executed around those returned by the latter You can use a link orgjunitrulesRuleChain if you want to have control over the order in which the Rules are applied For example here is a test class that creates a temporary folder before each test method and deletes it after each public static class HasTempFolder Rule public TemporaryFolder folder= new TemporaryFolder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot And the same using a method public static class HasTempFolder private TemporaryFolder folder= new TemporaryFolder Rule public TemporaryFolder getFolder return folder Test testUsingTempFolder throw IOException File createdFile= foldernewFile &ampquotmyfiletxt&ampquot File createdFolder= foldernewFolder &ampquotsubfolder&ampquot For more information and more example see link orgjunitrulesTestRule since 47,0
5a941facb8a9f92136b6ca5f,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/Theories.java, The Theories runner allows to test a certain functionality against a subset of an infinite set of data points. <p> A Theory is a piece of functionality (a method that is executed against several data inputs called data points. To make a test method a theory you mark it with <b>&amp064Theory<b>. To create a data point you create a public field in your test class and mark it with <b>&amp064DataPoint<b>. The Theories runner then executes your test method as many times as the number of data points declared providing a different data point as the input argument on each invocation. <p> <p> A Theory differs from standard test method in that it captures some aspect of the intended behavior in possibly infinite numbers of scenarios which corresponds to the number of data points declared. Using assumptions and assertions properly together with covering multiple scenarios with different data points can make your tests more flexible and bring them closer to scientific theories (hence the name. <p> <p> For example <pre> &amp064RunWith(<b>Theories.class<b> public class UserTest <b>&amp064DataPoint<b> public static String GOOD_USERNAME = optimus <b>&amp064DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>&amp064Theory<b> public void filenameIncludesUsername(String username assumeThat(username not(containsString( assertThat(new User(username.configFileName( containsString(username } } <pre> This makes it clear that the username should be included in the config file name only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain a slash. <code>UserTest<code> will attempt to run <code>filenameIncludesUsername<code> on every compatible data point defined in the class. If any of the assumptions fail the data point is silently ignored. If all of the assumptions pass but an assertion fails the test fails. If no parameters can be found that satisfy all assumptions the test fails. <p> Defining general statements as theories allows data point reuse across a bunch of functionality tests and also allows automated tools to search for new unexpected data points that expose bugs. <p> <p> The support for Theories has been absorbed from the Popper project and more complete documentation can be found from that projects archived documentation. <p> see <a href=httpweb.archive.orgweb20071012143326popper.tigris.orgtutorial.html>Archived Popper project documentation<a> see <a href=httpweb.archive.orgweb20110608210825httpshareandenjoy.saff.nettddspecifications.pdf>Paper on Theories<a>,14.5,1,The Theories runner allows test certain functionality subset infinite set data points Theory piece functionality method executed several data inputs called data points To make test method theory mark <b>Theory<b> To create data point create public field test class mark <b>DataPoint<b> The Theories runner executes test method many times number data points declared providing different data point input argument invocation Theory differs standard test method captures aspect intended behavior possibly infinite numbers scenarios corresponds number data points declared Using assumptions assertions properly together covering multiple scenarios different data points make tests flexible bring closer scientific theories hence name For example RunWith <b>Theoriesclass<b> public class UserTest <b>DataPoint<b> public static String GOOD_USERNAME = optimus <b>DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>Theory<b> filenameIncludesUsername String username assumeThat username containsString assertThat new User usernameconfigFileName containsString username This makes clear username included config file name contain slash Another test theory might define happens username contain slash UserTest attempt run filenameIncludesUsername every compatible data point defined class If assumptions fail data point silently ignored If assumptions pass assertion fails test fails If parameters found satisfy assumptions test fails Defining general statements theories allows data point reuse across bunch functionality tests also allows automated tools search new unexpected data points expose bugs The support Theories absorbed Popper project complete documentation found projects archived documentation see <a href=httpwebarchiveorgweb20071012143326poppertigrisorgtutorialhtml>Archived Popper project documentation<a> see <a href=httpwebarchiveorgweb20110608210825httpshareandenjoysaffnettddspecificationspdf>Paper Theories<a> The Theories runner allows to test a certain functionality against a subset of an infinite set of data point Theory is a piece of functionality a method that is executed against several data input called data point To make a test method a theory you mark it with <b>Theory<b> To create a data point you create a public field in your test class and mark it with <b>DataPoint<b> The Theories runner then executes your test method a many time a the number of data point declared providing a different data point a the input argument on each invocation Theory differs from standard test method in that it capture some aspect of the intended behavior in possibly infinite number of scenario which corresponds to the number of data point declared Using assumption and assertion properly together with covering multiple scenario with different data point can make your test more flexible and bring them closer to scientific theory hence the name For example RunWith <b>Theoriesclass<b> public class UserTest <b>DataPoint<b> public static String GOOD_USERNAME = optimus <b>DataPoint<b> public static String USERNAME_WITH_SLASH = optimusprime <b>Theory<b> filenameIncludesUsername String username assumeThat username not containsString assertThat new User usernameconfigFileName containsString username This make it clear that the username should be included in the config file name only if it doesn't contain a slash Another test or theory might define what happens when a username doe contain a slash UserTest will attempt to run filenameIncludesUsername on every compatible data point defined in the class If any of the assumption fail the data point is silently ignored If all of the assumption pas but an assertion fails the test fails If no parameter can be found that satisfy all assumption the test fails Defining general statement a theory allows data point reuse across a bunch of functionality test and also allows automated tool to search for new unexpected data point that expose bug The support for Theories ha been absorbed from the Popper project and more complete documentation can be found from that project archived documentation see <a href=httpwebarchiveorgweb20071012143326poppertigrisorgtutorialhtml>Archived Popper project documentation<a> see <a href=httpwebarchiveorgweb20110608210825httpshareandenjoysaffnettddspecificationspdf>Paper on Theories<a>,0
5a941facb8a9f92136b6ca60,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/FrameworkField.java, Represents a field on a test class (currently used only for Rules in link BlockJUnit4ClassRunner} but custom runners can make other uses since 4.7,0.0,1,Represents field test class currently used Rules link BlockJUnit4ClassRunner custom runners make uses since 47 Represents a field on a test class currently used only for Rules in link BlockJUnit4ClassRunner but custom runner can make other us since 47,0
5a941facb8a9f92136b6ca61,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/categories/Categories.java, From a given set of test classes runs only the classes and methods that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category. <p> Note that for now annotating suites with code Category} has no effect. Categories must be annotated on the direct method or class. <p> Example <pre> public interface FastTests } public interface SlowTests } public interface SmokeTests } public static class A &amp064Test public void a( fail( } &amp064Category(SlowTests.class &amp064Test public void b( } &amp064Category(FastTests.class SmokeTests.class} &amp064Test public void c( } } &amp064Category(SlowTests.class FastTests.class} public static class B &amp064Test public void d( } } &amp064RunWith(Categories.class &amp064IncludeCategory(SlowTests.class &amp064SuiteClasses(A.class B.class}  Note that Categories is a kind of Suite public static class SlowTestSuite  Will run A.b and B.d but not A.a and A.c } <pre> <p> Example to run multiple categories <pre> &amp064RunWith(Categories.class &amp064IncludeCategory(FastTests.class SmokeTests.class} &amp064SuiteClasses(A.class B.class} public static class FastOrSmokeTestSuite  Will run A.c and B.d but not A.b because it is not any of FastTests or SmokeTests } <pre> version 4.12 see <a href=httpsgithub.comjunitteamjunit4wikiCategories>Categories at JUnit wiki<a>,2.0,1,From given set test classes runs classes methods annotated either category given IncludeCategory annotation subtype category Note annotating suites code Category effect Categories must annotated direct method class Example public interface FastTests public interface SlowTests public interface SmokeTests public static class Test fail Category SlowTestsclass Test b Category FastTestsclass SmokeTestsclass Test c Category SlowTestsclass FastTestsclass public static class B Test RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note Categories kind Suite public static class SlowTestSuite Will run Ab Bd Aa Ac Example run multiple categories RunWith Categoriesclass IncludeCategory FastTestsclass SmokeTestsclass SuiteClasses Aclass Bclass public static class FastOrSmokeTestSuite Will run Ac Bd Ab FastTests SmokeTests version 412 see <a href=httpsgithubcomjunitteamjunit4wikiCategories>Categories JUnit wiki<a> From a given set of test class run only the class and method that are annotated with either the category given with the IncludeCategory annotation or a subtype of that category Note that for now annotating suite with code Category ha no effect Categories must be annotated on the direct method or class Example public interface FastTests public interface SlowTests public interface SmokeTests public static class Test a fail Category SlowTestsclass Test b Category FastTestsclass SmokeTestsclass Test c Category SlowTestsclass FastTestsclass public static class B Test d RunWith Categoriesclass IncludeCategory SlowTestsclass SuiteClasses Aclass Bclass Note that Categories is a kind of Suite public static class SlowTestSuite Will run Ab and Bd but not Aa and Ac Example to run multiple category RunWith Categoriesclass IncludeCategory FastTestsclass SmokeTestsclass SuiteClasses Aclass Bclass public static class FastOrSmokeTestSuite Will run Ac and Bd but not Ab because it is not any of FastTests or SmokeTests version 412 see <a href=httpsgithubcomjunitteamjunit4wikiCategories>Categories at JUnit wiki<a>,0
5a941facb8a9f92136b6ca62,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/runners/model/RunnerBuilder.java, A RunnerBuilder is a strategy for constructing runners for classes. Only writers of custom runners should use <code>RunnerBuilder<code>s. A custom runner class with a constructor taking a <code>RunnerBuilder<code> parameter will be passed the instance of <code>RunnerBuilder<code> used to build that runner itself. For example imagine a custom runner that builds suites based on a list of classes in a text file <pre> RunWith(TextFileSuite.class SuiteSpecFile(mysuite.txt class MySuite } <pre> The implementation of TextFileSuite might include <pre> public TextFileSuite(Class testClass RunnerBuilder builder  ... for (String className  readClassNames( addRunner(builder.runnerForClass(Class.forName(className  ... } <pre> see org.junit.runners.Suite since 4.5,4.5,1,RunnerBuilder strategy constructing runners classes Only writers custom runners use RunnerBuilder custom runner class constructor taking RunnerBuilder parameter passed instance RunnerBuilder used build runner For example imagine custom runner builds suites based list classes text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite since 45 RunnerBuilder is a strategy for constructing runner for class Only writer of custom runner should use RunnerBuilder s custom runner class with a constructor taking a RunnerBuilder parameter will be passed the instance of RunnerBuilder used to build that runner itself For example imagine a custom runner that build suite based on a list of class in a text file RunWith TextFileSuiteclass SuiteSpecFile mysuitetxt class MySuite The implementation of TextFileSuite might include public TextFileSuite Class testClass RunnerBuilder builder for String className readClassNames addRunner builderrunnerForClass ClassforName className see orgjunitrunnersSuite since 45,0
5a941facb8a9f92136b6ca63,master,2018-02-21,5a932d02b8a9f956ba503603,src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java, Annotating a link org.junit.experimental.theories.Theory Theory} method parameter with &amp064ParametersSuppliedBy causes it to be supplied with values from the named link org.junit.experimental.theories.ParameterSupplier ParameterSupplier} when run as a theory by the link org.junit.experimental.theories.Theories Theories} runner. In addition annotations themselves can be annotated with &amp064ParametersSuppliedBy and then used similarly. ParameterSuppliedBy annotations on parameters are detected by searching up this heirarchy such that these act as syntactic sugar making <pre> &amp064ParametersSuppliedBy(Supplier.class public &amp064interface SpecialParameter  } &amp064Theory public void theoryMethod(&amp064SpecialParameter String param ... } <pre> equivalent to <pre> &amp064Theory public void theoryMethod(&amp064ParametersSuppliedBy(Supplier.class String param ... } <pre>,2.0,1,Annotating link orgjunitexperimentaltheoriesTheory Theory method parameter ParametersSuppliedBy causes supplied values named link orgjunitexperimentaltheoriesParameterSupplier ParameterSupplier run theory link orgjunitexperimentaltheoriesTheories Theories runner In addition annotations annotated ParametersSuppliedBy used similarly ParameterSuppliedBy annotations parameters detected searching heirarchy act syntactic sugar making ParametersSuppliedBy Supplierclass public interface SpecialParameter Theory theoryMethod SpecialParameter String param equivalent Theory theoryMethod ParametersSuppliedBy Supplierclass String param Annotating a link orgjunitexperimentaltheoriesTheory Theory method parameter with ParametersSuppliedBy cause it to be supplied with value from the named link orgjunitexperimentaltheoriesParameterSupplier ParameterSupplier when run a a theory by the link orgjunitexperimentaltheoriesTheories Theories runner In addition annotation themselves can be annotated with ParametersSuppliedBy and then used similarly ParameterSuppliedBy annotation on parameter are detected by searching up this heirarchy such that these act a syntactic sugar making ParametersSuppliedBy Supplierclass public interface SpecialParameter Theory theoryMethod SpecialParameter String param equivalent to Theory theoryMethod ParametersSuppliedBy Supplierclass String param,0
